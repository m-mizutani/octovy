// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/m-mizutani/octovy/pkg/domain/interfaces"
	"github.com/m-mizutani/octovy/pkg/domain/model"
	"github.com/m-mizutani/octovy/pkg/domain/model/trivy"
	"sync"
)

// Ensure, that UseCaseMock does implement interfaces.UseCase.
// If this is not the case, regenerate this file with moq.
var _ interfaces.UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of interfaces.UseCase.
//
//	func TestSomethingThatUsesUseCase(t *testing.T) {
//
//		// make and configure a mocked interfaces.UseCase
//		mockedUseCase := &UseCaseMock{
//			InsertScanResultFunc: func(ctx context.Context, meta model.GitHubMetadata, report trivy.Report, cfg model.Config) error {
//				panic("mock out the InsertScanResult method")
//			},
//			ScanGitHubRepoFunc: func(ctx context.Context, input *model.ScanGitHubRepoInput) error {
//				panic("mock out the ScanGitHubRepo method")
//			},
//		}
//
//		// use mockedUseCase in code that requires interfaces.UseCase
//		// and then make assertions.
//
//	}
type UseCaseMock struct {
	// InsertScanResultFunc mocks the InsertScanResult method.
	InsertScanResultFunc func(ctx context.Context, meta model.GitHubMetadata, report trivy.Report, cfg model.Config) error

	// ScanGitHubRepoFunc mocks the ScanGitHubRepo method.
	ScanGitHubRepoFunc func(ctx context.Context, input *model.ScanGitHubRepoInput) error

	// calls tracks calls to the methods.
	calls struct {
		// InsertScanResult holds details about calls to the InsertScanResult method.
		InsertScanResult []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Meta is the meta argument value.
			Meta model.GitHubMetadata
			// Report is the report argument value.
			Report trivy.Report
			// Cfg is the cfg argument value.
			Cfg model.Config
		}
		// ScanGitHubRepo holds details about calls to the ScanGitHubRepo method.
		ScanGitHubRepo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *model.ScanGitHubRepoInput
		}
	}
	lockInsertScanResult sync.RWMutex
	lockScanGitHubRepo   sync.RWMutex
}

// InsertScanResult calls InsertScanResultFunc.
func (mock *UseCaseMock) InsertScanResult(ctx context.Context, meta model.GitHubMetadata, report trivy.Report, cfg model.Config) error {
	if mock.InsertScanResultFunc == nil {
		panic("UseCaseMock.InsertScanResultFunc: method is nil but UseCase.InsertScanResult was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Meta   model.GitHubMetadata
		Report trivy.Report
		Cfg    model.Config
	}{
		Ctx:    ctx,
		Meta:   meta,
		Report: report,
		Cfg:    cfg,
	}
	mock.lockInsertScanResult.Lock()
	mock.calls.InsertScanResult = append(mock.calls.InsertScanResult, callInfo)
	mock.lockInsertScanResult.Unlock()
	return mock.InsertScanResultFunc(ctx, meta, report, cfg)
}

// InsertScanResultCalls gets all the calls that were made to InsertScanResult.
// Check the length with:
//
//	len(mockedUseCase.InsertScanResultCalls())
func (mock *UseCaseMock) InsertScanResultCalls() []struct {
	Ctx    context.Context
	Meta   model.GitHubMetadata
	Report trivy.Report
	Cfg    model.Config
} {
	var calls []struct {
		Ctx    context.Context
		Meta   model.GitHubMetadata
		Report trivy.Report
		Cfg    model.Config
	}
	mock.lockInsertScanResult.RLock()
	calls = mock.calls.InsertScanResult
	mock.lockInsertScanResult.RUnlock()
	return calls
}

// ScanGitHubRepo calls ScanGitHubRepoFunc.
func (mock *UseCaseMock) ScanGitHubRepo(ctx context.Context, input *model.ScanGitHubRepoInput) error {
	if mock.ScanGitHubRepoFunc == nil {
		panic("UseCaseMock.ScanGitHubRepoFunc: method is nil but UseCase.ScanGitHubRepo was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *model.ScanGitHubRepoInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockScanGitHubRepo.Lock()
	mock.calls.ScanGitHubRepo = append(mock.calls.ScanGitHubRepo, callInfo)
	mock.lockScanGitHubRepo.Unlock()
	return mock.ScanGitHubRepoFunc(ctx, input)
}

// ScanGitHubRepoCalls gets all the calls that were made to ScanGitHubRepo.
// Check the length with:
//
//	len(mockedUseCase.ScanGitHubRepoCalls())
func (mock *UseCaseMock) ScanGitHubRepoCalls() []struct {
	Ctx   context.Context
	Input *model.ScanGitHubRepoInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *model.ScanGitHubRepoInput
	}
	mock.lockScanGitHubRepo.RLock()
	calls = mock.calls.ScanGitHubRepo
	mock.lockScanGitHubRepo.RUnlock()
	return calls
}
