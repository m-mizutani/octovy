// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/infra/ent/rule"
	"github.com/m-mizutani/octovy/pkg/infra/ent/severity"
)

// Rule is the model entity for the Rule schema.
type Rule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RuleQuery when eager-loading is set.
	Edges         RuleEdges `json:"edges"`
	rule_severity *int
}

// RuleEdges holds the relations/edges for other nodes in the graph.
type RuleEdges struct {
	// Severity holds the value of the severity edge.
	Severity *Severity `json:"severity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SeverityOrErr returns the Severity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RuleEdges) SeverityOrErr() (*Severity, error) {
	if e.loadedTypes[0] {
		if e.Severity == nil {
			// The edge severity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: severity.Label}
		}
		return e.Severity, nil
	}
	return nil, &NotLoadedError{edge: "severity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rule.FieldID:
			values[i] = new(sql.NullInt64)
		case rule.FieldAction:
			values[i] = new(sql.NullString)
		case rule.ForeignKeys[0]: // rule_severity
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Rule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rule fields.
func (r *Rule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rule.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				r.Action = value.String
			}
		case rule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field rule_severity", value)
			} else if value.Valid {
				r.rule_severity = new(int)
				*r.rule_severity = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySeverity queries the "severity" edge of the Rule entity.
func (r *Rule) QuerySeverity() *SeverityQuery {
	return (&RuleClient{config: r.config}).QuerySeverity(r)
}

// Update returns a builder for updating this Rule.
// Note that you need to call Rule.Unwrap() before calling this method if this Rule
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rule) Update() *RuleUpdateOne {
	return (&RuleClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Rule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rule) Unwrap() *Rule {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rule is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rule) String() string {
	var builder strings.Builder
	builder.WriteString("Rule(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", action=")
	builder.WriteString(r.Action)
	builder.WriteByte(')')
	return builder.String()
}

// Rules is a parsable slice of Rule.
type Rules []*Rule

func (r Rules) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
