// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/branch"
	"github.com/m-mizutani/octovy/pkg/infra/ent/scan"
)

// BranchCreate is the builder for creating a Branch entity.
type BranchCreate struct {
	config
	mutation *BranchMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (bc *BranchCreate) SetKey(s string) *BranchCreate {
	bc.mutation.SetKey(s)
	return bc
}

// SetOwner sets the "owner" field.
func (bc *BranchCreate) SetOwner(s string) *BranchCreate {
	bc.mutation.SetOwner(s)
	return bc
}

// SetRepoName sets the "repo_name" field.
func (bc *BranchCreate) SetRepoName(s string) *BranchCreate {
	bc.mutation.SetRepoName(s)
	return bc
}

// SetName sets the "name" field.
func (bc *BranchCreate) SetName(s string) *BranchCreate {
	bc.mutation.SetName(s)
	return bc
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (bc *BranchCreate) AddScanIDs(ids ...int) *BranchCreate {
	bc.mutation.AddScanIDs(ids...)
	return bc
}

// AddScan adds the "scan" edges to the Scan entity.
func (bc *BranchCreate) AddScan(s ...*Scan) *BranchCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bc.AddScanIDs(ids...)
}

// Mutation returns the BranchMutation object of the builder.
func (bc *BranchCreate) Mutation() *BranchMutation {
	return bc.mutation
}

// Save creates the Branch in the database.
func (bc *BranchCreate) Save(ctx context.Context) (*Branch, error) {
	var (
		err  error
		node *Branch
	)
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BranchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BranchCreate) SaveX(ctx context.Context) *Branch {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BranchCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BranchCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BranchCreate) check() error {
	if _, ok := bc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "key"`)}
	}
	if _, ok := bc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "owner"`)}
	}
	if _, ok := bc.mutation.RepoName(); !ok {
		return &ValidationError{Name: "repo_name", err: errors.New(`ent: missing required field "repo_name"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	return nil
}

func (bc *BranchCreate) sqlSave(ctx context.Context) (*Branch, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BranchCreate) createSpec() (*Branch, *sqlgraph.CreateSpec) {
	var (
		_node = &Branch{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: branch.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: branch.FieldID,
			},
		}
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := bc.mutation.Owner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldOwner,
		})
		_node.Owner = value
	}
	if value, ok := bc.mutation.RepoName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldRepoName,
		})
		_node.RepoName = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldName,
		})
		_node.Name = value
	}
	if nodes := bc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   branch.ScanTable,
			Columns: branch.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Branch.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BranchUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
//
func (bc *BranchCreate) OnConflict(opts ...sql.ConflictOption) *BranchUpsertOne {
	bc.conflict = opts
	return &BranchUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.Branch.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (bc *BranchCreate) OnConflictColumns(columns ...string) *BranchUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BranchUpsertOne{
		create: bc,
	}
}

type (
	// BranchUpsertOne is the builder for "upsert"-ing
	//  one Branch node.
	BranchUpsertOne struct {
		create *BranchCreate
	}

	// BranchUpsert is the "OnConflict" setter.
	BranchUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *BranchUpsert) SetKey(v string) *BranchUpsert {
	u.Set(branch.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *BranchUpsert) UpdateKey() *BranchUpsert {
	u.SetExcluded(branch.FieldKey)
	return u
}

// SetOwner sets the "owner" field.
func (u *BranchUpsert) SetOwner(v string) *BranchUpsert {
	u.Set(branch.FieldOwner, v)
	return u
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *BranchUpsert) UpdateOwner() *BranchUpsert {
	u.SetExcluded(branch.FieldOwner)
	return u
}

// SetRepoName sets the "repo_name" field.
func (u *BranchUpsert) SetRepoName(v string) *BranchUpsert {
	u.Set(branch.FieldRepoName, v)
	return u
}

// UpdateRepoName sets the "repo_name" field to the value that was provided on create.
func (u *BranchUpsert) UpdateRepoName() *BranchUpsert {
	u.SetExcluded(branch.FieldRepoName)
	return u
}

// SetName sets the "name" field.
func (u *BranchUpsert) SetName(v string) *BranchUpsert {
	u.Set(branch.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BranchUpsert) UpdateName() *BranchUpsert {
	u.SetExcluded(branch.FieldName)
	return u
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.Branch.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *BranchUpsertOne) UpdateNewValues() *BranchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Branch.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *BranchUpsertOne) Ignore() *BranchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BranchUpsertOne) DoNothing() *BranchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BranchCreate.OnConflict
// documentation for more info.
func (u *BranchUpsertOne) Update(set func(*BranchUpsert)) *BranchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BranchUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *BranchUpsertOne) SetKey(v string) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateKey() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateKey()
	})
}

// SetOwner sets the "owner" field.
func (u *BranchUpsertOne) SetOwner(v string) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateOwner() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateOwner()
	})
}

// SetRepoName sets the "repo_name" field.
func (u *BranchUpsertOne) SetRepoName(v string) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetRepoName(v)
	})
}

// UpdateRepoName sets the "repo_name" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateRepoName() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateRepoName()
	})
}

// SetName sets the "name" field.
func (u *BranchUpsertOne) SetName(v string) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateName() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *BranchUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BranchCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BranchUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BranchUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BranchUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BranchCreateBulk is the builder for creating many Branch entities in bulk.
type BranchCreateBulk struct {
	config
	builders []*BranchCreate
	conflict []sql.ConflictOption
}

// Save creates the Branch entities in the database.
func (bcb *BranchCreateBulk) Save(ctx context.Context) ([]*Branch, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Branch, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BranchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BranchCreateBulk) SaveX(ctx context.Context) []*Branch {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BranchCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BranchCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Branch.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BranchUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
//
func (bcb *BranchCreateBulk) OnConflict(opts ...sql.ConflictOption) *BranchUpsertBulk {
	bcb.conflict = opts
	return &BranchUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.Branch.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (bcb *BranchCreateBulk) OnConflictColumns(columns ...string) *BranchUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BranchUpsertBulk{
		create: bcb,
	}
}

// BranchUpsertBulk is the builder for "upsert"-ing
// a bulk of Branch nodes.
type BranchUpsertBulk struct {
	create *BranchCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.Branch.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *BranchUpsertBulk) UpdateNewValues() *BranchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Branch.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *BranchUpsertBulk) Ignore() *BranchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BranchUpsertBulk) DoNothing() *BranchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BranchCreateBulk.OnConflict
// documentation for more info.
func (u *BranchUpsertBulk) Update(set func(*BranchUpsert)) *BranchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BranchUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *BranchUpsertBulk) SetKey(v string) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateKey() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateKey()
	})
}

// SetOwner sets the "owner" field.
func (u *BranchUpsertBulk) SetOwner(v string) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateOwner() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateOwner()
	})
}

// SetRepoName sets the "repo_name" field.
func (u *BranchUpsertBulk) SetRepoName(v string) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetRepoName(v)
	})
}

// UpdateRepoName sets the "repo_name" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateRepoName() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateRepoName()
	})
}

// SetName sets the "name" field.
func (u *BranchUpsertBulk) SetName(v string) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateName() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *BranchUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BranchCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BranchCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BranchUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
