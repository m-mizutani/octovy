// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/domain/types"
	"github.com/m-mizutani/octovy/pkg/infra/ent/checkrule"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
	"github.com/m-mizutani/octovy/pkg/infra/ent/severity"
)

// CheckRuleUpdate is the builder for updating CheckRule entities.
type CheckRuleUpdate struct {
	config
	hooks    []Hook
	mutation *CheckRuleMutation
}

// Where appends a list predicates to the CheckRuleUpdate builder.
func (cru *CheckRuleUpdate) Where(ps ...predicate.CheckRule) *CheckRuleUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetName sets the "name" field.
func (cru *CheckRuleUpdate) SetName(s string) *CheckRuleUpdate {
	cru.mutation.SetName(s)
	return cru
}

// SetResult sets the "result" field.
func (cru *CheckRuleUpdate) SetResult(thcr types.GitHubCheckResult) *CheckRuleUpdate {
	cru.mutation.SetResult(thcr)
	return cru
}

// SetSeverityID sets the "severity" edge to the Severity entity by ID.
func (cru *CheckRuleUpdate) SetSeverityID(id int) *CheckRuleUpdate {
	cru.mutation.SetSeverityID(id)
	return cru
}

// SetNillableSeverityID sets the "severity" edge to the Severity entity by ID if the given value is not nil.
func (cru *CheckRuleUpdate) SetNillableSeverityID(id *int) *CheckRuleUpdate {
	if id != nil {
		cru = cru.SetSeverityID(*id)
	}
	return cru
}

// SetSeverity sets the "severity" edge to the Severity entity.
func (cru *CheckRuleUpdate) SetSeverity(s *Severity) *CheckRuleUpdate {
	return cru.SetSeverityID(s.ID)
}

// Mutation returns the CheckRuleMutation object of the builder.
func (cru *CheckRuleUpdate) Mutation() *CheckRuleMutation {
	return cru.mutation
}

// ClearSeverity clears the "severity" edge to the Severity entity.
func (cru *CheckRuleUpdate) ClearSeverity() *CheckRuleUpdate {
	cru.mutation.ClearSeverity()
	return cru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CheckRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cru.hooks) == 0 {
		affected, err = cru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cru.mutation = mutation
			affected, err = cru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cru.hooks) - 1; i >= 0; i-- {
			if cru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CheckRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CheckRuleUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CheckRuleUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cru *CheckRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkrule.Table,
			Columns: checkrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkrule.FieldID,
			},
		},
	}
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkrule.FieldName,
		})
	}
	if value, ok := cru.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkrule.FieldResult,
		})
	}
	if cru.mutation.SeverityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checkrule.SeverityTable,
			Columns: []string{checkrule.SeverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.SeverityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checkrule.SeverityTable,
			Columns: []string{checkrule.SeverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CheckRuleUpdateOne is the builder for updating a single CheckRule entity.
type CheckRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CheckRuleMutation
}

// SetName sets the "name" field.
func (cruo *CheckRuleUpdateOne) SetName(s string) *CheckRuleUpdateOne {
	cruo.mutation.SetName(s)
	return cruo
}

// SetResult sets the "result" field.
func (cruo *CheckRuleUpdateOne) SetResult(thcr types.GitHubCheckResult) *CheckRuleUpdateOne {
	cruo.mutation.SetResult(thcr)
	return cruo
}

// SetSeverityID sets the "severity" edge to the Severity entity by ID.
func (cruo *CheckRuleUpdateOne) SetSeverityID(id int) *CheckRuleUpdateOne {
	cruo.mutation.SetSeverityID(id)
	return cruo
}

// SetNillableSeverityID sets the "severity" edge to the Severity entity by ID if the given value is not nil.
func (cruo *CheckRuleUpdateOne) SetNillableSeverityID(id *int) *CheckRuleUpdateOne {
	if id != nil {
		cruo = cruo.SetSeverityID(*id)
	}
	return cruo
}

// SetSeverity sets the "severity" edge to the Severity entity.
func (cruo *CheckRuleUpdateOne) SetSeverity(s *Severity) *CheckRuleUpdateOne {
	return cruo.SetSeverityID(s.ID)
}

// Mutation returns the CheckRuleMutation object of the builder.
func (cruo *CheckRuleUpdateOne) Mutation() *CheckRuleMutation {
	return cruo.mutation
}

// ClearSeverity clears the "severity" edge to the Severity entity.
func (cruo *CheckRuleUpdateOne) ClearSeverity() *CheckRuleUpdateOne {
	cruo.mutation.ClearSeverity()
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CheckRuleUpdateOne) Select(field string, fields ...string) *CheckRuleUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CheckRule entity.
func (cruo *CheckRuleUpdateOne) Save(ctx context.Context) (*CheckRule, error) {
	var (
		err  error
		node *CheckRule
	)
	if len(cruo.hooks) == 0 {
		node, err = cruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cruo.mutation = mutation
			node, err = cruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cruo.hooks) - 1; i >= 0; i-- {
			if cruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CheckRuleUpdateOne) SaveX(ctx context.Context) *CheckRule {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CheckRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CheckRuleUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cruo *CheckRuleUpdateOne) sqlSave(ctx context.Context) (_node *CheckRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkrule.Table,
			Columns: checkrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkrule.FieldID,
			},
		},
	}
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CheckRule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, checkrule.FieldID)
		for _, f := range fields {
			if !checkrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != checkrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkrule.FieldName,
		})
	}
	if value, ok := cruo.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkrule.FieldResult,
		})
	}
	if cruo.mutation.SeverityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checkrule.SeverityTable,
			Columns: []string{checkrule.SeverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.SeverityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checkrule.SeverityTable,
			Columns: []string{checkrule.SeverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CheckRule{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
