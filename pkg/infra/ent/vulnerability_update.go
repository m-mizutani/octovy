// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/packagerecord"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnerability"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnstatus"
)

// VulnerabilityUpdate is the builder for updating Vulnerability entities.
type VulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// Where appends a list predicates to the VulnerabilityUpdate builder.
func (vu *VulnerabilityUpdate) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetFirstSeenAt sets the "first_seen_at" field.
func (vu *VulnerabilityUpdate) SetFirstSeenAt(i int64) *VulnerabilityUpdate {
	vu.mutation.ResetFirstSeenAt()
	vu.mutation.SetFirstSeenAt(i)
	return vu
}

// AddFirstSeenAt adds i to the "first_seen_at" field.
func (vu *VulnerabilityUpdate) AddFirstSeenAt(i int64) *VulnerabilityUpdate {
	vu.mutation.AddFirstSeenAt(i)
	return vu
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (vu *VulnerabilityUpdate) SetLastModifiedAt(i int64) *VulnerabilityUpdate {
	vu.mutation.ResetLastModifiedAt()
	vu.mutation.SetLastModifiedAt(i)
	return vu
}

// AddLastModifiedAt adds i to the "last_modified_at" field.
func (vu *VulnerabilityUpdate) AddLastModifiedAt(i int64) *VulnerabilityUpdate {
	vu.mutation.AddLastModifiedAt(i)
	return vu
}

// SetTitle sets the "title" field.
func (vu *VulnerabilityUpdate) SetTitle(s string) *VulnerabilityUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableTitle(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetTitle(*s)
	}
	return vu
}

// ClearTitle clears the value of the "title" field.
func (vu *VulnerabilityUpdate) ClearTitle() *VulnerabilityUpdate {
	vu.mutation.ClearTitle()
	return vu
}

// SetDescription sets the "description" field.
func (vu *VulnerabilityUpdate) SetDescription(s string) *VulnerabilityUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableDescription(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VulnerabilityUpdate) ClearDescription() *VulnerabilityUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetCweID sets the "cwe_id" field.
func (vu *VulnerabilityUpdate) SetCweID(s []string) *VulnerabilityUpdate {
	vu.mutation.SetCweID(s)
	return vu
}

// ClearCweID clears the value of the "cwe_id" field.
func (vu *VulnerabilityUpdate) ClearCweID() *VulnerabilityUpdate {
	vu.mutation.ClearCweID()
	return vu
}

// SetSeverity sets the "severity" field.
func (vu *VulnerabilityUpdate) SetSeverity(s string) *VulnerabilityUpdate {
	vu.mutation.SetSeverity(s)
	return vu
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableSeverity(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetSeverity(*s)
	}
	return vu
}

// ClearSeverity clears the value of the "severity" field.
func (vu *VulnerabilityUpdate) ClearSeverity() *VulnerabilityUpdate {
	vu.mutation.ClearSeverity()
	return vu
}

// SetCvss sets the "cvss" field.
func (vu *VulnerabilityUpdate) SetCvss(s []string) *VulnerabilityUpdate {
	vu.mutation.SetCvss(s)
	return vu
}

// ClearCvss clears the value of the "cvss" field.
func (vu *VulnerabilityUpdate) ClearCvss() *VulnerabilityUpdate {
	vu.mutation.ClearCvss()
	return vu
}

// SetReferences sets the "references" field.
func (vu *VulnerabilityUpdate) SetReferences(s []string) *VulnerabilityUpdate {
	vu.mutation.SetReferences(s)
	return vu
}

// ClearReferences clears the value of the "references" field.
func (vu *VulnerabilityUpdate) ClearReferences() *VulnerabilityUpdate {
	vu.mutation.ClearReferences()
	return vu
}

// AddPackageIDs adds the "packages" edge to the PackageRecord entity by IDs.
func (vu *VulnerabilityUpdate) AddPackageIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.AddPackageIDs(ids...)
	return vu
}

// AddPackages adds the "packages" edges to the PackageRecord entity.
func (vu *VulnerabilityUpdate) AddPackages(p ...*PackageRecord) *VulnerabilityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.AddPackageIDs(ids...)
}

// AddStatuIDs adds the "status" edge to the VulnStatus entity by IDs.
func (vu *VulnerabilityUpdate) AddStatuIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.AddStatuIDs(ids...)
	return vu
}

// AddStatus adds the "status" edges to the VulnStatus entity.
func (vu *VulnerabilityUpdate) AddStatus(v ...*VulnStatus) *VulnerabilityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddStatuIDs(ids...)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vu *VulnerabilityUpdate) Mutation() *VulnerabilityMutation {
	return vu.mutation
}

// ClearPackages clears all "packages" edges to the PackageRecord entity.
func (vu *VulnerabilityUpdate) ClearPackages() *VulnerabilityUpdate {
	vu.mutation.ClearPackages()
	return vu
}

// RemovePackageIDs removes the "packages" edge to PackageRecord entities by IDs.
func (vu *VulnerabilityUpdate) RemovePackageIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.RemovePackageIDs(ids...)
	return vu
}

// RemovePackages removes "packages" edges to PackageRecord entities.
func (vu *VulnerabilityUpdate) RemovePackages(p ...*PackageRecord) *VulnerabilityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.RemovePackageIDs(ids...)
}

// ClearStatus clears all "status" edges to the VulnStatus entity.
func (vu *VulnerabilityUpdate) ClearStatus() *VulnerabilityUpdate {
	vu.mutation.ClearStatus()
	return vu
}

// RemoveStatuIDs removes the "status" edge to VulnStatus entities by IDs.
func (vu *VulnerabilityUpdate) RemoveStatuIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.RemoveStatuIDs(ids...)
	return vu
}

// RemoveStatus removes "status" edges to VulnStatus entities.
func (vu *VulnerabilityUpdate) RemoveStatus(v ...*VulnStatus) *VulnerabilityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveStatuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerability.Table,
			Columns: vulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: vulnerability.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.FirstSeenAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldFirstSeenAt,
		})
	}
	if value, ok := vu.mutation.AddedFirstSeenAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldFirstSeenAt,
		})
	}
	if value, ok := vu.mutation.LastModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldLastModifiedAt,
		})
	}
	if value, ok := vu.mutation.AddedLastModifiedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldLastModifiedAt,
		})
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldTitle,
		})
	}
	if vu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldTitle,
		})
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldDescription,
		})
	}
	if vu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldDescription,
		})
	}
	if value, ok := vu.mutation.CweID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldCweID,
		})
	}
	if vu.mutation.CweIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vulnerability.FieldCweID,
		})
	}
	if value, ok := vu.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldSeverity,
		})
	}
	if vu.mutation.SeverityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldSeverity,
		})
	}
	if value, ok := vu.mutation.Cvss(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldCvss,
		})
	}
	if vu.mutation.CvssCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vulnerability.FieldCvss,
		})
	}
	if value, ok := vu.mutation.References(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldReferences,
		})
	}
	if vu.mutation.ReferencesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vulnerability.FieldReferences,
		})
	}
	if vu.mutation.PackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.PackagesTable,
			Columns: vulnerability.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: packagerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedPackagesIDs(); len(nodes) > 0 && !vu.mutation.PackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.PackagesTable,
			Columns: vulnerability.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: packagerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.PackagesTable,
			Columns: vulnerability.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: packagerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerability.StatusTable,
			Columns: []string{vulnerability.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedStatusIDs(); len(nodes) > 0 && !vu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerability.StatusTable,
			Columns: []string{vulnerability.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerability.StatusTable,
			Columns: []string{vulnerability.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VulnerabilityUpdateOne is the builder for updating a single Vulnerability entity.
type VulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// SetFirstSeenAt sets the "first_seen_at" field.
func (vuo *VulnerabilityUpdateOne) SetFirstSeenAt(i int64) *VulnerabilityUpdateOne {
	vuo.mutation.ResetFirstSeenAt()
	vuo.mutation.SetFirstSeenAt(i)
	return vuo
}

// AddFirstSeenAt adds i to the "first_seen_at" field.
func (vuo *VulnerabilityUpdateOne) AddFirstSeenAt(i int64) *VulnerabilityUpdateOne {
	vuo.mutation.AddFirstSeenAt(i)
	return vuo
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (vuo *VulnerabilityUpdateOne) SetLastModifiedAt(i int64) *VulnerabilityUpdateOne {
	vuo.mutation.ResetLastModifiedAt()
	vuo.mutation.SetLastModifiedAt(i)
	return vuo
}

// AddLastModifiedAt adds i to the "last_modified_at" field.
func (vuo *VulnerabilityUpdateOne) AddLastModifiedAt(i int64) *VulnerabilityUpdateOne {
	vuo.mutation.AddLastModifiedAt(i)
	return vuo
}

// SetTitle sets the "title" field.
func (vuo *VulnerabilityUpdateOne) SetTitle(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableTitle(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetTitle(*s)
	}
	return vuo
}

// ClearTitle clears the value of the "title" field.
func (vuo *VulnerabilityUpdateOne) ClearTitle() *VulnerabilityUpdateOne {
	vuo.mutation.ClearTitle()
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VulnerabilityUpdateOne) SetDescription(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableDescription(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VulnerabilityUpdateOne) ClearDescription() *VulnerabilityUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetCweID sets the "cwe_id" field.
func (vuo *VulnerabilityUpdateOne) SetCweID(s []string) *VulnerabilityUpdateOne {
	vuo.mutation.SetCweID(s)
	return vuo
}

// ClearCweID clears the value of the "cwe_id" field.
func (vuo *VulnerabilityUpdateOne) ClearCweID() *VulnerabilityUpdateOne {
	vuo.mutation.ClearCweID()
	return vuo
}

// SetSeverity sets the "severity" field.
func (vuo *VulnerabilityUpdateOne) SetSeverity(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetSeverity(s)
	return vuo
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableSeverity(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetSeverity(*s)
	}
	return vuo
}

// ClearSeverity clears the value of the "severity" field.
func (vuo *VulnerabilityUpdateOne) ClearSeverity() *VulnerabilityUpdateOne {
	vuo.mutation.ClearSeverity()
	return vuo
}

// SetCvss sets the "cvss" field.
func (vuo *VulnerabilityUpdateOne) SetCvss(s []string) *VulnerabilityUpdateOne {
	vuo.mutation.SetCvss(s)
	return vuo
}

// ClearCvss clears the value of the "cvss" field.
func (vuo *VulnerabilityUpdateOne) ClearCvss() *VulnerabilityUpdateOne {
	vuo.mutation.ClearCvss()
	return vuo
}

// SetReferences sets the "references" field.
func (vuo *VulnerabilityUpdateOne) SetReferences(s []string) *VulnerabilityUpdateOne {
	vuo.mutation.SetReferences(s)
	return vuo
}

// ClearReferences clears the value of the "references" field.
func (vuo *VulnerabilityUpdateOne) ClearReferences() *VulnerabilityUpdateOne {
	vuo.mutation.ClearReferences()
	return vuo
}

// AddPackageIDs adds the "packages" edge to the PackageRecord entity by IDs.
func (vuo *VulnerabilityUpdateOne) AddPackageIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.AddPackageIDs(ids...)
	return vuo
}

// AddPackages adds the "packages" edges to the PackageRecord entity.
func (vuo *VulnerabilityUpdateOne) AddPackages(p ...*PackageRecord) *VulnerabilityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.AddPackageIDs(ids...)
}

// AddStatuIDs adds the "status" edge to the VulnStatus entity by IDs.
func (vuo *VulnerabilityUpdateOne) AddStatuIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.AddStatuIDs(ids...)
	return vuo
}

// AddStatus adds the "status" edges to the VulnStatus entity.
func (vuo *VulnerabilityUpdateOne) AddStatus(v ...*VulnStatus) *VulnerabilityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddStatuIDs(ids...)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vuo *VulnerabilityUpdateOne) Mutation() *VulnerabilityMutation {
	return vuo.mutation
}

// ClearPackages clears all "packages" edges to the PackageRecord entity.
func (vuo *VulnerabilityUpdateOne) ClearPackages() *VulnerabilityUpdateOne {
	vuo.mutation.ClearPackages()
	return vuo
}

// RemovePackageIDs removes the "packages" edge to PackageRecord entities by IDs.
func (vuo *VulnerabilityUpdateOne) RemovePackageIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.RemovePackageIDs(ids...)
	return vuo
}

// RemovePackages removes "packages" edges to PackageRecord entities.
func (vuo *VulnerabilityUpdateOne) RemovePackages(p ...*PackageRecord) *VulnerabilityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.RemovePackageIDs(ids...)
}

// ClearStatus clears all "status" edges to the VulnStatus entity.
func (vuo *VulnerabilityUpdateOne) ClearStatus() *VulnerabilityUpdateOne {
	vuo.mutation.ClearStatus()
	return vuo
}

// RemoveStatuIDs removes the "status" edge to VulnStatus entities by IDs.
func (vuo *VulnerabilityUpdateOne) RemoveStatuIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.RemoveStatuIDs(ids...)
	return vuo
}

// RemoveStatus removes "status" edges to VulnStatus entities.
func (vuo *VulnerabilityUpdateOne) RemoveStatus(v ...*VulnStatus) *VulnerabilityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveStatuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VulnerabilityUpdateOne) Select(field string, fields ...string) *VulnerabilityUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vulnerability entity.
func (vuo *VulnerabilityUpdateOne) Save(ctx context.Context) (*Vulnerability, error) {
	var (
		err  error
		node *Vulnerability
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) SaveX(ctx context.Context) *Vulnerability {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *Vulnerability, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerability.Table,
			Columns: vulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: vulnerability.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Vulnerability.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerability.FieldID)
		for _, f := range fields {
			if !vulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.FirstSeenAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldFirstSeenAt,
		})
	}
	if value, ok := vuo.mutation.AddedFirstSeenAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldFirstSeenAt,
		})
	}
	if value, ok := vuo.mutation.LastModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldLastModifiedAt,
		})
	}
	if value, ok := vuo.mutation.AddedLastModifiedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldLastModifiedAt,
		})
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldTitle,
		})
	}
	if vuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldTitle,
		})
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldDescription,
		})
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldDescription,
		})
	}
	if value, ok := vuo.mutation.CweID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldCweID,
		})
	}
	if vuo.mutation.CweIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vulnerability.FieldCweID,
		})
	}
	if value, ok := vuo.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldSeverity,
		})
	}
	if vuo.mutation.SeverityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldSeverity,
		})
	}
	if value, ok := vuo.mutation.Cvss(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldCvss,
		})
	}
	if vuo.mutation.CvssCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vulnerability.FieldCvss,
		})
	}
	if value, ok := vuo.mutation.References(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldReferences,
		})
	}
	if vuo.mutation.ReferencesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vulnerability.FieldReferences,
		})
	}
	if vuo.mutation.PackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.PackagesTable,
			Columns: vulnerability.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: packagerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedPackagesIDs(); len(nodes) > 0 && !vuo.mutation.PackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.PackagesTable,
			Columns: vulnerability.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: packagerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.PackagesTable,
			Columns: vulnerability.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: packagerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerability.StatusTable,
			Columns: []string{vulnerability.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedStatusIDs(); len(nodes) > 0 && !vuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerability.StatusTable,
			Columns: []string{vulnerability.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerability.StatusTable,
			Columns: []string{vulnerability.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vulnerability{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
