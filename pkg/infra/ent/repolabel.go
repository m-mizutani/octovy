// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/infra/ent/repolabel"
)

// RepoLabel is the model entity for the RepoLabel schema.
type RepoLabel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepoLabelQuery when eager-loading is set.
	Edges RepoLabelEdges `json:"edges"`
}

// RepoLabelEdges holds the relations/edges for other nodes in the graph.
type RepoLabelEdges struct {
	// Repos holds the value of the repos edge.
	Repos []*Repository `json:"repos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReposOrErr returns the Repos value or an error if the edge
// was not loaded in eager-loading.
func (e RepoLabelEdges) ReposOrErr() ([]*Repository, error) {
	if e.loadedTypes[0] {
		return e.Repos, nil
	}
	return nil, &NotLoadedError{edge: "repos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RepoLabel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case repolabel.FieldID:
			values[i] = new(sql.NullInt64)
		case repolabel.FieldName, repolabel.FieldDescription, repolabel.FieldColor:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RepoLabel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RepoLabel fields.
func (rl *RepoLabel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repolabel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rl.ID = int(value.Int64)
		case repolabel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rl.Name = value.String
			}
		case repolabel.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rl.Description = value.String
			}
		case repolabel.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				rl.Color = value.String
			}
		}
	}
	return nil
}

// QueryRepos queries the "repos" edge of the RepoLabel entity.
func (rl *RepoLabel) QueryRepos() *RepositoryQuery {
	return (&RepoLabelClient{config: rl.config}).QueryRepos(rl)
}

// Update returns a builder for updating this RepoLabel.
// Note that you need to call RepoLabel.Unwrap() before calling this method if this RepoLabel
// was returned from a transaction, and the transaction was committed or rolled back.
func (rl *RepoLabel) Update() *RepoLabelUpdateOne {
	return (&RepoLabelClient{config: rl.config}).UpdateOne(rl)
}

// Unwrap unwraps the RepoLabel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rl *RepoLabel) Unwrap() *RepoLabel {
	tx, ok := rl.config.driver.(*txDriver)
	if !ok {
		panic("ent: RepoLabel is not a transactional entity")
	}
	rl.config.driver = tx.drv
	return rl
}

// String implements the fmt.Stringer.
func (rl *RepoLabel) String() string {
	var builder strings.Builder
	builder.WriteString("RepoLabel(")
	builder.WriteString(fmt.Sprintf("id=%v", rl.ID))
	builder.WriteString(", name=")
	builder.WriteString(rl.Name)
	builder.WriteString(", description=")
	builder.WriteString(rl.Description)
	builder.WriteString(", color=")
	builder.WriteString(rl.Color)
	builder.WriteByte(')')
	return builder.String()
}

// RepoLabels is a parsable slice of RepoLabel.
type RepoLabels []*RepoLabel

func (rl RepoLabels) config(cfg config) {
	for _i := range rl {
		rl[_i].config = cfg
	}
}
