// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnstatus"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnstatusindex"
)

// VulnStatusIndexQuery is the builder for querying VulnStatusIndex entities.
type VulnStatusIndexQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.VulnStatusIndex
	// eager-loading edges.
	withLatest *VulnStatusQuery
	withStatus *VulnStatusQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VulnStatusIndexQuery builder.
func (vsiq *VulnStatusIndexQuery) Where(ps ...predicate.VulnStatusIndex) *VulnStatusIndexQuery {
	vsiq.predicates = append(vsiq.predicates, ps...)
	return vsiq
}

// Limit adds a limit step to the query.
func (vsiq *VulnStatusIndexQuery) Limit(limit int) *VulnStatusIndexQuery {
	vsiq.limit = &limit
	return vsiq
}

// Offset adds an offset step to the query.
func (vsiq *VulnStatusIndexQuery) Offset(offset int) *VulnStatusIndexQuery {
	vsiq.offset = &offset
	return vsiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vsiq *VulnStatusIndexQuery) Unique(unique bool) *VulnStatusIndexQuery {
	vsiq.unique = &unique
	return vsiq
}

// Order adds an order step to the query.
func (vsiq *VulnStatusIndexQuery) Order(o ...OrderFunc) *VulnStatusIndexQuery {
	vsiq.order = append(vsiq.order, o...)
	return vsiq
}

// QueryLatest chains the current query on the "latest" edge.
func (vsiq *VulnStatusIndexQuery) QueryLatest() *VulnStatusQuery {
	query := &VulnStatusQuery{config: vsiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vsiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnstatusindex.Table, vulnstatusindex.FieldID, selector),
			sqlgraph.To(vulnstatus.Table, vulnstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vulnstatusindex.LatestTable, vulnstatusindex.LatestColumn),
		)
		fromU = sqlgraph.SetNeighbors(vsiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatus chains the current query on the "status" edge.
func (vsiq *VulnStatusIndexQuery) QueryStatus() *VulnStatusQuery {
	query := &VulnStatusQuery{config: vsiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vsiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnstatusindex.Table, vulnstatusindex.FieldID, selector),
			sqlgraph.To(vulnstatus.Table, vulnstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vulnstatusindex.StatusTable, vulnstatusindex.StatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(vsiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VulnStatusIndex entity from the query.
// Returns a *NotFoundError when no VulnStatusIndex was found.
func (vsiq *VulnStatusIndexQuery) First(ctx context.Context) (*VulnStatusIndex, error) {
	nodes, err := vsiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vulnstatusindex.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vsiq *VulnStatusIndexQuery) FirstX(ctx context.Context) *VulnStatusIndex {
	node, err := vsiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VulnStatusIndex ID from the query.
// Returns a *NotFoundError when no VulnStatusIndex ID was found.
func (vsiq *VulnStatusIndexQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vsiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vulnstatusindex.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vsiq *VulnStatusIndexQuery) FirstIDX(ctx context.Context) string {
	id, err := vsiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VulnStatusIndex entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one VulnStatusIndex entity is not found.
// Returns a *NotFoundError when no VulnStatusIndex entities are found.
func (vsiq *VulnStatusIndexQuery) Only(ctx context.Context) (*VulnStatusIndex, error) {
	nodes, err := vsiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vulnstatusindex.Label}
	default:
		return nil, &NotSingularError{vulnstatusindex.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vsiq *VulnStatusIndexQuery) OnlyX(ctx context.Context) *VulnStatusIndex {
	node, err := vsiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VulnStatusIndex ID in the query.
// Returns a *NotSingularError when exactly one VulnStatusIndex ID is not found.
// Returns a *NotFoundError when no entities are found.
func (vsiq *VulnStatusIndexQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vsiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = &NotSingularError{vulnstatusindex.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vsiq *VulnStatusIndexQuery) OnlyIDX(ctx context.Context) string {
	id, err := vsiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VulnStatusIndexes.
func (vsiq *VulnStatusIndexQuery) All(ctx context.Context) ([]*VulnStatusIndex, error) {
	if err := vsiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return vsiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (vsiq *VulnStatusIndexQuery) AllX(ctx context.Context) []*VulnStatusIndex {
	nodes, err := vsiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VulnStatusIndex IDs.
func (vsiq *VulnStatusIndexQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := vsiq.Select(vulnstatusindex.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vsiq *VulnStatusIndexQuery) IDsX(ctx context.Context) []string {
	ids, err := vsiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vsiq *VulnStatusIndexQuery) Count(ctx context.Context) (int, error) {
	if err := vsiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return vsiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (vsiq *VulnStatusIndexQuery) CountX(ctx context.Context) int {
	count, err := vsiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vsiq *VulnStatusIndexQuery) Exist(ctx context.Context) (bool, error) {
	if err := vsiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return vsiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (vsiq *VulnStatusIndexQuery) ExistX(ctx context.Context) bool {
	exist, err := vsiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VulnStatusIndexQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vsiq *VulnStatusIndexQuery) Clone() *VulnStatusIndexQuery {
	if vsiq == nil {
		return nil
	}
	return &VulnStatusIndexQuery{
		config:     vsiq.config,
		limit:      vsiq.limit,
		offset:     vsiq.offset,
		order:      append([]OrderFunc{}, vsiq.order...),
		predicates: append([]predicate.VulnStatusIndex{}, vsiq.predicates...),
		withLatest: vsiq.withLatest.Clone(),
		withStatus: vsiq.withStatus.Clone(),
		// clone intermediate query.
		sql:  vsiq.sql.Clone(),
		path: vsiq.path,
	}
}

// WithLatest tells the query-builder to eager-load the nodes that are connected to
// the "latest" edge. The optional arguments are used to configure the query builder of the edge.
func (vsiq *VulnStatusIndexQuery) WithLatest(opts ...func(*VulnStatusQuery)) *VulnStatusIndexQuery {
	query := &VulnStatusQuery{config: vsiq.config}
	for _, opt := range opts {
		opt(query)
	}
	vsiq.withLatest = query
	return vsiq
}

// WithStatus tells the query-builder to eager-load the nodes that are connected to
// the "status" edge. The optional arguments are used to configure the query builder of the edge.
func (vsiq *VulnStatusIndexQuery) WithStatus(opts ...func(*VulnStatusQuery)) *VulnStatusIndexQuery {
	query := &VulnStatusQuery{config: vsiq.config}
	for _, opt := range opts {
		opt(query)
	}
	vsiq.withStatus = query
	return vsiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (vsiq *VulnStatusIndexQuery) GroupBy(field string, fields ...string) *VulnStatusIndexGroupBy {
	group := &VulnStatusIndexGroupBy{config: vsiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := vsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return vsiq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (vsiq *VulnStatusIndexQuery) Select(fields ...string) *VulnStatusIndexSelect {
	vsiq.fields = append(vsiq.fields, fields...)
	return &VulnStatusIndexSelect{VulnStatusIndexQuery: vsiq}
}

func (vsiq *VulnStatusIndexQuery) prepareQuery(ctx context.Context) error {
	for _, f := range vsiq.fields {
		if !vulnstatusindex.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vsiq.path != nil {
		prev, err := vsiq.path(ctx)
		if err != nil {
			return err
		}
		vsiq.sql = prev
	}
	return nil
}

func (vsiq *VulnStatusIndexQuery) sqlAll(ctx context.Context) ([]*VulnStatusIndex, error) {
	var (
		nodes       = []*VulnStatusIndex{}
		withFKs     = vsiq.withFKs
		_spec       = vsiq.querySpec()
		loadedTypes = [2]bool{
			vsiq.withLatest != nil,
			vsiq.withStatus != nil,
		}
	)
	if vsiq.withLatest != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, vulnstatusindex.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &VulnStatusIndex{config: vsiq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, vsiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := vsiq.withLatest; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*VulnStatusIndex)
		for i := range nodes {
			if nodes[i].vuln_status_index_latest == nil {
				continue
			}
			fk := *nodes[i].vuln_status_index_latest
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(vulnstatus.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "vuln_status_index_latest" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Latest = n
			}
		}
	}

	if query := vsiq.withStatus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*VulnStatusIndex)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Status = []*VulnStatus{}
		}
		query.withFKs = true
		query.Where(predicate.VulnStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(vulnstatusindex.StatusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.vuln_status_index_status
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "vuln_status_index_status" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "vuln_status_index_status" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Status = append(node.Edges.Status, n)
		}
	}

	return nodes, nil
}

func (vsiq *VulnStatusIndexQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vsiq.querySpec()
	return sqlgraph.CountNodes(ctx, vsiq.driver, _spec)
}

func (vsiq *VulnStatusIndexQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := vsiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (vsiq *VulnStatusIndexQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnstatusindex.Table,
			Columns: vulnstatusindex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: vulnstatusindex.FieldID,
			},
		},
		From:   vsiq.sql,
		Unique: true,
	}
	if unique := vsiq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := vsiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnstatusindex.FieldID)
		for i := range fields {
			if fields[i] != vulnstatusindex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vsiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vsiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vsiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vsiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vsiq *VulnStatusIndexQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vsiq.driver.Dialect())
	t1 := builder.Table(vulnstatusindex.Table)
	columns := vsiq.fields
	if len(columns) == 0 {
		columns = vulnstatusindex.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vsiq.sql != nil {
		selector = vsiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range vsiq.predicates {
		p(selector)
	}
	for _, p := range vsiq.order {
		p(selector)
	}
	if offset := vsiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vsiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VulnStatusIndexGroupBy is the group-by builder for VulnStatusIndex entities.
type VulnStatusIndexGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vsigb *VulnStatusIndexGroupBy) Aggregate(fns ...AggregateFunc) *VulnStatusIndexGroupBy {
	vsigb.fns = append(vsigb.fns, fns...)
	return vsigb
}

// Scan applies the group-by query and scans the result into the given value.
func (vsigb *VulnStatusIndexGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := vsigb.path(ctx)
	if err != nil {
		return err
	}
	vsigb.sql = query
	return vsigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := vsigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (vsigb *VulnStatusIndexGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(vsigb.fields) > 1 {
		return nil, errors.New("ent: VulnStatusIndexGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := vsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) StringsX(ctx context.Context) []string {
	v, err := vsigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vsigb *VulnStatusIndexGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = vsigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = fmt.Errorf("ent: VulnStatusIndexGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) StringX(ctx context.Context) string {
	v, err := vsigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (vsigb *VulnStatusIndexGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(vsigb.fields) > 1 {
		return nil, errors.New("ent: VulnStatusIndexGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := vsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) IntsX(ctx context.Context) []int {
	v, err := vsigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vsigb *VulnStatusIndexGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = vsigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = fmt.Errorf("ent: VulnStatusIndexGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) IntX(ctx context.Context) int {
	v, err := vsigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (vsigb *VulnStatusIndexGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(vsigb.fields) > 1 {
		return nil, errors.New("ent: VulnStatusIndexGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := vsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := vsigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vsigb *VulnStatusIndexGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = vsigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = fmt.Errorf("ent: VulnStatusIndexGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) Float64X(ctx context.Context) float64 {
	v, err := vsigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (vsigb *VulnStatusIndexGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(vsigb.fields) > 1 {
		return nil, errors.New("ent: VulnStatusIndexGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := vsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := vsigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vsigb *VulnStatusIndexGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = vsigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = fmt.Errorf("ent: VulnStatusIndexGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (vsigb *VulnStatusIndexGroupBy) BoolX(ctx context.Context) bool {
	v, err := vsigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vsigb *VulnStatusIndexGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range vsigb.fields {
		if !vulnstatusindex.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := vsigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vsigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (vsigb *VulnStatusIndexGroupBy) sqlQuery() *sql.Selector {
	selector := vsigb.sql.Select()
	aggregation := make([]string, 0, len(vsigb.fns))
	for _, fn := range vsigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(vsigb.fields)+len(vsigb.fns))
		for _, f := range vsigb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(vsigb.fields...)...)
}

// VulnStatusIndexSelect is the builder for selecting fields of VulnStatusIndex entities.
type VulnStatusIndexSelect struct {
	*VulnStatusIndexQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (vsis *VulnStatusIndexSelect) Scan(ctx context.Context, v interface{}) error {
	if err := vsis.prepareQuery(ctx); err != nil {
		return err
	}
	vsis.sql = vsis.VulnStatusIndexQuery.sqlQuery(ctx)
	return vsis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) ScanX(ctx context.Context, v interface{}) {
	if err := vsis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (vsis *VulnStatusIndexSelect) Strings(ctx context.Context) ([]string, error) {
	if len(vsis.fields) > 1 {
		return nil, errors.New("ent: VulnStatusIndexSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := vsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) StringsX(ctx context.Context) []string {
	v, err := vsis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (vsis *VulnStatusIndexSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = vsis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = fmt.Errorf("ent: VulnStatusIndexSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) StringX(ctx context.Context) string {
	v, err := vsis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (vsis *VulnStatusIndexSelect) Ints(ctx context.Context) ([]int, error) {
	if len(vsis.fields) > 1 {
		return nil, errors.New("ent: VulnStatusIndexSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := vsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) IntsX(ctx context.Context) []int {
	v, err := vsis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (vsis *VulnStatusIndexSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = vsis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = fmt.Errorf("ent: VulnStatusIndexSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) IntX(ctx context.Context) int {
	v, err := vsis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (vsis *VulnStatusIndexSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(vsis.fields) > 1 {
		return nil, errors.New("ent: VulnStatusIndexSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := vsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) Float64sX(ctx context.Context) []float64 {
	v, err := vsis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (vsis *VulnStatusIndexSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = vsis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = fmt.Errorf("ent: VulnStatusIndexSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) Float64X(ctx context.Context) float64 {
	v, err := vsis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (vsis *VulnStatusIndexSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(vsis.fields) > 1 {
		return nil, errors.New("ent: VulnStatusIndexSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := vsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) BoolsX(ctx context.Context) []bool {
	v, err := vsis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (vsis *VulnStatusIndexSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = vsis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnstatusindex.Label}
	default:
		err = fmt.Errorf("ent: VulnStatusIndexSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (vsis *VulnStatusIndexSelect) BoolX(ctx context.Context) bool {
	v, err := vsis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vsis *VulnStatusIndexSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := vsis.sql.Query()
	if err := vsis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
