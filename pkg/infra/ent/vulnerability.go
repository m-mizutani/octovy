// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnerability"
)

// Vulnerability is the model entity for the Vulnerability schema.
type Vulnerability struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// FirstSeenAt holds the value of the "first_seen_at" field.
	FirstSeenAt int64 `json:"first_seen_at,omitempty"`
	// LastModifiedAt holds the value of the "last_modified_at" field.
	LastModifiedAt int64 `json:"last_modified_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CweID holds the value of the "cwe_id" field.
	CweID []string `json:"cwe_id,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity string `json:"severity,omitempty"`
	// Cvss holds the value of the "cvss" field.
	Cvss []string `json:"cvss,omitempty"`
	// References holds the value of the "references" field.
	References []string `json:"references,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityQuery when eager-loading is set.
	Edges VulnerabilityEdges `json:"edges"`
}

// VulnerabilityEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityEdges struct {
	// Packages holds the value of the packages edge.
	Packages []*PackageRecord `json:"packages,omitempty"`
	// Status holds the value of the status edge.
	Status []*VulnStatus `json:"status,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PackagesOrErr returns the Packages value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityEdges) PackagesOrErr() ([]*PackageRecord, error) {
	if e.loadedTypes[0] {
		return e.Packages, nil
	}
	return nil, &NotLoadedError{edge: "packages"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityEdges) StatusOrErr() ([]*VulnStatus, error) {
	if e.loadedTypes[1] {
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "status"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vulnerability) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldCweID, vulnerability.FieldCvss, vulnerability.FieldReferences:
			values[i] = new([]byte)
		case vulnerability.FieldFirstSeenAt, vulnerability.FieldLastModifiedAt:
			values[i] = new(sql.NullInt64)
		case vulnerability.FieldID, vulnerability.FieldTitle, vulnerability.FieldDescription, vulnerability.FieldSeverity:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vulnerability", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vulnerability fields.
func (v *Vulnerability) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				v.ID = value.String
			}
		case vulnerability.FieldFirstSeenAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field first_seen_at", values[i])
			} else if value.Valid {
				v.FirstSeenAt = value.Int64
			}
		case vulnerability.FieldLastModifiedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_at", values[i])
			} else if value.Valid {
				v.LastModifiedAt = value.Int64
			}
		case vulnerability.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				v.Title = value.String
			}
		case vulnerability.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case vulnerability.FieldCweID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cwe_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.CweID); err != nil {
					return fmt.Errorf("unmarshal field cwe_id: %w", err)
				}
			}
		case vulnerability.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				v.Severity = value.String
			}
		case vulnerability.FieldCvss:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cvss", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Cvss); err != nil {
					return fmt.Errorf("unmarshal field cvss: %w", err)
				}
			}
		case vulnerability.FieldReferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field references", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.References); err != nil {
					return fmt.Errorf("unmarshal field references: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryPackages queries the "packages" edge of the Vulnerability entity.
func (v *Vulnerability) QueryPackages() *PackageRecordQuery {
	return (&VulnerabilityClient{config: v.config}).QueryPackages(v)
}

// QueryStatus queries the "status" edge of the Vulnerability entity.
func (v *Vulnerability) QueryStatus() *VulnStatusQuery {
	return (&VulnerabilityClient{config: v.config}).QueryStatus(v)
}

// Update returns a builder for updating this Vulnerability.
// Note that you need to call Vulnerability.Unwrap() before calling this method if this Vulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vulnerability) Update() *VulnerabilityUpdateOne {
	return (&VulnerabilityClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vulnerability) Unwrap() *Vulnerability {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vulnerability is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("Vulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", first_seen_at=")
	builder.WriteString(fmt.Sprintf("%v", v.FirstSeenAt))
	builder.WriteString(", last_modified_at=")
	builder.WriteString(fmt.Sprintf("%v", v.LastModifiedAt))
	builder.WriteString(", title=")
	builder.WriteString(v.Title)
	builder.WriteString(", description=")
	builder.WriteString(v.Description)
	builder.WriteString(", cwe_id=")
	builder.WriteString(fmt.Sprintf("%v", v.CweID))
	builder.WriteString(", severity=")
	builder.WriteString(v.Severity)
	builder.WriteString(", cvss=")
	builder.WriteString(fmt.Sprintf("%v", v.Cvss))
	builder.WriteString(", references=")
	builder.WriteString(fmt.Sprintf("%v", v.References))
	builder.WriteByte(')')
	return builder.String()
}

// Vulnerabilities is a parsable slice of Vulnerability.
type Vulnerabilities []*Vulnerability

func (v Vulnerabilities) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
