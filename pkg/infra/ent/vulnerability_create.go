// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/packagerecord"
	"github.com/m-mizutani/octovy/pkg/infra/ent/severity"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnerability"
)

// VulnerabilityCreate is the builder for creating a Vulnerability entity.
type VulnerabilityCreate struct {
	config
	mutation *VulnerabilityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFirstSeenAt sets the "first_seen_at" field.
func (vc *VulnerabilityCreate) SetFirstSeenAt(i int64) *VulnerabilityCreate {
	vc.mutation.SetFirstSeenAt(i)
	return vc
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (vc *VulnerabilityCreate) SetLastModifiedAt(i int64) *VulnerabilityCreate {
	vc.mutation.SetLastModifiedAt(i)
	return vc
}

// SetTitle sets the "title" field.
func (vc *VulnerabilityCreate) SetTitle(s string) *VulnerabilityCreate {
	vc.mutation.SetTitle(s)
	return vc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableTitle(s *string) *VulnerabilityCreate {
	if s != nil {
		vc.SetTitle(*s)
	}
	return vc
}

// SetDescription sets the "description" field.
func (vc *VulnerabilityCreate) SetDescription(s string) *VulnerabilityCreate {
	vc.mutation.SetDescription(s)
	return vc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableDescription(s *string) *VulnerabilityCreate {
	if s != nil {
		vc.SetDescription(*s)
	}
	return vc
}

// SetCweID sets the "cwe_id" field.
func (vc *VulnerabilityCreate) SetCweID(s []string) *VulnerabilityCreate {
	vc.mutation.SetCweID(s)
	return vc
}

// SetSeverity sets the "severity" field.
func (vc *VulnerabilityCreate) SetSeverity(s string) *VulnerabilityCreate {
	vc.mutation.SetSeverity(s)
	return vc
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableSeverity(s *string) *VulnerabilityCreate {
	if s != nil {
		vc.SetSeverity(*s)
	}
	return vc
}

// SetCvss sets the "cvss" field.
func (vc *VulnerabilityCreate) SetCvss(s []string) *VulnerabilityCreate {
	vc.mutation.SetCvss(s)
	return vc
}

// SetReferences sets the "references" field.
func (vc *VulnerabilityCreate) SetReferences(s []string) *VulnerabilityCreate {
	vc.mutation.SetReferences(s)
	return vc
}

// SetID sets the "id" field.
func (vc *VulnerabilityCreate) SetID(s string) *VulnerabilityCreate {
	vc.mutation.SetID(s)
	return vc
}

// AddPackageIDs adds the "packages" edge to the PackageRecord entity by IDs.
func (vc *VulnerabilityCreate) AddPackageIDs(ids ...int) *VulnerabilityCreate {
	vc.mutation.AddPackageIDs(ids...)
	return vc
}

// AddPackages adds the "packages" edges to the PackageRecord entity.
func (vc *VulnerabilityCreate) AddPackages(p ...*PackageRecord) *VulnerabilityCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vc.AddPackageIDs(ids...)
}

// SetCustomSeverityID sets the "custom_severity" edge to the Severity entity by ID.
func (vc *VulnerabilityCreate) SetCustomSeverityID(id int) *VulnerabilityCreate {
	vc.mutation.SetCustomSeverityID(id)
	return vc
}

// SetNillableCustomSeverityID sets the "custom_severity" edge to the Severity entity by ID if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableCustomSeverityID(id *int) *VulnerabilityCreate {
	if id != nil {
		vc = vc.SetCustomSeverityID(*id)
	}
	return vc
}

// SetCustomSeverity sets the "custom_severity" edge to the Severity entity.
func (vc *VulnerabilityCreate) SetCustomSeverity(s *Severity) *VulnerabilityCreate {
	return vc.SetCustomSeverityID(s.ID)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vc *VulnerabilityCreate) Mutation() *VulnerabilityMutation {
	return vc.mutation
}

// Save creates the Vulnerability in the database.
func (vc *VulnerabilityCreate) Save(ctx context.Context) (*Vulnerability, error) {
	var (
		err  error
		node *Vulnerability
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VulnerabilityCreate) SaveX(ctx context.Context) *Vulnerability {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VulnerabilityCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VulnerabilityCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VulnerabilityCreate) check() error {
	if _, ok := vc.mutation.FirstSeenAt(); !ok {
		return &ValidationError{Name: "first_seen_at", err: errors.New(`ent: missing required field "first_seen_at"`)}
	}
	if _, ok := vc.mutation.LastModifiedAt(); !ok {
		return &ValidationError{Name: "last_modified_at", err: errors.New(`ent: missing required field "last_modified_at"`)}
	}
	if v, ok := vc.mutation.ID(); ok {
		if err := vulnerability.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "id": %w`, err)}
		}
	}
	return nil
}

func (vc *VulnerabilityCreate) sqlSave(ctx context.Context) (*Vulnerability, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

func (vc *VulnerabilityCreate) createSpec() (*Vulnerability, *sqlgraph.CreateSpec) {
	var (
		_node = &Vulnerability{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vulnerability.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: vulnerability.FieldID,
			},
		}
	)
	_spec.OnConflict = vc.conflict
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.FirstSeenAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldFirstSeenAt,
		})
		_node.FirstSeenAt = value
	}
	if value, ok := vc.mutation.LastModifiedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnerability.FieldLastModifiedAt,
		})
		_node.LastModifiedAt = value
	}
	if value, ok := vc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := vc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := vc.mutation.CweID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldCweID,
		})
		_node.CweID = value
	}
	if value, ok := vc.mutation.Severity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldSeverity,
		})
		_node.Severity = value
	}
	if value, ok := vc.mutation.Cvss(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldCvss,
		})
		_node.Cvss = value
	}
	if value, ok := vc.mutation.References(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldReferences,
		})
		_node.References = value
	}
	if nodes := vc.mutation.PackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.PackagesTable,
			Columns: vulnerability.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: packagerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.CustomSeverityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.CustomSeverityTable,
			Columns: []string{vulnerability.CustomSeverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vulnerability_custom_severity = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vulnerability.Create().
//		SetFirstSeenAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityUpsert) {
//			SetFirstSeenAt(v+v).
//		}).
//		Exec(ctx)
//
func (vc *VulnerabilityCreate) OnConflict(opts ...sql.ConflictOption) *VulnerabilityUpsertOne {
	vc.conflict = opts
	return &VulnerabilityUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.Vulnerability.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (vc *VulnerabilityCreate) OnConflictColumns(columns ...string) *VulnerabilityUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityUpsertOne{
		create: vc,
	}
}

type (
	// VulnerabilityUpsertOne is the builder for "upsert"-ing
	//  one Vulnerability node.
	VulnerabilityUpsertOne struct {
		create *VulnerabilityCreate
	}

	// VulnerabilityUpsert is the "OnConflict" setter.
	VulnerabilityUpsert struct {
		*sql.UpdateSet
	}
)

// SetFirstSeenAt sets the "first_seen_at" field.
func (u *VulnerabilityUpsert) SetFirstSeenAt(v int64) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldFirstSeenAt, v)
	return u
}

// UpdateFirstSeenAt sets the "first_seen_at" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateFirstSeenAt() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldFirstSeenAt)
	return u
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *VulnerabilityUpsert) SetLastModifiedAt(v int64) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldLastModifiedAt, v)
	return u
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateLastModifiedAt() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldLastModifiedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *VulnerabilityUpsert) SetTitle(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateTitle() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *VulnerabilityUpsert) ClearTitle() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *VulnerabilityUpsert) SetDescription(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateDescription() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *VulnerabilityUpsert) ClearDescription() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldDescription)
	return u
}

// SetCweID sets the "cwe_id" field.
func (u *VulnerabilityUpsert) SetCweID(v []string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldCweID, v)
	return u
}

// UpdateCweID sets the "cwe_id" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateCweID() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldCweID)
	return u
}

// ClearCweID clears the value of the "cwe_id" field.
func (u *VulnerabilityUpsert) ClearCweID() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldCweID)
	return u
}

// SetSeverity sets the "severity" field.
func (u *VulnerabilityUpsert) SetSeverity(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldSeverity, v)
	return u
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateSeverity() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldSeverity)
	return u
}

// ClearSeverity clears the value of the "severity" field.
func (u *VulnerabilityUpsert) ClearSeverity() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldSeverity)
	return u
}

// SetCvss sets the "cvss" field.
func (u *VulnerabilityUpsert) SetCvss(v []string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldCvss, v)
	return u
}

// UpdateCvss sets the "cvss" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateCvss() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldCvss)
	return u
}

// ClearCvss clears the value of the "cvss" field.
func (u *VulnerabilityUpsert) ClearCvss() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldCvss)
	return u
}

// SetReferences sets the "references" field.
func (u *VulnerabilityUpsert) SetReferences(v []string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldReferences, v)
	return u
}

// UpdateReferences sets the "references" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateReferences() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldReferences)
	return u
}

// ClearReferences clears the value of the "references" field.
func (u *VulnerabilityUpsert) ClearReferences() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldReferences)
	return u
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.Vulnerability.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *VulnerabilityUpsertOne) UpdateNewValues() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Vulnerability.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *VulnerabilityUpsertOne) Ignore() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityUpsertOne) DoNothing() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityCreate.OnConflict
// documentation for more info.
func (u *VulnerabilityUpsertOne) Update(set func(*VulnerabilityUpsert)) *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstSeenAt sets the "first_seen_at" field.
func (u *VulnerabilityUpsertOne) SetFirstSeenAt(v int64) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetFirstSeenAt(v)
	})
}

// UpdateFirstSeenAt sets the "first_seen_at" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateFirstSeenAt() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateFirstSeenAt()
	})
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *VulnerabilityUpsertOne) SetLastModifiedAt(v int64) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateLastModifiedAt() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetTitle sets the "title" field.
func (u *VulnerabilityUpsertOne) SetTitle(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateTitle() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *VulnerabilityUpsertOne) ClearTitle() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *VulnerabilityUpsertOne) SetDescription(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateDescription() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VulnerabilityUpsertOne) ClearDescription() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearDescription()
	})
}

// SetCweID sets the "cwe_id" field.
func (u *VulnerabilityUpsertOne) SetCweID(v []string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCweID(v)
	})
}

// UpdateCweID sets the "cwe_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateCweID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCweID()
	})
}

// ClearCweID clears the value of the "cwe_id" field.
func (u *VulnerabilityUpsertOne) ClearCweID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearCweID()
	})
}

// SetSeverity sets the "severity" field.
func (u *VulnerabilityUpsertOne) SetSeverity(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetSeverity(v)
	})
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateSeverity() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateSeverity()
	})
}

// ClearSeverity clears the value of the "severity" field.
func (u *VulnerabilityUpsertOne) ClearSeverity() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearSeverity()
	})
}

// SetCvss sets the "cvss" field.
func (u *VulnerabilityUpsertOne) SetCvss(v []string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCvss(v)
	})
}

// UpdateCvss sets the "cvss" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateCvss() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCvss()
	})
}

// ClearCvss clears the value of the "cvss" field.
func (u *VulnerabilityUpsertOne) ClearCvss() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearCvss()
	})
}

// SetReferences sets the "references" field.
func (u *VulnerabilityUpsertOne) SetReferences(v []string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetReferences(v)
	})
}

// UpdateReferences sets the "references" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateReferences() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateReferences()
	})
}

// ClearReferences clears the value of the "references" field.
func (u *VulnerabilityUpsertOne) ClearReferences() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearReferences()
	})
}

// Exec executes the query.
func (u *VulnerabilityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VulnerabilityUpsertOne) ID(ctx context.Context) (id string, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VulnerabilityUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VulnerabilityCreateBulk is the builder for creating many Vulnerability entities in bulk.
type VulnerabilityCreateBulk struct {
	config
	builders []*VulnerabilityCreate
	conflict []sql.ConflictOption
}

// Save creates the Vulnerability entities in the database.
func (vcb *VulnerabilityCreateBulk) Save(ctx context.Context) ([]*Vulnerability, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vulnerability, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) SaveX(ctx context.Context) []*Vulnerability {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VulnerabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vulnerability.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityUpsert) {
//			SetFirstSeenAt(v+v).
//		}).
//		Exec(ctx)
//
func (vcb *VulnerabilityCreateBulk) OnConflict(opts ...sql.ConflictOption) *VulnerabilityUpsertBulk {
	vcb.conflict = opts
	return &VulnerabilityUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.Vulnerability.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (vcb *VulnerabilityCreateBulk) OnConflictColumns(columns ...string) *VulnerabilityUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityUpsertBulk{
		create: vcb,
	}
}

// VulnerabilityUpsertBulk is the builder for "upsert"-ing
// a bulk of Vulnerability nodes.
type VulnerabilityUpsertBulk struct {
	create *VulnerabilityCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.Vulnerability.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *VulnerabilityUpsertBulk) UpdateNewValues() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Vulnerability.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *VulnerabilityUpsertBulk) Ignore() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityUpsertBulk) DoNothing() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityCreateBulk.OnConflict
// documentation for more info.
func (u *VulnerabilityUpsertBulk) Update(set func(*VulnerabilityUpsert)) *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstSeenAt sets the "first_seen_at" field.
func (u *VulnerabilityUpsertBulk) SetFirstSeenAt(v int64) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetFirstSeenAt(v)
	})
}

// UpdateFirstSeenAt sets the "first_seen_at" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateFirstSeenAt() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateFirstSeenAt()
	})
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (u *VulnerabilityUpsertBulk) SetLastModifiedAt(v int64) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetLastModifiedAt(v)
	})
}

// UpdateLastModifiedAt sets the "last_modified_at" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateLastModifiedAt() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateLastModifiedAt()
	})
}

// SetTitle sets the "title" field.
func (u *VulnerabilityUpsertBulk) SetTitle(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateTitle() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *VulnerabilityUpsertBulk) ClearTitle() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *VulnerabilityUpsertBulk) SetDescription(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateDescription() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VulnerabilityUpsertBulk) ClearDescription() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearDescription()
	})
}

// SetCweID sets the "cwe_id" field.
func (u *VulnerabilityUpsertBulk) SetCweID(v []string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCweID(v)
	})
}

// UpdateCweID sets the "cwe_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateCweID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCweID()
	})
}

// ClearCweID clears the value of the "cwe_id" field.
func (u *VulnerabilityUpsertBulk) ClearCweID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearCweID()
	})
}

// SetSeverity sets the "severity" field.
func (u *VulnerabilityUpsertBulk) SetSeverity(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetSeverity(v)
	})
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateSeverity() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateSeverity()
	})
}

// ClearSeverity clears the value of the "severity" field.
func (u *VulnerabilityUpsertBulk) ClearSeverity() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearSeverity()
	})
}

// SetCvss sets the "cvss" field.
func (u *VulnerabilityUpsertBulk) SetCvss(v []string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCvss(v)
	})
}

// UpdateCvss sets the "cvss" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateCvss() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCvss()
	})
}

// ClearCvss clears the value of the "cvss" field.
func (u *VulnerabilityUpsertBulk) ClearCvss() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearCvss()
	})
}

// SetReferences sets the "references" field.
func (u *VulnerabilityUpsertBulk) SetReferences(v []string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetReferences(v)
	})
}

// UpdateReferences sets the "references" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateReferences() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateReferences()
	})
}

// ClearReferences clears the value of the "references" field.
func (u *VulnerabilityUpsertBulk) ClearReferences() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearReferences()
	})
}

// Exec executes the query.
func (u *VulnerabilityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VulnerabilityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
