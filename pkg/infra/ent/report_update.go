// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/object"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
	"github.com/m-mizutani/octovy/pkg/infra/ent/report"
	"github.com/m-mizutani/octovy/pkg/infra/ent/repository"
)

// ReportUpdate is the builder for updating Report entities.
type ReportUpdate struct {
	config
	hooks    []Hook
	mutation *ReportMutation
}

// Where appends a list predicates to the ReportUpdate builder.
func (ru *ReportUpdate) Where(ps ...predicate.Report) *ReportUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetResourceType sets the "resource_type" field.
func (ru *ReportUpdate) SetResourceType(s string) *ReportUpdate {
	ru.mutation.SetResourceType(s)
	return ru
}

// SetResourceName sets the "resource_name" field.
func (ru *ReportUpdate) SetResourceName(s string) *ReportUpdate {
	ru.mutation.SetResourceName(s)
	return ru
}

// SetScannedAt sets the "scanned_at" field.
func (ru *ReportUpdate) SetScannedAt(i int64) *ReportUpdate {
	ru.mutation.ResetScannedAt()
	ru.mutation.SetScannedAt(i)
	return ru
}

// AddScannedAt adds i to the "scanned_at" field.
func (ru *ReportUpdate) AddScannedAt(i int64) *ReportUpdate {
	ru.mutation.AddScannedAt(i)
	return ru
}

// SetRequestedAt sets the "requested_at" field.
func (ru *ReportUpdate) SetRequestedAt(i int64) *ReportUpdate {
	ru.mutation.ResetRequestedAt()
	ru.mutation.SetRequestedAt(i)
	return ru
}

// SetNillableRequestedAt sets the "requested_at" field if the given value is not nil.
func (ru *ReportUpdate) SetNillableRequestedAt(i *int64) *ReportUpdate {
	if i != nil {
		ru.SetRequestedAt(*i)
	}
	return ru
}

// AddRequestedAt adds i to the "requested_at" field.
func (ru *ReportUpdate) AddRequestedAt(i int64) *ReportUpdate {
	ru.mutation.AddRequestedAt(i)
	return ru
}

// ClearRequestedAt clears the value of the "requested_at" field.
func (ru *ReportUpdate) ClearRequestedAt() *ReportUpdate {
	ru.mutation.ClearRequestedAt()
	return ru
}

// AddObjectIDs adds the "objects" edge to the Object entity by IDs.
func (ru *ReportUpdate) AddObjectIDs(ids ...int) *ReportUpdate {
	ru.mutation.AddObjectIDs(ids...)
	return ru
}

// AddObjects adds the "objects" edges to the Object entity.
func (ru *ReportUpdate) AddObjects(o ...*Object) *ReportUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ru.AddObjectIDs(ids...)
}

// AddRepositoryIDs adds the "repository" edge to the Repository entity by IDs.
func (ru *ReportUpdate) AddRepositoryIDs(ids ...int) *ReportUpdate {
	ru.mutation.AddRepositoryIDs(ids...)
	return ru
}

// AddRepository adds the "repository" edges to the Repository entity.
func (ru *ReportUpdate) AddRepository(r ...*Repository) *ReportUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRepositoryIDs(ids...)
}

// Mutation returns the ReportMutation object of the builder.
func (ru *ReportUpdate) Mutation() *ReportMutation {
	return ru.mutation
}

// ClearObjects clears all "objects" edges to the Object entity.
func (ru *ReportUpdate) ClearObjects() *ReportUpdate {
	ru.mutation.ClearObjects()
	return ru
}

// RemoveObjectIDs removes the "objects" edge to Object entities by IDs.
func (ru *ReportUpdate) RemoveObjectIDs(ids ...int) *ReportUpdate {
	ru.mutation.RemoveObjectIDs(ids...)
	return ru
}

// RemoveObjects removes "objects" edges to Object entities.
func (ru *ReportUpdate) RemoveObjects(o ...*Object) *ReportUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ru.RemoveObjectIDs(ids...)
}

// ClearRepository clears all "repository" edges to the Repository entity.
func (ru *ReportUpdate) ClearRepository() *ReportUpdate {
	ru.mutation.ClearRepository()
	return ru
}

// RemoveRepositoryIDs removes the "repository" edge to Repository entities by IDs.
func (ru *ReportUpdate) RemoveRepositoryIDs(ids ...int) *ReportUpdate {
	ru.mutation.RemoveRepositoryIDs(ids...)
	return ru
}

// RemoveRepository removes "repository" edges to Repository entities.
func (ru *ReportUpdate) RemoveRepository(r ...*Repository) *ReportUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRepositoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReportUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReportUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReportUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReportUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   report.Table,
			Columns: report.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: report.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ResourceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: report.FieldResourceType,
		})
	}
	if value, ok := ru.mutation.ResourceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: report.FieldResourceName,
		})
	}
	if value, ok := ru.mutation.ScannedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: report.FieldScannedAt,
		})
	}
	if value, ok := ru.mutation.AddedScannedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: report.FieldScannedAt,
		})
	}
	if value, ok := ru.mutation.RequestedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: report.FieldRequestedAt,
		})
	}
	if value, ok := ru.mutation.AddedRequestedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: report.FieldRequestedAt,
		})
	}
	if ru.mutation.RequestedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: report.FieldRequestedAt,
		})
	}
	if ru.mutation.ObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   report.ObjectsTable,
			Columns: report.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: object.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedObjectsIDs(); len(nodes) > 0 && !ru.mutation.ObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   report.ObjectsTable,
			Columns: report.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   report.ObjectsTable,
			Columns: report.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   report.RepositoryTable,
			Columns: report.RepositoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRepositoryIDs(); len(nodes) > 0 && !ru.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   report.RepositoryTable,
			Columns: report.RepositoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   report.RepositoryTable,
			Columns: report.RepositoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{report.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReportUpdateOne is the builder for updating a single Report entity.
type ReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportMutation
}

// SetResourceType sets the "resource_type" field.
func (ruo *ReportUpdateOne) SetResourceType(s string) *ReportUpdateOne {
	ruo.mutation.SetResourceType(s)
	return ruo
}

// SetResourceName sets the "resource_name" field.
func (ruo *ReportUpdateOne) SetResourceName(s string) *ReportUpdateOne {
	ruo.mutation.SetResourceName(s)
	return ruo
}

// SetScannedAt sets the "scanned_at" field.
func (ruo *ReportUpdateOne) SetScannedAt(i int64) *ReportUpdateOne {
	ruo.mutation.ResetScannedAt()
	ruo.mutation.SetScannedAt(i)
	return ruo
}

// AddScannedAt adds i to the "scanned_at" field.
func (ruo *ReportUpdateOne) AddScannedAt(i int64) *ReportUpdateOne {
	ruo.mutation.AddScannedAt(i)
	return ruo
}

// SetRequestedAt sets the "requested_at" field.
func (ruo *ReportUpdateOne) SetRequestedAt(i int64) *ReportUpdateOne {
	ruo.mutation.ResetRequestedAt()
	ruo.mutation.SetRequestedAt(i)
	return ruo
}

// SetNillableRequestedAt sets the "requested_at" field if the given value is not nil.
func (ruo *ReportUpdateOne) SetNillableRequestedAt(i *int64) *ReportUpdateOne {
	if i != nil {
		ruo.SetRequestedAt(*i)
	}
	return ruo
}

// AddRequestedAt adds i to the "requested_at" field.
func (ruo *ReportUpdateOne) AddRequestedAt(i int64) *ReportUpdateOne {
	ruo.mutation.AddRequestedAt(i)
	return ruo
}

// ClearRequestedAt clears the value of the "requested_at" field.
func (ruo *ReportUpdateOne) ClearRequestedAt() *ReportUpdateOne {
	ruo.mutation.ClearRequestedAt()
	return ruo
}

// AddObjectIDs adds the "objects" edge to the Object entity by IDs.
func (ruo *ReportUpdateOne) AddObjectIDs(ids ...int) *ReportUpdateOne {
	ruo.mutation.AddObjectIDs(ids...)
	return ruo
}

// AddObjects adds the "objects" edges to the Object entity.
func (ruo *ReportUpdateOne) AddObjects(o ...*Object) *ReportUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ruo.AddObjectIDs(ids...)
}

// AddRepositoryIDs adds the "repository" edge to the Repository entity by IDs.
func (ruo *ReportUpdateOne) AddRepositoryIDs(ids ...int) *ReportUpdateOne {
	ruo.mutation.AddRepositoryIDs(ids...)
	return ruo
}

// AddRepository adds the "repository" edges to the Repository entity.
func (ruo *ReportUpdateOne) AddRepository(r ...*Repository) *ReportUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRepositoryIDs(ids...)
}

// Mutation returns the ReportMutation object of the builder.
func (ruo *ReportUpdateOne) Mutation() *ReportMutation {
	return ruo.mutation
}

// ClearObjects clears all "objects" edges to the Object entity.
func (ruo *ReportUpdateOne) ClearObjects() *ReportUpdateOne {
	ruo.mutation.ClearObjects()
	return ruo
}

// RemoveObjectIDs removes the "objects" edge to Object entities by IDs.
func (ruo *ReportUpdateOne) RemoveObjectIDs(ids ...int) *ReportUpdateOne {
	ruo.mutation.RemoveObjectIDs(ids...)
	return ruo
}

// RemoveObjects removes "objects" edges to Object entities.
func (ruo *ReportUpdateOne) RemoveObjects(o ...*Object) *ReportUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ruo.RemoveObjectIDs(ids...)
}

// ClearRepository clears all "repository" edges to the Repository entity.
func (ruo *ReportUpdateOne) ClearRepository() *ReportUpdateOne {
	ruo.mutation.ClearRepository()
	return ruo
}

// RemoveRepositoryIDs removes the "repository" edge to Repository entities by IDs.
func (ruo *ReportUpdateOne) RemoveRepositoryIDs(ids ...int) *ReportUpdateOne {
	ruo.mutation.RemoveRepositoryIDs(ids...)
	return ruo
}

// RemoveRepository removes "repository" edges to Repository entities.
func (ruo *ReportUpdateOne) RemoveRepository(r ...*Repository) *ReportUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRepositoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReportUpdateOne) Select(field string, fields ...string) *ReportUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Report entity.
func (ruo *ReportUpdateOne) Save(ctx context.Context) (*Report, error) {
	var (
		err  error
		node *Report
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReportUpdateOne) SaveX(ctx context.Context) *Report {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReportUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReportUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReportUpdateOne) sqlSave(ctx context.Context) (_node *Report, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   report.Table,
			Columns: report.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: report.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Report.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, report.FieldID)
		for _, f := range fields {
			if !report.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != report.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.ResourceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: report.FieldResourceType,
		})
	}
	if value, ok := ruo.mutation.ResourceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: report.FieldResourceName,
		})
	}
	if value, ok := ruo.mutation.ScannedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: report.FieldScannedAt,
		})
	}
	if value, ok := ruo.mutation.AddedScannedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: report.FieldScannedAt,
		})
	}
	if value, ok := ruo.mutation.RequestedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: report.FieldRequestedAt,
		})
	}
	if value, ok := ruo.mutation.AddedRequestedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: report.FieldRequestedAt,
		})
	}
	if ruo.mutation.RequestedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: report.FieldRequestedAt,
		})
	}
	if ruo.mutation.ObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   report.ObjectsTable,
			Columns: report.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: object.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedObjectsIDs(); len(nodes) > 0 && !ruo.mutation.ObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   report.ObjectsTable,
			Columns: report.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   report.ObjectsTable,
			Columns: report.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: object.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   report.RepositoryTable,
			Columns: report.RepositoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRepositoryIDs(); len(nodes) > 0 && !ruo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   report.RepositoryTable,
			Columns: report.RepositoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   report.RepositoryTable,
			Columns: report.RepositoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Report{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{report.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
