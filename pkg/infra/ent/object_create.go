// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/object"
	"github.com/m-mizutani/octovy/pkg/infra/ent/report"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnerability"
)

// ObjectCreate is the builder for creating a Object entity.
type ObjectCreate struct {
	config
	mutation *ObjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (oc *ObjectCreate) SetKey(s string) *ObjectCreate {
	oc.mutation.SetKey(s)
	return oc
}

// SetName sets the "name" field.
func (oc *ObjectCreate) SetName(s string) *ObjectCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetDescription sets the "description" field.
func (oc *ObjectCreate) SetDescription(s string) *ObjectCreate {
	oc.mutation.SetDescription(s)
	return oc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableDescription(s *string) *ObjectCreate {
	if s != nil {
		oc.SetDescription(*s)
	}
	return oc
}

// SetVersion sets the "version" field.
func (oc *ObjectCreate) SetVersion(s string) *ObjectCreate {
	oc.mutation.SetVersion(s)
	return oc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableVersion(s *string) *ObjectCreate {
	if s != nil {
		oc.SetVersion(*s)
	}
	return oc
}

// AddVulnerabilityIDs adds the "vulnerabilities" edge to the Vulnerability entity by IDs.
func (oc *ObjectCreate) AddVulnerabilityIDs(ids ...string) *ObjectCreate {
	oc.mutation.AddVulnerabilityIDs(ids...)
	return oc
}

// AddVulnerabilities adds the "vulnerabilities" edges to the Vulnerability entity.
func (oc *ObjectCreate) AddVulnerabilities(v ...*Vulnerability) *ObjectCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return oc.AddVulnerabilityIDs(ids...)
}

// AddReportIDs adds the "report" edge to the Report entity by IDs.
func (oc *ObjectCreate) AddReportIDs(ids ...int) *ObjectCreate {
	oc.mutation.AddReportIDs(ids...)
	return oc
}

// AddReport adds the "report" edges to the Report entity.
func (oc *ObjectCreate) AddReport(r ...*Report) *ObjectCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return oc.AddReportIDs(ids...)
}

// Mutation returns the ObjectMutation object of the builder.
func (oc *ObjectCreate) Mutation() *ObjectMutation {
	return oc.mutation
}

// Save creates the Object in the database.
func (oc *ObjectCreate) Save(ctx context.Context) (*Object, error) {
	var (
		err  error
		node *Object
	)
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ObjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *ObjectCreate) SaveX(ctx context.Context) *Object {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *ObjectCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *ObjectCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *ObjectCreate) check() error {
	if _, ok := oc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "key"`)}
	}
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	return nil
}

func (oc *ObjectCreate) sqlSave(ctx context.Context) (*Object, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oc *ObjectCreate) createSpec() (*Object, *sqlgraph.CreateSpec) {
	var (
		_node = &Object{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: object.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: object.FieldID,
			},
		}
	)
	_spec.OnConflict = oc.conflict
	if value, ok := oc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldName,
		})
		_node.Name = value
	}
	if value, ok := oc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := oc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldVersion,
		})
		_node.Version = value
	}
	if nodes := oc.mutation.VulnerabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.VulnerabilitiesTable,
			Columns: []string{object.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.ReportTable,
			Columns: object.ReportPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: report.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Object.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ObjectUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
//
func (oc *ObjectCreate) OnConflict(opts ...sql.ConflictOption) *ObjectUpsertOne {
	oc.conflict = opts
	return &ObjectUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.Object.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (oc *ObjectCreate) OnConflictColumns(columns ...string) *ObjectUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &ObjectUpsertOne{
		create: oc,
	}
}

type (
	// ObjectUpsertOne is the builder for "upsert"-ing
	//  one Object node.
	ObjectUpsertOne struct {
		create *ObjectCreate
	}

	// ObjectUpsert is the "OnConflict" setter.
	ObjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *ObjectUpsert) SetKey(v string) *ObjectUpsert {
	u.Set(object.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateKey() *ObjectUpsert {
	u.SetExcluded(object.FieldKey)
	return u
}

// SetName sets the "name" field.
func (u *ObjectUpsert) SetName(v string) *ObjectUpsert {
	u.Set(object.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateName() *ObjectUpsert {
	u.SetExcluded(object.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ObjectUpsert) SetDescription(v string) *ObjectUpsert {
	u.Set(object.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateDescription() *ObjectUpsert {
	u.SetExcluded(object.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ObjectUpsert) ClearDescription() *ObjectUpsert {
	u.SetNull(object.FieldDescription)
	return u
}

// SetVersion sets the "version" field.
func (u *ObjectUpsert) SetVersion(v string) *ObjectUpsert {
	u.Set(object.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ObjectUpsert) UpdateVersion() *ObjectUpsert {
	u.SetExcluded(object.FieldVersion)
	return u
}

// ClearVersion clears the value of the "version" field.
func (u *ObjectUpsert) ClearVersion() *ObjectUpsert {
	u.SetNull(object.FieldVersion)
	return u
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.Object.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *ObjectUpsertOne) UpdateNewValues() *ObjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Object.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ObjectUpsertOne) Ignore() *ObjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ObjectUpsertOne) DoNothing() *ObjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ObjectCreate.OnConflict
// documentation for more info.
func (u *ObjectUpsertOne) Update(set func(*ObjectUpsert)) *ObjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ObjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *ObjectUpsertOne) SetKey(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateKey() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *ObjectUpsertOne) SetName(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateName() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ObjectUpsertOne) SetDescription(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateDescription() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ObjectUpsertOne) ClearDescription() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearDescription()
	})
}

// SetVersion sets the "version" field.
func (u *ObjectUpsertOne) SetVersion(v string) *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ObjectUpsertOne) UpdateVersion() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *ObjectUpsertOne) ClearVersion() *ObjectUpsertOne {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearVersion()
	})
}

// Exec executes the query.
func (u *ObjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ObjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ObjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ObjectUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ObjectUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ObjectCreateBulk is the builder for creating many Object entities in bulk.
type ObjectCreateBulk struct {
	config
	builders []*ObjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Object entities in the database.
func (ocb *ObjectCreateBulk) Save(ctx context.Context) ([]*Object, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Object, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ObjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *ObjectCreateBulk) SaveX(ctx context.Context) []*Object {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *ObjectCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *ObjectCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Object.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ObjectUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
//
func (ocb *ObjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ObjectUpsertBulk {
	ocb.conflict = opts
	return &ObjectUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.Object.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (ocb *ObjectCreateBulk) OnConflictColumns(columns ...string) *ObjectUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &ObjectUpsertBulk{
		create: ocb,
	}
}

// ObjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Object nodes.
type ObjectUpsertBulk struct {
	create *ObjectCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.Object.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *ObjectUpsertBulk) UpdateNewValues() *ObjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Object.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ObjectUpsertBulk) Ignore() *ObjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ObjectUpsertBulk) DoNothing() *ObjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ObjectCreateBulk.OnConflict
// documentation for more info.
func (u *ObjectUpsertBulk) Update(set func(*ObjectUpsert)) *ObjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ObjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *ObjectUpsertBulk) SetKey(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateKey() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *ObjectUpsertBulk) SetName(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateName() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ObjectUpsertBulk) SetDescription(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateDescription() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ObjectUpsertBulk) ClearDescription() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearDescription()
	})
}

// SetVersion sets the "version" field.
func (u *ObjectUpsertBulk) SetVersion(v string) *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ObjectUpsertBulk) UpdateVersion() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *ObjectUpsertBulk) ClearVersion() *ObjectUpsertBulk {
	return u.Update(func(s *ObjectUpsert) {
		s.ClearVersion()
	})
}

// Exec executes the query.
func (u *ObjectUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ObjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ObjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ObjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
