// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnstatus"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnstatusindex"
)

// VulnStatusIndexUpdate is the builder for updating VulnStatusIndex entities.
type VulnStatusIndexUpdate struct {
	config
	hooks    []Hook
	mutation *VulnStatusIndexMutation
}

// Where appends a list predicates to the VulnStatusIndexUpdate builder.
func (vsiu *VulnStatusIndexUpdate) Where(ps ...predicate.VulnStatusIndex) *VulnStatusIndexUpdate {
	vsiu.mutation.Where(ps...)
	return vsiu
}

// AddStatuIDs adds the "status" edge to the VulnStatus entity by IDs.
func (vsiu *VulnStatusIndexUpdate) AddStatuIDs(ids ...int) *VulnStatusIndexUpdate {
	vsiu.mutation.AddStatuIDs(ids...)
	return vsiu
}

// AddStatus adds the "status" edges to the VulnStatus entity.
func (vsiu *VulnStatusIndexUpdate) AddStatus(v ...*VulnStatus) *VulnStatusIndexUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vsiu.AddStatuIDs(ids...)
}

// Mutation returns the VulnStatusIndexMutation object of the builder.
func (vsiu *VulnStatusIndexUpdate) Mutation() *VulnStatusIndexMutation {
	return vsiu.mutation
}

// ClearStatus clears all "status" edges to the VulnStatus entity.
func (vsiu *VulnStatusIndexUpdate) ClearStatus() *VulnStatusIndexUpdate {
	vsiu.mutation.ClearStatus()
	return vsiu
}

// RemoveStatuIDs removes the "status" edge to VulnStatus entities by IDs.
func (vsiu *VulnStatusIndexUpdate) RemoveStatuIDs(ids ...int) *VulnStatusIndexUpdate {
	vsiu.mutation.RemoveStatuIDs(ids...)
	return vsiu
}

// RemoveStatus removes "status" edges to VulnStatus entities.
func (vsiu *VulnStatusIndexUpdate) RemoveStatus(v ...*VulnStatus) *VulnStatusIndexUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vsiu.RemoveStatuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vsiu *VulnStatusIndexUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vsiu.hooks) == 0 {
		affected, err = vsiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnStatusIndexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vsiu.mutation = mutation
			affected, err = vsiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vsiu.hooks) - 1; i >= 0; i-- {
			if vsiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vsiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vsiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vsiu *VulnStatusIndexUpdate) SaveX(ctx context.Context) int {
	affected, err := vsiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vsiu *VulnStatusIndexUpdate) Exec(ctx context.Context) error {
	_, err := vsiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsiu *VulnStatusIndexUpdate) ExecX(ctx context.Context) {
	if err := vsiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vsiu *VulnStatusIndexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnstatusindex.Table,
			Columns: vulnstatusindex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: vulnstatusindex.FieldID,
			},
		},
	}
	if ps := vsiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vsiu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnstatusindex.StatusTable,
			Columns: []string{vulnstatusindex.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsiu.mutation.RemovedStatusIDs(); len(nodes) > 0 && !vsiu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnstatusindex.StatusTable,
			Columns: []string{vulnstatusindex.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsiu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnstatusindex.StatusTable,
			Columns: []string{vulnstatusindex.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vsiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnstatusindex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VulnStatusIndexUpdateOne is the builder for updating a single VulnStatusIndex entity.
type VulnStatusIndexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnStatusIndexMutation
}

// AddStatuIDs adds the "status" edge to the VulnStatus entity by IDs.
func (vsiuo *VulnStatusIndexUpdateOne) AddStatuIDs(ids ...int) *VulnStatusIndexUpdateOne {
	vsiuo.mutation.AddStatuIDs(ids...)
	return vsiuo
}

// AddStatus adds the "status" edges to the VulnStatus entity.
func (vsiuo *VulnStatusIndexUpdateOne) AddStatus(v ...*VulnStatus) *VulnStatusIndexUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vsiuo.AddStatuIDs(ids...)
}

// Mutation returns the VulnStatusIndexMutation object of the builder.
func (vsiuo *VulnStatusIndexUpdateOne) Mutation() *VulnStatusIndexMutation {
	return vsiuo.mutation
}

// ClearStatus clears all "status" edges to the VulnStatus entity.
func (vsiuo *VulnStatusIndexUpdateOne) ClearStatus() *VulnStatusIndexUpdateOne {
	vsiuo.mutation.ClearStatus()
	return vsiuo
}

// RemoveStatuIDs removes the "status" edge to VulnStatus entities by IDs.
func (vsiuo *VulnStatusIndexUpdateOne) RemoveStatuIDs(ids ...int) *VulnStatusIndexUpdateOne {
	vsiuo.mutation.RemoveStatuIDs(ids...)
	return vsiuo
}

// RemoveStatus removes "status" edges to VulnStatus entities.
func (vsiuo *VulnStatusIndexUpdateOne) RemoveStatus(v ...*VulnStatus) *VulnStatusIndexUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vsiuo.RemoveStatuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsiuo *VulnStatusIndexUpdateOne) Select(field string, fields ...string) *VulnStatusIndexUpdateOne {
	vsiuo.fields = append([]string{field}, fields...)
	return vsiuo
}

// Save executes the query and returns the updated VulnStatusIndex entity.
func (vsiuo *VulnStatusIndexUpdateOne) Save(ctx context.Context) (*VulnStatusIndex, error) {
	var (
		err  error
		node *VulnStatusIndex
	)
	if len(vsiuo.hooks) == 0 {
		node, err = vsiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnStatusIndexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vsiuo.mutation = mutation
			node, err = vsiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vsiuo.hooks) - 1; i >= 0; i-- {
			if vsiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vsiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vsiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vsiuo *VulnStatusIndexUpdateOne) SaveX(ctx context.Context) *VulnStatusIndex {
	node, err := vsiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsiuo *VulnStatusIndexUpdateOne) Exec(ctx context.Context) error {
	_, err := vsiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsiuo *VulnStatusIndexUpdateOne) ExecX(ctx context.Context) {
	if err := vsiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vsiuo *VulnStatusIndexUpdateOne) sqlSave(ctx context.Context) (_node *VulnStatusIndex, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnstatusindex.Table,
			Columns: vulnstatusindex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: vulnstatusindex.FieldID,
			},
		},
	}
	id, ok := vsiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VulnStatusIndex.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vsiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnstatusindex.FieldID)
		for _, f := range fields {
			if !vulnstatusindex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnstatusindex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vsiuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnstatusindex.StatusTable,
			Columns: []string{vulnstatusindex.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsiuo.mutation.RemovedStatusIDs(); len(nodes) > 0 && !vsiuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnstatusindex.StatusTable,
			Columns: []string{vulnstatusindex.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsiuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnstatusindex.StatusTable,
			Columns: []string{vulnstatusindex.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VulnStatusIndex{config: vsiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnstatusindex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
