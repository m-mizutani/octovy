// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/infra/ent/report"
)

// Report is the model entity for the Report schema.
type Report struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Scanner holds the value of the "scanner" field.
	Scanner string `json:"scanner,omitempty"`
	// ResourceType holds the value of the "resource_type" field.
	ResourceType string `json:"resource_type,omitempty"`
	// ResourceName holds the value of the "resource_name" field.
	ResourceName string `json:"resource_name,omitempty"`
	// ScannedAt holds the value of the "scanned_at" field.
	ScannedAt int64 `json:"scanned_at,omitempty"`
	// RequestedAt holds the value of the "requested_at" field.
	RequestedAt int64 `json:"requested_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportQuery when eager-loading is set.
	Edges ReportEdges `json:"edges"`
}

// ReportEdges holds the relations/edges for other nodes in the graph.
type ReportEdges struct {
	// Objects holds the value of the objects edge.
	Objects []*Object `json:"objects,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ObjectsOrErr returns the Objects value or an error if the edge
// was not loaded in eager-loading.
func (e ReportEdges) ObjectsOrErr() ([]*Object, error) {
	if e.loadedTypes[0] {
		return e.Objects, nil
	}
	return nil, &NotLoadedError{edge: "objects"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Report) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case report.FieldID, report.FieldScannedAt, report.FieldRequestedAt:
			values[i] = new(sql.NullInt64)
		case report.FieldScanner, report.FieldResourceType, report.FieldResourceName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Report", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Report fields.
func (r *Report) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case report.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case report.FieldScanner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scanner", values[i])
			} else if value.Valid {
				r.Scanner = value.String
			}
		case report.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				r.ResourceType = value.String
			}
		case report.FieldResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_name", values[i])
			} else if value.Valid {
				r.ResourceName = value.String
			}
		case report.FieldScannedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scanned_at", values[i])
			} else if value.Valid {
				r.ScannedAt = value.Int64
			}
		case report.FieldRequestedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field requested_at", values[i])
			} else if value.Valid {
				r.RequestedAt = value.Int64
			}
		}
	}
	return nil
}

// QueryObjects queries the "objects" edge of the Report entity.
func (r *Report) QueryObjects() *ObjectQuery {
	return (&ReportClient{config: r.config}).QueryObjects(r)
}

// Update returns a builder for updating this Report.
// Note that you need to call Report.Unwrap() before calling this method if this Report
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Report) Update() *ReportUpdateOne {
	return (&ReportClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Report entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Report) Unwrap() *Report {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Report is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Report) String() string {
	var builder strings.Builder
	builder.WriteString("Report(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", scanner=")
	builder.WriteString(r.Scanner)
	builder.WriteString(", resource_type=")
	builder.WriteString(r.ResourceType)
	builder.WriteString(", resource_name=")
	builder.WriteString(r.ResourceName)
	builder.WriteString(", scanned_at=")
	builder.WriteString(fmt.Sprintf("%v", r.ScannedAt))
	builder.WriteString(", requested_at=")
	builder.WriteString(fmt.Sprintf("%v", r.RequestedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Reports is a parsable slice of Report.
type Reports []*Report

func (r Reports) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
