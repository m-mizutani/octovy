// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
	"github.com/m-mizutani/octovy/pkg/infra/ent/repolabel"
	"github.com/m-mizutani/octovy/pkg/infra/ent/repository"
)

// RepoLabelUpdate is the builder for updating RepoLabel entities.
type RepoLabelUpdate struct {
	config
	hooks    []Hook
	mutation *RepoLabelMutation
}

// Where appends a list predicates to the RepoLabelUpdate builder.
func (rlu *RepoLabelUpdate) Where(ps ...predicate.RepoLabel) *RepoLabelUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// SetName sets the "name" field.
func (rlu *RepoLabelUpdate) SetName(s string) *RepoLabelUpdate {
	rlu.mutation.SetName(s)
	return rlu
}

// AddRepoIDs adds the "repos" edge to the Repository entity by IDs.
func (rlu *RepoLabelUpdate) AddRepoIDs(ids ...int) *RepoLabelUpdate {
	rlu.mutation.AddRepoIDs(ids...)
	return rlu
}

// AddRepos adds the "repos" edges to the Repository entity.
func (rlu *RepoLabelUpdate) AddRepos(r ...*Repository) *RepoLabelUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rlu.AddRepoIDs(ids...)
}

// Mutation returns the RepoLabelMutation object of the builder.
func (rlu *RepoLabelUpdate) Mutation() *RepoLabelMutation {
	return rlu.mutation
}

// ClearRepos clears all "repos" edges to the Repository entity.
func (rlu *RepoLabelUpdate) ClearRepos() *RepoLabelUpdate {
	rlu.mutation.ClearRepos()
	return rlu
}

// RemoveRepoIDs removes the "repos" edge to Repository entities by IDs.
func (rlu *RepoLabelUpdate) RemoveRepoIDs(ids ...int) *RepoLabelUpdate {
	rlu.mutation.RemoveRepoIDs(ids...)
	return rlu
}

// RemoveRepos removes "repos" edges to Repository entities.
func (rlu *RepoLabelUpdate) RemoveRepos(r ...*Repository) *RepoLabelUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rlu.RemoveRepoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *RepoLabelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rlu.hooks) == 0 {
		affected, err = rlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepoLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rlu.mutation = mutation
			affected, err = rlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rlu.hooks) - 1; i >= 0; i-- {
			if rlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *RepoLabelUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *RepoLabelUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *RepoLabelUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rlu *RepoLabelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repolabel.Table,
			Columns: repolabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repolabel.FieldID,
			},
		},
	}
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repolabel.FieldName,
		})
	}
	if rlu.mutation.ReposCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repolabel.ReposTable,
			Columns: repolabel.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.RemovedReposIDs(); len(nodes) > 0 && !rlu.mutation.ReposCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repolabel.ReposTable,
			Columns: repolabel.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.ReposIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repolabel.ReposTable,
			Columns: repolabel.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repolabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RepoLabelUpdateOne is the builder for updating a single RepoLabel entity.
type RepoLabelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepoLabelMutation
}

// SetName sets the "name" field.
func (rluo *RepoLabelUpdateOne) SetName(s string) *RepoLabelUpdateOne {
	rluo.mutation.SetName(s)
	return rluo
}

// AddRepoIDs adds the "repos" edge to the Repository entity by IDs.
func (rluo *RepoLabelUpdateOne) AddRepoIDs(ids ...int) *RepoLabelUpdateOne {
	rluo.mutation.AddRepoIDs(ids...)
	return rluo
}

// AddRepos adds the "repos" edges to the Repository entity.
func (rluo *RepoLabelUpdateOne) AddRepos(r ...*Repository) *RepoLabelUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rluo.AddRepoIDs(ids...)
}

// Mutation returns the RepoLabelMutation object of the builder.
func (rluo *RepoLabelUpdateOne) Mutation() *RepoLabelMutation {
	return rluo.mutation
}

// ClearRepos clears all "repos" edges to the Repository entity.
func (rluo *RepoLabelUpdateOne) ClearRepos() *RepoLabelUpdateOne {
	rluo.mutation.ClearRepos()
	return rluo
}

// RemoveRepoIDs removes the "repos" edge to Repository entities by IDs.
func (rluo *RepoLabelUpdateOne) RemoveRepoIDs(ids ...int) *RepoLabelUpdateOne {
	rluo.mutation.RemoveRepoIDs(ids...)
	return rluo
}

// RemoveRepos removes "repos" edges to Repository entities.
func (rluo *RepoLabelUpdateOne) RemoveRepos(r ...*Repository) *RepoLabelUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rluo.RemoveRepoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *RepoLabelUpdateOne) Select(field string, fields ...string) *RepoLabelUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated RepoLabel entity.
func (rluo *RepoLabelUpdateOne) Save(ctx context.Context) (*RepoLabel, error) {
	var (
		err  error
		node *RepoLabel
	)
	if len(rluo.hooks) == 0 {
		node, err = rluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepoLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rluo.mutation = mutation
			node, err = rluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rluo.hooks) - 1; i >= 0; i-- {
			if rluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *RepoLabelUpdateOne) SaveX(ctx context.Context) *RepoLabel {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *RepoLabelUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *RepoLabelUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rluo *RepoLabelUpdateOne) sqlSave(ctx context.Context) (_node *RepoLabel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repolabel.Table,
			Columns: repolabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repolabel.FieldID,
			},
		},
	}
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RepoLabel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repolabel.FieldID)
		for _, f := range fields {
			if !repolabel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repolabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rluo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repolabel.FieldName,
		})
	}
	if rluo.mutation.ReposCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repolabel.ReposTable,
			Columns: repolabel.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.RemovedReposIDs(); len(nodes) > 0 && !rluo.mutation.ReposCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repolabel.ReposTable,
			Columns: repolabel.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.ReposIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repolabel.ReposTable,
			Columns: repolabel.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RepoLabel{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repolabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
