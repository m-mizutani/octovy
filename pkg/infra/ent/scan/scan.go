// Code generated by entc, DO NOT EDIT.

package scan

const (
	// Label holds the string label denoting the scan type in the database.
	Label = "scan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBranch holds the string denoting the branch field in the database.
	FieldBranch = "branch"
	// FieldCommitID holds the string denoting the commit_id field in the database.
	FieldCommitID = "commit_id"
	// FieldRequestedAt holds the string denoting the requested_at field in the database.
	FieldRequestedAt = "requested_at"
	// FieldScannedAt holds the string denoting the scanned_at field in the database.
	FieldScannedAt = "scanned_at"
	// FieldCheckID holds the string denoting the check_id field in the database.
	FieldCheckID = "check_id"
	// FieldPullRequestTarget holds the string denoting the pull_request_target field in the database.
	FieldPullRequestTarget = "pull_request_target"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// EdgePackages holds the string denoting the packages edge name in mutations.
	EdgePackages = "packages"
	// Table holds the table name of the scan in the database.
	Table = "scans"
	// RepositoryTable is the table that holds the repository relation/edge. The primary key declared below.
	RepositoryTable = "repository_scan"
	// RepositoryInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoryInverseTable = "repositories"
	// PackagesTable is the table that holds the packages relation/edge. The primary key declared below.
	PackagesTable = "scan_packages"
	// PackagesInverseTable is the table name for the PackageRecord entity.
	// It exists in this package in order to avoid circular dependency with the "packagerecord" package.
	PackagesInverseTable = "package_records"
)

// Columns holds all SQL columns for scan fields.
var Columns = []string{
	FieldID,
	FieldBranch,
	FieldCommitID,
	FieldRequestedAt,
	FieldScannedAt,
	FieldCheckID,
	FieldPullRequestTarget,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "scans"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_main",
}

var (
	// RepositoryPrimaryKey and RepositoryColumn2 are the table columns denoting the
	// primary key for the repository relation (M2M).
	RepositoryPrimaryKey = []string{"repository_id", "scan_id"}
	// PackagesPrimaryKey and PackagesColumn2 are the table columns denoting the
	// primary key for the packages relation (M2M).
	PackagesPrimaryKey = []string{"scan_id", "package_record_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
