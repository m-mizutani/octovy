// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/domain/types"
	"github.com/m-mizutani/octovy/pkg/infra/ent/user"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnstatus"
)

// VulnStatusCreate is the builder for creating a VulnStatus entity.
type VulnStatusCreate struct {
	config
	mutation *VulnStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (vsc *VulnStatusCreate) SetStatus(tst types.VulnStatusType) *VulnStatusCreate {
	vsc.mutation.SetStatus(tst)
	return vsc
}

// SetSource sets the "source" field.
func (vsc *VulnStatusCreate) SetSource(s string) *VulnStatusCreate {
	vsc.mutation.SetSource(s)
	return vsc
}

// SetPkgName sets the "pkg_name" field.
func (vsc *VulnStatusCreate) SetPkgName(s string) *VulnStatusCreate {
	vsc.mutation.SetPkgName(s)
	return vsc
}

// SetPkgType sets the "pkg_type" field.
func (vsc *VulnStatusCreate) SetPkgType(s string) *VulnStatusCreate {
	vsc.mutation.SetPkgType(s)
	return vsc
}

// SetVulnID sets the "vuln_id" field.
func (vsc *VulnStatusCreate) SetVulnID(s string) *VulnStatusCreate {
	vsc.mutation.SetVulnID(s)
	return vsc
}

// SetExpiresAt sets the "expires_at" field.
func (vsc *VulnStatusCreate) SetExpiresAt(i int64) *VulnStatusCreate {
	vsc.mutation.SetExpiresAt(i)
	return vsc
}

// SetCreatedAt sets the "created_at" field.
func (vsc *VulnStatusCreate) SetCreatedAt(i int64) *VulnStatusCreate {
	vsc.mutation.SetCreatedAt(i)
	return vsc
}

// SetComment sets the "comment" field.
func (vsc *VulnStatusCreate) SetComment(s string) *VulnStatusCreate {
	vsc.mutation.SetComment(s)
	return vsc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (vsc *VulnStatusCreate) SetAuthorID(id int) *VulnStatusCreate {
	vsc.mutation.SetAuthorID(id)
	return vsc
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (vsc *VulnStatusCreate) SetNillableAuthorID(id *int) *VulnStatusCreate {
	if id != nil {
		vsc = vsc.SetAuthorID(*id)
	}
	return vsc
}

// SetAuthor sets the "author" edge to the User entity.
func (vsc *VulnStatusCreate) SetAuthor(u *User) *VulnStatusCreate {
	return vsc.SetAuthorID(u.ID)
}

// Mutation returns the VulnStatusMutation object of the builder.
func (vsc *VulnStatusCreate) Mutation() *VulnStatusMutation {
	return vsc.mutation
}

// Save creates the VulnStatus in the database.
func (vsc *VulnStatusCreate) Save(ctx context.Context) (*VulnStatus, error) {
	var (
		err  error
		node *VulnStatus
	)
	if len(vsc.hooks) == 0 {
		if err = vsc.check(); err != nil {
			return nil, err
		}
		node, err = vsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vsc.check(); err != nil {
				return nil, err
			}
			vsc.mutation = mutation
			if node, err = vsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vsc.hooks) - 1; i >= 0; i-- {
			if vsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vsc *VulnStatusCreate) SaveX(ctx context.Context) *VulnStatus {
	v, err := vsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vsc *VulnStatusCreate) Exec(ctx context.Context) error {
	_, err := vsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsc *VulnStatusCreate) ExecX(ctx context.Context) {
	if err := vsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsc *VulnStatusCreate) check() error {
	if _, ok := vsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := vsc.mutation.Status(); ok {
		if err := vulnstatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	if _, ok := vsc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "source"`)}
	}
	if _, ok := vsc.mutation.PkgName(); !ok {
		return &ValidationError{Name: "pkg_name", err: errors.New(`ent: missing required field "pkg_name"`)}
	}
	if _, ok := vsc.mutation.PkgType(); !ok {
		return &ValidationError{Name: "pkg_type", err: errors.New(`ent: missing required field "pkg_type"`)}
	}
	if _, ok := vsc.mutation.VulnID(); !ok {
		return &ValidationError{Name: "vuln_id", err: errors.New(`ent: missing required field "vuln_id"`)}
	}
	if _, ok := vsc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "expires_at"`)}
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := vsc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "comment"`)}
	}
	return nil
}

func (vsc *VulnStatusCreate) sqlSave(ctx context.Context) (*VulnStatus, error) {
	_node, _spec := vsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vsc *VulnStatusCreate) createSpec() (*VulnStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &VulnStatus{config: vsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vulnstatus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnstatus.FieldID,
			},
		}
	)
	_spec.OnConflict = vsc.conflict
	if value, ok := vsc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vulnstatus.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := vsc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnstatus.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := vsc.mutation.PkgName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnstatus.FieldPkgName,
		})
		_node.PkgName = value
	}
	if value, ok := vsc.mutation.PkgType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnstatus.FieldPkgType,
		})
		_node.PkgType = value
	}
	if value, ok := vsc.mutation.VulnID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnstatus.FieldVulnID,
		})
		_node.VulnID = value
	}
	if value, ok := vsc.mutation.ExpiresAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnstatus.FieldExpiresAt,
		})
		_node.ExpiresAt = value
	}
	if value, ok := vsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vulnstatus.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := vsc.mutation.Comment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnstatus.FieldComment,
		})
		_node.Comment = value
	}
	if nodes := vsc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnstatus.AuthorTable,
			Columns: []string{vulnstatus.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vuln_status_author = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VulnStatus.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnStatusUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
//
func (vsc *VulnStatusCreate) OnConflict(opts ...sql.ConflictOption) *VulnStatusUpsertOne {
	vsc.conflict = opts
	return &VulnStatusUpsertOne{
		create: vsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.VulnStatus.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (vsc *VulnStatusCreate) OnConflictColumns(columns ...string) *VulnStatusUpsertOne {
	vsc.conflict = append(vsc.conflict, sql.ConflictColumns(columns...))
	return &VulnStatusUpsertOne{
		create: vsc,
	}
}

type (
	// VulnStatusUpsertOne is the builder for "upsert"-ing
	//  one VulnStatus node.
	VulnStatusUpsertOne struct {
		create *VulnStatusCreate
	}

	// VulnStatusUpsert is the "OnConflict" setter.
	VulnStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *VulnStatusUpsert) SetStatus(v types.VulnStatusType) *VulnStatusUpsert {
	u.Set(vulnstatus.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VulnStatusUpsert) UpdateStatus() *VulnStatusUpsert {
	u.SetExcluded(vulnstatus.FieldStatus)
	return u
}

// SetSource sets the "source" field.
func (u *VulnStatusUpsert) SetSource(v string) *VulnStatusUpsert {
	u.Set(vulnstatus.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *VulnStatusUpsert) UpdateSource() *VulnStatusUpsert {
	u.SetExcluded(vulnstatus.FieldSource)
	return u
}

// SetPkgName sets the "pkg_name" field.
func (u *VulnStatusUpsert) SetPkgName(v string) *VulnStatusUpsert {
	u.Set(vulnstatus.FieldPkgName, v)
	return u
}

// UpdatePkgName sets the "pkg_name" field to the value that was provided on create.
func (u *VulnStatusUpsert) UpdatePkgName() *VulnStatusUpsert {
	u.SetExcluded(vulnstatus.FieldPkgName)
	return u
}

// SetPkgType sets the "pkg_type" field.
func (u *VulnStatusUpsert) SetPkgType(v string) *VulnStatusUpsert {
	u.Set(vulnstatus.FieldPkgType, v)
	return u
}

// UpdatePkgType sets the "pkg_type" field to the value that was provided on create.
func (u *VulnStatusUpsert) UpdatePkgType() *VulnStatusUpsert {
	u.SetExcluded(vulnstatus.FieldPkgType)
	return u
}

// SetVulnID sets the "vuln_id" field.
func (u *VulnStatusUpsert) SetVulnID(v string) *VulnStatusUpsert {
	u.Set(vulnstatus.FieldVulnID, v)
	return u
}

// UpdateVulnID sets the "vuln_id" field to the value that was provided on create.
func (u *VulnStatusUpsert) UpdateVulnID() *VulnStatusUpsert {
	u.SetExcluded(vulnstatus.FieldVulnID)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *VulnStatusUpsert) SetExpiresAt(v int64) *VulnStatusUpsert {
	u.Set(vulnstatus.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *VulnStatusUpsert) UpdateExpiresAt() *VulnStatusUpsert {
	u.SetExcluded(vulnstatus.FieldExpiresAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VulnStatusUpsert) SetCreatedAt(v int64) *VulnStatusUpsert {
	u.Set(vulnstatus.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VulnStatusUpsert) UpdateCreatedAt() *VulnStatusUpsert {
	u.SetExcluded(vulnstatus.FieldCreatedAt)
	return u
}

// SetComment sets the "comment" field.
func (u *VulnStatusUpsert) SetComment(v string) *VulnStatusUpsert {
	u.Set(vulnstatus.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *VulnStatusUpsert) UpdateComment() *VulnStatusUpsert {
	u.SetExcluded(vulnstatus.FieldComment)
	return u
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.VulnStatus.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *VulnStatusUpsertOne) UpdateNewValues() *VulnStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.VulnStatus.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *VulnStatusUpsertOne) Ignore() *VulnStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnStatusUpsertOne) DoNothing() *VulnStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnStatusCreate.OnConflict
// documentation for more info.
func (u *VulnStatusUpsertOne) Update(set func(*VulnStatusUpsert)) *VulnStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *VulnStatusUpsertOne) SetStatus(v types.VulnStatusType) *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VulnStatusUpsertOne) UpdateStatus() *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateStatus()
	})
}

// SetSource sets the "source" field.
func (u *VulnStatusUpsertOne) SetSource(v string) *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *VulnStatusUpsertOne) UpdateSource() *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateSource()
	})
}

// SetPkgName sets the "pkg_name" field.
func (u *VulnStatusUpsertOne) SetPkgName(v string) *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetPkgName(v)
	})
}

// UpdatePkgName sets the "pkg_name" field to the value that was provided on create.
func (u *VulnStatusUpsertOne) UpdatePkgName() *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdatePkgName()
	})
}

// SetPkgType sets the "pkg_type" field.
func (u *VulnStatusUpsertOne) SetPkgType(v string) *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetPkgType(v)
	})
}

// UpdatePkgType sets the "pkg_type" field to the value that was provided on create.
func (u *VulnStatusUpsertOne) UpdatePkgType() *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdatePkgType()
	})
}

// SetVulnID sets the "vuln_id" field.
func (u *VulnStatusUpsertOne) SetVulnID(v string) *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetVulnID(v)
	})
}

// UpdateVulnID sets the "vuln_id" field to the value that was provided on create.
func (u *VulnStatusUpsertOne) UpdateVulnID() *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateVulnID()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *VulnStatusUpsertOne) SetExpiresAt(v int64) *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *VulnStatusUpsertOne) UpdateExpiresAt() *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *VulnStatusUpsertOne) SetCreatedAt(v int64) *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VulnStatusUpsertOne) UpdateCreatedAt() *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetComment sets the "comment" field.
func (u *VulnStatusUpsertOne) SetComment(v string) *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *VulnStatusUpsertOne) UpdateComment() *VulnStatusUpsertOne {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateComment()
	})
}

// Exec executes the query.
func (u *VulnStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VulnStatusUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VulnStatusUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VulnStatusCreateBulk is the builder for creating many VulnStatus entities in bulk.
type VulnStatusCreateBulk struct {
	config
	builders []*VulnStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the VulnStatus entities in the database.
func (vscb *VulnStatusCreateBulk) Save(ctx context.Context) ([]*VulnStatus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vscb.builders))
	nodes := make([]*VulnStatus, len(vscb.builders))
	mutators := make([]Mutator, len(vscb.builders))
	for i := range vscb.builders {
		func(i int, root context.Context) {
			builder := vscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vscb *VulnStatusCreateBulk) SaveX(ctx context.Context) []*VulnStatus {
	v, err := vscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vscb *VulnStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := vscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vscb *VulnStatusCreateBulk) ExecX(ctx context.Context) {
	if err := vscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VulnStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnStatusUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
//
func (vscb *VulnStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *VulnStatusUpsertBulk {
	vscb.conflict = opts
	return &VulnStatusUpsertBulk{
		create: vscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.VulnStatus.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (vscb *VulnStatusCreateBulk) OnConflictColumns(columns ...string) *VulnStatusUpsertBulk {
	vscb.conflict = append(vscb.conflict, sql.ConflictColumns(columns...))
	return &VulnStatusUpsertBulk{
		create: vscb,
	}
}

// VulnStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of VulnStatus nodes.
type VulnStatusUpsertBulk struct {
	create *VulnStatusCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.VulnStatus.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *VulnStatusUpsertBulk) UpdateNewValues() *VulnStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.VulnStatus.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *VulnStatusUpsertBulk) Ignore() *VulnStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnStatusUpsertBulk) DoNothing() *VulnStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnStatusCreateBulk.OnConflict
// documentation for more info.
func (u *VulnStatusUpsertBulk) Update(set func(*VulnStatusUpsert)) *VulnStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *VulnStatusUpsertBulk) SetStatus(v types.VulnStatusType) *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VulnStatusUpsertBulk) UpdateStatus() *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateStatus()
	})
}

// SetSource sets the "source" field.
func (u *VulnStatusUpsertBulk) SetSource(v string) *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *VulnStatusUpsertBulk) UpdateSource() *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateSource()
	})
}

// SetPkgName sets the "pkg_name" field.
func (u *VulnStatusUpsertBulk) SetPkgName(v string) *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetPkgName(v)
	})
}

// UpdatePkgName sets the "pkg_name" field to the value that was provided on create.
func (u *VulnStatusUpsertBulk) UpdatePkgName() *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdatePkgName()
	})
}

// SetPkgType sets the "pkg_type" field.
func (u *VulnStatusUpsertBulk) SetPkgType(v string) *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetPkgType(v)
	})
}

// UpdatePkgType sets the "pkg_type" field to the value that was provided on create.
func (u *VulnStatusUpsertBulk) UpdatePkgType() *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdatePkgType()
	})
}

// SetVulnID sets the "vuln_id" field.
func (u *VulnStatusUpsertBulk) SetVulnID(v string) *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetVulnID(v)
	})
}

// UpdateVulnID sets the "vuln_id" field to the value that was provided on create.
func (u *VulnStatusUpsertBulk) UpdateVulnID() *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateVulnID()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *VulnStatusUpsertBulk) SetExpiresAt(v int64) *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *VulnStatusUpsertBulk) UpdateExpiresAt() *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *VulnStatusUpsertBulk) SetCreatedAt(v int64) *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VulnStatusUpsertBulk) UpdateCreatedAt() *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetComment sets the "comment" field.
func (u *VulnStatusUpsertBulk) SetComment(v string) *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *VulnStatusUpsertBulk) UpdateComment() *VulnStatusUpsertBulk {
	return u.Update(func(s *VulnStatusUpsert) {
		s.UpdateComment()
	})
}

// Exec executes the query.
func (u *VulnStatusUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VulnStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
