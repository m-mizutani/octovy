// Code generated by entc, DO NOT EDIT.

package vulnerability

const (
	// Label holds the string label denoting the vulnerability type in the database.
	Label = "vulnerability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstSeenAt holds the string denoting the first_seen_at field in the database.
	FieldFirstSeenAt = "first_seen_at"
	// FieldLastModifiedAt holds the string denoting the last_modified_at field in the database.
	FieldLastModifiedAt = "last_modified_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCweID holds the string denoting the cwe_id field in the database.
	FieldCweID = "cwe_id"
	// FieldSeverity holds the string denoting the severity field in the database.
	FieldSeverity = "severity"
	// FieldCvss holds the string denoting the cvss field in the database.
	FieldCvss = "cvss"
	// FieldReferences holds the string denoting the references field in the database.
	FieldReferences = "references"
	// EdgePackages holds the string denoting the packages edge name in mutations.
	EdgePackages = "packages"
	// EdgeStatus holds the string denoting the status edge name in mutations.
	EdgeStatus = "status"
	// Table holds the table name of the vulnerability in the database.
	Table = "vulnerabilities"
	// PackagesTable is the table that holds the packages relation/edge. The primary key declared below.
	PackagesTable = "package_record_vulnerabilities"
	// PackagesInverseTable is the table name for the PackageRecord entity.
	// It exists in this package in order to avoid circular dependency with the "packagerecord" package.
	PackagesInverseTable = "package_records"
	// StatusTable is the table that holds the status relation/edge.
	StatusTable = "vuln_status"
	// StatusInverseTable is the table name for the VulnStatus entity.
	// It exists in this package in order to avoid circular dependency with the "vulnstatus" package.
	StatusInverseTable = "vuln_status"
	// StatusColumn is the table column denoting the status relation/edge.
	StatusColumn = "vulnerability_status"
)

// Columns holds all SQL columns for vulnerability fields.
var Columns = []string{
	FieldID,
	FieldFirstSeenAt,
	FieldLastModifiedAt,
	FieldTitle,
	FieldDescription,
	FieldCweID,
	FieldSeverity,
	FieldCvss,
	FieldReferences,
}

var (
	// PackagesPrimaryKey and PackagesColumn2 are the table columns denoting the
	// primary key for the packages relation (M2M).
	PackagesPrimaryKey = []string{"package_record_id", "vulnerability_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
