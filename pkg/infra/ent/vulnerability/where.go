// Code generated by entc, DO NOT EDIT.

package vulnerability

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FirstSeenAt applies equality check predicate on the "first_seen_at" field. It's identical to FirstSeenAtEQ.
func FirstSeenAt(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstSeenAt), v))
	})
}

// LastModifiedAt applies equality check predicate on the "last_modified_at" field. It's identical to LastModifiedAtEQ.
func LastModifiedAt(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedAt), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Severity applies equality check predicate on the "severity" field. It's identical to SeverityEQ.
func Severity(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverity), v))
	})
}

// FirstSeenAtEQ applies the EQ predicate on the "first_seen_at" field.
func FirstSeenAtEQ(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstSeenAt), v))
	})
}

// FirstSeenAtNEQ applies the NEQ predicate on the "first_seen_at" field.
func FirstSeenAtNEQ(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstSeenAt), v))
	})
}

// FirstSeenAtIn applies the In predicate on the "first_seen_at" field.
func FirstSeenAtIn(vs ...int64) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstSeenAt), v...))
	})
}

// FirstSeenAtNotIn applies the NotIn predicate on the "first_seen_at" field.
func FirstSeenAtNotIn(vs ...int64) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstSeenAt), v...))
	})
}

// FirstSeenAtGT applies the GT predicate on the "first_seen_at" field.
func FirstSeenAtGT(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstSeenAt), v))
	})
}

// FirstSeenAtGTE applies the GTE predicate on the "first_seen_at" field.
func FirstSeenAtGTE(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstSeenAt), v))
	})
}

// FirstSeenAtLT applies the LT predicate on the "first_seen_at" field.
func FirstSeenAtLT(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstSeenAt), v))
	})
}

// FirstSeenAtLTE applies the LTE predicate on the "first_seen_at" field.
func FirstSeenAtLTE(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstSeenAt), v))
	})
}

// LastModifiedAtEQ applies the EQ predicate on the "last_modified_at" field.
func LastModifiedAtEQ(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtNEQ applies the NEQ predicate on the "last_modified_at" field.
func LastModifiedAtNEQ(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtIn applies the In predicate on the "last_modified_at" field.
func LastModifiedAtIn(vs ...int64) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedAt), v...))
	})
}

// LastModifiedAtNotIn applies the NotIn predicate on the "last_modified_at" field.
func LastModifiedAtNotIn(vs ...int64) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedAt), v...))
	})
}

// LastModifiedAtGT applies the GT predicate on the "last_modified_at" field.
func LastModifiedAtGT(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtGTE applies the GTE predicate on the "last_modified_at" field.
func LastModifiedAtGTE(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtLT applies the LT predicate on the "last_modified_at" field.
func LastModifiedAtLT(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedAt), v))
	})
}

// LastModifiedAtLTE applies the LTE predicate on the "last_modified_at" field.
func LastModifiedAtLTE(v int64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedAt), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// CweIDIsNil applies the IsNil predicate on the "cwe_id" field.
func CweIDIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCweID)))
	})
}

// CweIDNotNil applies the NotNil predicate on the "cwe_id" field.
func CweIDNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCweID)))
	})
}

// SeverityEQ applies the EQ predicate on the "severity" field.
func SeverityEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverity), v))
	})
}

// SeverityNEQ applies the NEQ predicate on the "severity" field.
func SeverityNEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeverity), v))
	})
}

// SeverityIn applies the In predicate on the "severity" field.
func SeverityIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeverity), v...))
	})
}

// SeverityNotIn applies the NotIn predicate on the "severity" field.
func SeverityNotIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeverity), v...))
	})
}

// SeverityGT applies the GT predicate on the "severity" field.
func SeverityGT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeverity), v))
	})
}

// SeverityGTE applies the GTE predicate on the "severity" field.
func SeverityGTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeverity), v))
	})
}

// SeverityLT applies the LT predicate on the "severity" field.
func SeverityLT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeverity), v))
	})
}

// SeverityLTE applies the LTE predicate on the "severity" field.
func SeverityLTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeverity), v))
	})
}

// SeverityContains applies the Contains predicate on the "severity" field.
func SeverityContains(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSeverity), v))
	})
}

// SeverityHasPrefix applies the HasPrefix predicate on the "severity" field.
func SeverityHasPrefix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSeverity), v))
	})
}

// SeverityHasSuffix applies the HasSuffix predicate on the "severity" field.
func SeverityHasSuffix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSeverity), v))
	})
}

// SeverityIsNil applies the IsNil predicate on the "severity" field.
func SeverityIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSeverity)))
	})
}

// SeverityNotNil applies the NotNil predicate on the "severity" field.
func SeverityNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSeverity)))
	})
}

// SeverityEqualFold applies the EqualFold predicate on the "severity" field.
func SeverityEqualFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSeverity), v))
	})
}

// SeverityContainsFold applies the ContainsFold predicate on the "severity" field.
func SeverityContainsFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSeverity), v))
	})
}

// CvssIsNil applies the IsNil predicate on the "cvss" field.
func CvssIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCvss)))
	})
}

// CvssNotNil applies the NotNil predicate on the "cvss" field.
func CvssNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCvss)))
	})
}

// ReferencesIsNil applies the IsNil predicate on the "references" field.
func ReferencesIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReferences)))
	})
}

// ReferencesNotNil applies the NotNil predicate on the "references" field.
func ReferencesNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReferences)))
	})
}

// HasPackages applies the HasEdge predicate on the "packages" edge.
func HasPackages() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PackagesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PackagesTable, PackagesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagesWith applies the HasEdge predicate on the "packages" edge with a given conditions (other predicates).
func HasPackagesWith(preds ...predicate.PackageRecord) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PackagesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PackagesTable, PackagesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSev applies the HasEdge predicate on the "sev" edge.
func HasSev() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SevTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SevTable, SevColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSevWith applies the HasEdge predicate on the "sev" edge with a given conditions (other predicates).
func HasSevWith(preds ...predicate.Severity) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SevInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SevTable, SevColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vulnerability) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vulnerability) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vulnerability) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		p(s.Not())
	})
}
