// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/packagerecord"
	"github.com/m-mizutani/octovy/pkg/infra/ent/repository"
	"github.com/m-mizutani/octovy/pkg/infra/ent/scan"
)

// ScanCreate is the builder for creating a Scan entity.
type ScanCreate struct {
	config
	mutation *ScanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBranch sets the "branch" field.
func (sc *ScanCreate) SetBranch(s string) *ScanCreate {
	sc.mutation.SetBranch(s)
	return sc
}

// SetCommitID sets the "commit_id" field.
func (sc *ScanCreate) SetCommitID(s string) *ScanCreate {
	sc.mutation.SetCommitID(s)
	return sc
}

// SetRequestedAt sets the "requested_at" field.
func (sc *ScanCreate) SetRequestedAt(i int64) *ScanCreate {
	sc.mutation.SetRequestedAt(i)
	return sc
}

// SetScannedAt sets the "scanned_at" field.
func (sc *ScanCreate) SetScannedAt(i int64) *ScanCreate {
	sc.mutation.SetScannedAt(i)
	return sc
}

// SetCheckID sets the "check_id" field.
func (sc *ScanCreate) SetCheckID(i int64) *ScanCreate {
	sc.mutation.SetCheckID(i)
	return sc
}

// SetNillableCheckID sets the "check_id" field if the given value is not nil.
func (sc *ScanCreate) SetNillableCheckID(i *int64) *ScanCreate {
	if i != nil {
		sc.SetCheckID(*i)
	}
	return sc
}

// SetPullRequestTarget sets the "pull_request_target" field.
func (sc *ScanCreate) SetPullRequestTarget(s string) *ScanCreate {
	sc.mutation.SetPullRequestTarget(s)
	return sc
}

// SetNillablePullRequestTarget sets the "pull_request_target" field if the given value is not nil.
func (sc *ScanCreate) SetNillablePullRequestTarget(s *string) *ScanCreate {
	if s != nil {
		sc.SetPullRequestTarget(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScanCreate) SetID(s string) *ScanCreate {
	sc.mutation.SetID(s)
	return sc
}

// AddRepositoryIDs adds the "repository" edge to the Repository entity by IDs.
func (sc *ScanCreate) AddRepositoryIDs(ids ...int) *ScanCreate {
	sc.mutation.AddRepositoryIDs(ids...)
	return sc
}

// AddRepository adds the "repository" edges to the Repository entity.
func (sc *ScanCreate) AddRepository(r ...*Repository) *ScanCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddRepositoryIDs(ids...)
}

// AddPackageIDs adds the "packages" edge to the PackageRecord entity by IDs.
func (sc *ScanCreate) AddPackageIDs(ids ...int) *ScanCreate {
	sc.mutation.AddPackageIDs(ids...)
	return sc
}

// AddPackages adds the "packages" edges to the PackageRecord entity.
func (sc *ScanCreate) AddPackages(p ...*PackageRecord) *ScanCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPackageIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (sc *ScanCreate) Mutation() *ScanMutation {
	return sc.mutation
}

// Save creates the Scan in the database.
func (sc *ScanCreate) Save(ctx context.Context) (*Scan, error) {
	var (
		err  error
		node *Scan
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScanCreate) SaveX(ctx context.Context) *Scan {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScanCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScanCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScanCreate) check() error {
	if _, ok := sc.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required field "branch"`)}
	}
	if _, ok := sc.mutation.CommitID(); !ok {
		return &ValidationError{Name: "commit_id", err: errors.New(`ent: missing required field "commit_id"`)}
	}
	if _, ok := sc.mutation.RequestedAt(); !ok {
		return &ValidationError{Name: "requested_at", err: errors.New(`ent: missing required field "requested_at"`)}
	}
	if _, ok := sc.mutation.ScannedAt(); !ok {
		return &ValidationError{Name: "scanned_at", err: errors.New(`ent: missing required field "scanned_at"`)}
	}
	return nil
}

func (sc *ScanCreate) sqlSave(ctx context.Context) (*Scan, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(string)
	}
	return _node, nil
}

func (sc *ScanCreate) createSpec() (*Scan, *sqlgraph.CreateSpec) {
	var (
		_node = &Scan{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: scan.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Branch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scan.FieldBranch,
		})
		_node.Branch = value
	}
	if value, ok := sc.mutation.CommitID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scan.FieldCommitID,
		})
		_node.CommitID = value
	}
	if value, ok := sc.mutation.RequestedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scan.FieldRequestedAt,
		})
		_node.RequestedAt = value
	}
	if value, ok := sc.mutation.ScannedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scan.FieldScannedAt,
		})
		_node.ScannedAt = value
	}
	if value, ok := sc.mutation.CheckID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scan.FieldCheckID,
		})
		_node.CheckID = value
	}
	if value, ok := sc.mutation.PullRequestTarget(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scan.FieldPullRequestTarget,
		})
		_node.PullRequestTarget = value
	}
	if nodes := sc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scan.RepositoryTable,
			Columns: scan.RepositoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.PackagesTable,
			Columns: scan.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: packagerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scan.Create().
//		SetBranch(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScanUpsert) {
//			SetBranch(v+v).
//		}).
//		Exec(ctx)
//
func (sc *ScanCreate) OnConflict(opts ...sql.ConflictOption) *ScanUpsertOne {
	sc.conflict = opts
	return &ScanUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *ScanCreate) OnConflictColumns(columns ...string) *ScanUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScanUpsertOne{
		create: sc,
	}
}

type (
	// ScanUpsertOne is the builder for "upsert"-ing
	//  one Scan node.
	ScanUpsertOne struct {
		create *ScanCreate
	}

	// ScanUpsert is the "OnConflict" setter.
	ScanUpsert struct {
		*sql.UpdateSet
	}
)

// SetBranch sets the "branch" field.
func (u *ScanUpsert) SetBranch(v string) *ScanUpsert {
	u.Set(scan.FieldBranch, v)
	return u
}

// UpdateBranch sets the "branch" field to the value that was provided on create.
func (u *ScanUpsert) UpdateBranch() *ScanUpsert {
	u.SetExcluded(scan.FieldBranch)
	return u
}

// SetCommitID sets the "commit_id" field.
func (u *ScanUpsert) SetCommitID(v string) *ScanUpsert {
	u.Set(scan.FieldCommitID, v)
	return u
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *ScanUpsert) UpdateCommitID() *ScanUpsert {
	u.SetExcluded(scan.FieldCommitID)
	return u
}

// SetRequestedAt sets the "requested_at" field.
func (u *ScanUpsert) SetRequestedAt(v int64) *ScanUpsert {
	u.Set(scan.FieldRequestedAt, v)
	return u
}

// UpdateRequestedAt sets the "requested_at" field to the value that was provided on create.
func (u *ScanUpsert) UpdateRequestedAt() *ScanUpsert {
	u.SetExcluded(scan.FieldRequestedAt)
	return u
}

// SetScannedAt sets the "scanned_at" field.
func (u *ScanUpsert) SetScannedAt(v int64) *ScanUpsert {
	u.Set(scan.FieldScannedAt, v)
	return u
}

// UpdateScannedAt sets the "scanned_at" field to the value that was provided on create.
func (u *ScanUpsert) UpdateScannedAt() *ScanUpsert {
	u.SetExcluded(scan.FieldScannedAt)
	return u
}

// SetCheckID sets the "check_id" field.
func (u *ScanUpsert) SetCheckID(v int64) *ScanUpsert {
	u.Set(scan.FieldCheckID, v)
	return u
}

// UpdateCheckID sets the "check_id" field to the value that was provided on create.
func (u *ScanUpsert) UpdateCheckID() *ScanUpsert {
	u.SetExcluded(scan.FieldCheckID)
	return u
}

// ClearCheckID clears the value of the "check_id" field.
func (u *ScanUpsert) ClearCheckID() *ScanUpsert {
	u.SetNull(scan.FieldCheckID)
	return u
}

// SetPullRequestTarget sets the "pull_request_target" field.
func (u *ScanUpsert) SetPullRequestTarget(v string) *ScanUpsert {
	u.Set(scan.FieldPullRequestTarget, v)
	return u
}

// UpdatePullRequestTarget sets the "pull_request_target" field to the value that was provided on create.
func (u *ScanUpsert) UpdatePullRequestTarget() *ScanUpsert {
	u.SetExcluded(scan.FieldPullRequestTarget)
	return u
}

// ClearPullRequestTarget clears the value of the "pull_request_target" field.
func (u *ScanUpsert) ClearPullRequestTarget() *ScanUpsert {
	u.SetNull(scan.FieldPullRequestTarget)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scan.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ScanUpsertOne) UpdateNewValues() *ScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scan.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Scan.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ScanUpsertOne) Ignore() *ScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScanUpsertOne) DoNothing() *ScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScanCreate.OnConflict
// documentation for more info.
func (u *ScanUpsertOne) Update(set func(*ScanUpsert)) *ScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScanUpsert{UpdateSet: update})
	}))
	return u
}

// SetBranch sets the "branch" field.
func (u *ScanUpsertOne) SetBranch(v string) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetBranch(v)
	})
}

// UpdateBranch sets the "branch" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateBranch() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateBranch()
	})
}

// SetCommitID sets the "commit_id" field.
func (u *ScanUpsertOne) SetCommitID(v string) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetCommitID(v)
	})
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateCommitID() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateCommitID()
	})
}

// SetRequestedAt sets the "requested_at" field.
func (u *ScanUpsertOne) SetRequestedAt(v int64) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetRequestedAt(v)
	})
}

// UpdateRequestedAt sets the "requested_at" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateRequestedAt() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateRequestedAt()
	})
}

// SetScannedAt sets the "scanned_at" field.
func (u *ScanUpsertOne) SetScannedAt(v int64) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetScannedAt(v)
	})
}

// UpdateScannedAt sets the "scanned_at" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateScannedAt() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateScannedAt()
	})
}

// SetCheckID sets the "check_id" field.
func (u *ScanUpsertOne) SetCheckID(v int64) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetCheckID(v)
	})
}

// UpdateCheckID sets the "check_id" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateCheckID() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateCheckID()
	})
}

// ClearCheckID clears the value of the "check_id" field.
func (u *ScanUpsertOne) ClearCheckID() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.ClearCheckID()
	})
}

// SetPullRequestTarget sets the "pull_request_target" field.
func (u *ScanUpsertOne) SetPullRequestTarget(v string) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetPullRequestTarget(v)
	})
}

// UpdatePullRequestTarget sets the "pull_request_target" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdatePullRequestTarget() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdatePullRequestTarget()
	})
}

// ClearPullRequestTarget clears the value of the "pull_request_target" field.
func (u *ScanUpsertOne) ClearPullRequestTarget() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.ClearPullRequestTarget()
	})
}

// Exec executes the query.
func (u *ScanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScanUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ScanUpsertOne.ID is not supported by MySQL driver. Use ScanUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScanUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScanCreateBulk is the builder for creating many Scan entities in bulk.
type ScanCreateBulk struct {
	config
	builders []*ScanCreate
	conflict []sql.ConflictOption
}

// Save creates the Scan entities in the database.
func (scb *ScanCreateBulk) Save(ctx context.Context) ([]*Scan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scan, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScanCreateBulk) SaveX(ctx context.Context) []*Scan {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScanCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScanCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScanUpsert) {
//			SetBranch(v+v).
//		}).
//		Exec(ctx)
//
func (scb *ScanCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScanUpsertBulk {
	scb.conflict = opts
	return &ScanUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *ScanCreateBulk) OnConflictColumns(columns ...string) *ScanUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScanUpsertBulk{
		create: scb,
	}
}

// ScanUpsertBulk is the builder for "upsert"-ing
// a bulk of Scan nodes.
type ScanUpsertBulk struct {
	create *ScanCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scan.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ScanUpsertBulk) UpdateNewValues() *ScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scan.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ScanUpsertBulk) Ignore() *ScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScanUpsertBulk) DoNothing() *ScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScanCreateBulk.OnConflict
// documentation for more info.
func (u *ScanUpsertBulk) Update(set func(*ScanUpsert)) *ScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScanUpsert{UpdateSet: update})
	}))
	return u
}

// SetBranch sets the "branch" field.
func (u *ScanUpsertBulk) SetBranch(v string) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetBranch(v)
	})
}

// UpdateBranch sets the "branch" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateBranch() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateBranch()
	})
}

// SetCommitID sets the "commit_id" field.
func (u *ScanUpsertBulk) SetCommitID(v string) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetCommitID(v)
	})
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateCommitID() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateCommitID()
	})
}

// SetRequestedAt sets the "requested_at" field.
func (u *ScanUpsertBulk) SetRequestedAt(v int64) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetRequestedAt(v)
	})
}

// UpdateRequestedAt sets the "requested_at" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateRequestedAt() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateRequestedAt()
	})
}

// SetScannedAt sets the "scanned_at" field.
func (u *ScanUpsertBulk) SetScannedAt(v int64) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetScannedAt(v)
	})
}

// UpdateScannedAt sets the "scanned_at" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateScannedAt() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateScannedAt()
	})
}

// SetCheckID sets the "check_id" field.
func (u *ScanUpsertBulk) SetCheckID(v int64) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetCheckID(v)
	})
}

// UpdateCheckID sets the "check_id" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateCheckID() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateCheckID()
	})
}

// ClearCheckID clears the value of the "check_id" field.
func (u *ScanUpsertBulk) ClearCheckID() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.ClearCheckID()
	})
}

// SetPullRequestTarget sets the "pull_request_target" field.
func (u *ScanUpsertBulk) SetPullRequestTarget(v string) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetPullRequestTarget(v)
	})
}

// UpdatePullRequestTarget sets the "pull_request_target" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdatePullRequestTarget() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdatePullRequestTarget()
	})
}

// ClearPullRequestTarget clears the value of the "pull_request_target" field.
func (u *ScanUpsertBulk) ClearPullRequestTarget() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.ClearPullRequestTarget()
	})
}

// Exec executes the query.
func (u *ScanUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
