// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/domain/types"
	"github.com/m-mizutani/octovy/pkg/infra/ent/checkrule"
	"github.com/m-mizutani/octovy/pkg/infra/ent/severity"
)

// CheckRule is the model entity for the CheckRule schema.
type CheckRule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Result holds the value of the "result" field.
	Result types.GitHubCheckResult `json:"result,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckRuleQuery when eager-loading is set.
	Edges               CheckRuleEdges `json:"edges"`
	check_rule_severity *int
}

// CheckRuleEdges holds the relations/edges for other nodes in the graph.
type CheckRuleEdges struct {
	// Severity holds the value of the severity edge.
	Severity *Severity `json:"severity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SeverityOrErr returns the Severity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckRuleEdges) SeverityOrErr() (*Severity, error) {
	if e.loadedTypes[0] {
		if e.Severity == nil {
			// The edge severity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: severity.Label}
		}
		return e.Severity, nil
	}
	return nil, &NotLoadedError{edge: "severity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CheckRule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkrule.FieldID:
			values[i] = new(sql.NullInt64)
		case checkrule.FieldName, checkrule.FieldResult:
			values[i] = new(sql.NullString)
		case checkrule.ForeignKeys[0]: // check_rule_severity
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CheckRule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CheckRule fields.
func (cr *CheckRule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkrule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case checkrule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cr.Name = value.String
			}
		case checkrule.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				cr.Result = types.GitHubCheckResult(value.String)
			}
		case checkrule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field check_rule_severity", value)
			} else if value.Valid {
				cr.check_rule_severity = new(int)
				*cr.check_rule_severity = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySeverity queries the "severity" edge of the CheckRule entity.
func (cr *CheckRule) QuerySeverity() *SeverityQuery {
	return (&CheckRuleClient{config: cr.config}).QuerySeverity(cr)
}

// Update returns a builder for updating this CheckRule.
// Note that you need to call CheckRule.Unwrap() before calling this method if this CheckRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CheckRule) Update() *CheckRuleUpdateOne {
	return (&CheckRuleClient{config: cr.config}).UpdateOne(cr)
}

// Unwrap unwraps the CheckRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CheckRule) Unwrap() *CheckRule {
	tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CheckRule is not a transactional entity")
	}
	cr.config.driver = tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CheckRule) String() string {
	var builder strings.Builder
	builder.WriteString("CheckRule(")
	builder.WriteString(fmt.Sprintf("id=%v", cr.ID))
	builder.WriteString(", name=")
	builder.WriteString(cr.Name)
	builder.WriteString(", result=")
	builder.WriteString(fmt.Sprintf("%v", cr.Result))
	builder.WriteByte(')')
	return builder.String()
}

// CheckRules is a parsable slice of CheckRule.
type CheckRules []*CheckRule

func (cr CheckRules) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
