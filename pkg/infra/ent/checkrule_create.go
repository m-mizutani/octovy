// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/domain/types"
	"github.com/m-mizutani/octovy/pkg/infra/ent/checkrule"
	"github.com/m-mizutani/octovy/pkg/infra/ent/severity"
)

// CheckRuleCreate is the builder for creating a CheckRule entity.
type CheckRuleCreate struct {
	config
	mutation *CheckRuleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCheckResult sets the "check_result" field.
func (crc *CheckRuleCreate) SetCheckResult(thcr types.GitHubCheckResult) *CheckRuleCreate {
	crc.mutation.SetCheckResult(thcr)
	return crc
}

// SetSeverityID sets the "severity" edge to the Severity entity by ID.
func (crc *CheckRuleCreate) SetSeverityID(id int) *CheckRuleCreate {
	crc.mutation.SetSeverityID(id)
	return crc
}

// SetNillableSeverityID sets the "severity" edge to the Severity entity by ID if the given value is not nil.
func (crc *CheckRuleCreate) SetNillableSeverityID(id *int) *CheckRuleCreate {
	if id != nil {
		crc = crc.SetSeverityID(*id)
	}
	return crc
}

// SetSeverity sets the "severity" edge to the Severity entity.
func (crc *CheckRuleCreate) SetSeverity(s *Severity) *CheckRuleCreate {
	return crc.SetSeverityID(s.ID)
}

// Mutation returns the CheckRuleMutation object of the builder.
func (crc *CheckRuleCreate) Mutation() *CheckRuleMutation {
	return crc.mutation
}

// Save creates the CheckRule in the database.
func (crc *CheckRuleCreate) Save(ctx context.Context) (*CheckRule, error) {
	var (
		err  error
		node *CheckRule
	)
	if len(crc.hooks) == 0 {
		if err = crc.check(); err != nil {
			return nil, err
		}
		node, err = crc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = crc.check(); err != nil {
				return nil, err
			}
			crc.mutation = mutation
			if node, err = crc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(crc.hooks) - 1; i >= 0; i-- {
			if crc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = crc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, crc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CheckRuleCreate) SaveX(ctx context.Context) *CheckRule {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CheckRuleCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CheckRuleCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CheckRuleCreate) check() error {
	if _, ok := crc.mutation.CheckResult(); !ok {
		return &ValidationError{Name: "check_result", err: errors.New(`ent: missing required field "check_result"`)}
	}
	return nil
}

func (crc *CheckRuleCreate) sqlSave(ctx context.Context) (*CheckRule, error) {
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (crc *CheckRuleCreate) createSpec() (*CheckRule, *sqlgraph.CreateSpec) {
	var (
		_node = &CheckRule{config: crc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checkrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkrule.FieldID,
			},
		}
	)
	_spec.OnConflict = crc.conflict
	if value, ok := crc.mutation.CheckResult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkrule.FieldCheckResult,
		})
		_node.CheckResult = value
	}
	if nodes := crc.mutation.SeverityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checkrule.SeverityTable,
			Columns: []string{checkrule.SeverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.check_rule_severity = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CheckRule.Create().
//		SetCheckResult(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CheckRuleUpsert) {
//			SetCheckResult(v+v).
//		}).
//		Exec(ctx)
//
func (crc *CheckRuleCreate) OnConflict(opts ...sql.ConflictOption) *CheckRuleUpsertOne {
	crc.conflict = opts
	return &CheckRuleUpsertOne{
		create: crc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.CheckRule.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (crc *CheckRuleCreate) OnConflictColumns(columns ...string) *CheckRuleUpsertOne {
	crc.conflict = append(crc.conflict, sql.ConflictColumns(columns...))
	return &CheckRuleUpsertOne{
		create: crc,
	}
}

type (
	// CheckRuleUpsertOne is the builder for "upsert"-ing
	//  one CheckRule node.
	CheckRuleUpsertOne struct {
		create *CheckRuleCreate
	}

	// CheckRuleUpsert is the "OnConflict" setter.
	CheckRuleUpsert struct {
		*sql.UpdateSet
	}
)

// SetCheckResult sets the "check_result" field.
func (u *CheckRuleUpsert) SetCheckResult(v types.GitHubCheckResult) *CheckRuleUpsert {
	u.Set(checkrule.FieldCheckResult, v)
	return u
}

// UpdateCheckResult sets the "check_result" field to the value that was provided on create.
func (u *CheckRuleUpsert) UpdateCheckResult() *CheckRuleUpsert {
	u.SetExcluded(checkrule.FieldCheckResult)
	return u
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.CheckRule.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *CheckRuleUpsertOne) UpdateNewValues() *CheckRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CheckRule.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CheckRuleUpsertOne) Ignore() *CheckRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CheckRuleUpsertOne) DoNothing() *CheckRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CheckRuleCreate.OnConflict
// documentation for more info.
func (u *CheckRuleUpsertOne) Update(set func(*CheckRuleUpsert)) *CheckRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CheckRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCheckResult sets the "check_result" field.
func (u *CheckRuleUpsertOne) SetCheckResult(v types.GitHubCheckResult) *CheckRuleUpsertOne {
	return u.Update(func(s *CheckRuleUpsert) {
		s.SetCheckResult(v)
	})
}

// UpdateCheckResult sets the "check_result" field to the value that was provided on create.
func (u *CheckRuleUpsertOne) UpdateCheckResult() *CheckRuleUpsertOne {
	return u.Update(func(s *CheckRuleUpsert) {
		s.UpdateCheckResult()
	})
}

// Exec executes the query.
func (u *CheckRuleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CheckRuleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CheckRuleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CheckRuleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CheckRuleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CheckRuleCreateBulk is the builder for creating many CheckRule entities in bulk.
type CheckRuleCreateBulk struct {
	config
	builders []*CheckRuleCreate
	conflict []sql.ConflictOption
}

// Save creates the CheckRule entities in the database.
func (crcb *CheckRuleCreateBulk) Save(ctx context.Context) ([]*CheckRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CheckRule, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = crcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CheckRuleCreateBulk) SaveX(ctx context.Context) []*CheckRule {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CheckRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CheckRuleCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CheckRule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CheckRuleUpsert) {
//			SetCheckResult(v+v).
//		}).
//		Exec(ctx)
//
func (crcb *CheckRuleCreateBulk) OnConflict(opts ...sql.ConflictOption) *CheckRuleUpsertBulk {
	crcb.conflict = opts
	return &CheckRuleUpsertBulk{
		create: crcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//  client.CheckRule.Create().
//      OnConflict(sql.ConflictColumns(columns...)).
//      Exec(ctx)
//
func (crcb *CheckRuleCreateBulk) OnConflictColumns(columns ...string) *CheckRuleUpsertBulk {
	crcb.conflict = append(crcb.conflict, sql.ConflictColumns(columns...))
	return &CheckRuleUpsertBulk{
		create: crcb,
	}
}

// CheckRuleUpsertBulk is the builder for "upsert"-ing
// a bulk of CheckRule nodes.
type CheckRuleUpsertBulk struct {
	create *CheckRuleCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//  client.CheckRule.Create().
//      OnConflict(sql.ResolveWithNewValues()).
//      Exec(ctx)
//
func (u *CheckRuleUpsertBulk) UpdateNewValues() *CheckRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CheckRule.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CheckRuleUpsertBulk) Ignore() *CheckRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CheckRuleUpsertBulk) DoNothing() *CheckRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CheckRuleCreateBulk.OnConflict
// documentation for more info.
func (u *CheckRuleUpsertBulk) Update(set func(*CheckRuleUpsert)) *CheckRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CheckRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCheckResult sets the "check_result" field.
func (u *CheckRuleUpsertBulk) SetCheckResult(v types.GitHubCheckResult) *CheckRuleUpsertBulk {
	return u.Update(func(s *CheckRuleUpsert) {
		s.SetCheckResult(v)
	})
}

// UpdateCheckResult sets the "check_result" field to the value that was provided on create.
func (u *CheckRuleUpsertBulk) UpdateCheckResult() *CheckRuleUpsertBulk {
	return u.Update(func(s *CheckRuleUpsert) {
		s.UpdateCheckResult()
	})
}

// Exec executes the query.
func (u *CheckRuleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CheckRuleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CheckRuleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CheckRuleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
