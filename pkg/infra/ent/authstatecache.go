// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/infra/ent/authstatecache"
)

// AuthStateCache is the model entity for the AuthStateCache schema.
type AuthStateCache struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt int64 `json:"expires_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthStateCache) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case authstatecache.FieldExpiresAt:
			values[i] = new(sql.NullInt64)
		case authstatecache.FieldID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthStateCache", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthStateCache fields.
func (asc *AuthStateCache) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authstatecache.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				asc.ID = value.String
			}
		case authstatecache.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				asc.ExpiresAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AuthStateCache.
// Note that you need to call AuthStateCache.Unwrap() before calling this method if this AuthStateCache
// was returned from a transaction, and the transaction was committed or rolled back.
func (asc *AuthStateCache) Update() *AuthStateCacheUpdateOne {
	return (&AuthStateCacheClient{config: asc.config}).UpdateOne(asc)
}

// Unwrap unwraps the AuthStateCache entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (asc *AuthStateCache) Unwrap() *AuthStateCache {
	tx, ok := asc.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthStateCache is not a transactional entity")
	}
	asc.config.driver = tx.drv
	return asc
}

// String implements the fmt.Stringer.
func (asc *AuthStateCache) String() string {
	var builder strings.Builder
	builder.WriteString("AuthStateCache(")
	builder.WriteString(fmt.Sprintf("id=%v", asc.ID))
	builder.WriteString(", expires_at=")
	builder.WriteString(fmt.Sprintf("%v", asc.ExpiresAt))
	builder.WriteByte(')')
	return builder.String()
}

// AuthStateCaches is a parsable slice of AuthStateCache.
type AuthStateCaches []*AuthStateCache

func (asc AuthStateCaches) config(cfg config) {
	for _i := range asc {
		asc[_i].config = cfg
	}
}
