// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
	"github.com/m-mizutani/octovy/pkg/infra/ent/repository"
	"github.com/m-mizutani/octovy/pkg/infra/ent/scan"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnstatus"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ru *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetOwner sets the "owner" field.
func (ru *RepositoryUpdate) SetOwner(s string) *RepositoryUpdate {
	ru.mutation.SetOwner(s)
	return ru
}

// SetName sets the "name" field.
func (ru *RepositoryUpdate) SetName(s string) *RepositoryUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetInstallID sets the "install_id" field.
func (ru *RepositoryUpdate) SetInstallID(i int64) *RepositoryUpdate {
	ru.mutation.ResetInstallID()
	ru.mutation.SetInstallID(i)
	return ru
}

// SetNillableInstallID sets the "install_id" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableInstallID(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetInstallID(*i)
	}
	return ru
}

// AddInstallID adds i to the "install_id" field.
func (ru *RepositoryUpdate) AddInstallID(i int64) *RepositoryUpdate {
	ru.mutation.AddInstallID(i)
	return ru
}

// ClearInstallID clears the value of the "install_id" field.
func (ru *RepositoryUpdate) ClearInstallID() *RepositoryUpdate {
	ru.mutation.ClearInstallID()
	return ru
}

// SetURL sets the "url" field.
func (ru *RepositoryUpdate) SetURL(s string) *RepositoryUpdate {
	ru.mutation.SetURL(s)
	return ru
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetURL(*s)
	}
	return ru
}

// ClearURL clears the value of the "url" field.
func (ru *RepositoryUpdate) ClearURL() *RepositoryUpdate {
	ru.mutation.ClearURL()
	return ru
}

// SetAvatarURL sets the "avatar_url" field.
func (ru *RepositoryUpdate) SetAvatarURL(s string) *RepositoryUpdate {
	ru.mutation.SetAvatarURL(s)
	return ru
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableAvatarURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetAvatarURL(*s)
	}
	return ru
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (ru *RepositoryUpdate) ClearAvatarURL() *RepositoryUpdate {
	ru.mutation.ClearAvatarURL()
	return ru
}

// SetDefaultBranch sets the "default_branch" field.
func (ru *RepositoryUpdate) SetDefaultBranch(s string) *RepositoryUpdate {
	ru.mutation.SetDefaultBranch(s)
	return ru
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableDefaultBranch(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetDefaultBranch(*s)
	}
	return ru
}

// ClearDefaultBranch clears the value of the "default_branch" field.
func (ru *RepositoryUpdate) ClearDefaultBranch() *RepositoryUpdate {
	ru.mutation.ClearDefaultBranch()
	return ru
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (ru *RepositoryUpdate) AddScanIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.AddScanIDs(ids...)
	return ru
}

// AddScan adds the "scan" edges to the Scan entity.
func (ru *RepositoryUpdate) AddScan(s ...*Scan) *RepositoryUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddScanIDs(ids...)
}

// AddStatuIDs adds the "status" edge to the VulnStatus entity by IDs.
func (ru *RepositoryUpdate) AddStatuIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.AddStatuIDs(ids...)
	return ru
}

// AddStatus adds the "status" edges to the VulnStatus entity.
func (ru *RepositoryUpdate) AddStatus(v ...*VulnStatus) *RepositoryUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ru.AddStatuIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ru *RepositoryUpdate) Mutation() *RepositoryMutation {
	return ru.mutation
}

// ClearScan clears all "scan" edges to the Scan entity.
func (ru *RepositoryUpdate) ClearScan() *RepositoryUpdate {
	ru.mutation.ClearScan()
	return ru
}

// RemoveScanIDs removes the "scan" edge to Scan entities by IDs.
func (ru *RepositoryUpdate) RemoveScanIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.RemoveScanIDs(ids...)
	return ru
}

// RemoveScan removes "scan" edges to Scan entities.
func (ru *RepositoryUpdate) RemoveScan(s ...*Scan) *RepositoryUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveScanIDs(ids...)
}

// ClearStatus clears all "status" edges to the VulnStatus entity.
func (ru *RepositoryUpdate) ClearStatus() *RepositoryUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// RemoveStatuIDs removes the "status" edge to VulnStatus entities by IDs.
func (ru *RepositoryUpdate) RemoveStatuIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.RemoveStatuIDs(ids...)
	return ru
}

// RemoveStatus removes "status" edges to VulnStatus entities.
func (ru *RepositoryUpdate) RemoveStatus(v ...*VulnStatus) *RepositoryUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ru.RemoveStatuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepositoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repository.Table,
			Columns: repository.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repository.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldOwner,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldName,
		})
	}
	if value, ok := ru.mutation.InstallID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: repository.FieldInstallID,
		})
	}
	if value, ok := ru.mutation.AddedInstallID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: repository.FieldInstallID,
		})
	}
	if ru.mutation.InstallIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: repository.FieldInstallID,
		})
	}
	if value, ok := ru.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldURL,
		})
	}
	if ru.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: repository.FieldURL,
		})
	}
	if value, ok := ru.mutation.AvatarURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldAvatarURL,
		})
	}
	if ru.mutation.AvatarURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: repository.FieldAvatarURL,
		})
	}
	if value, ok := ru.mutation.DefaultBranch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldDefaultBranch,
		})
	}
	if ru.mutation.DefaultBranchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: repository.FieldDefaultBranch,
		})
	}
	if ru.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.ScanTable,
			Columns: repository.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedScanIDs(); len(nodes) > 0 && !ru.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.ScanTable,
			Columns: repository.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.ScanTable,
			Columns: repository.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.StatusTable,
			Columns: []string{repository.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vulnstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedStatusIDs(); len(nodes) > 0 && !ru.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.StatusTable,
			Columns: []string{repository.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.StatusTable,
			Columns: []string{repository.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetOwner sets the "owner" field.
func (ruo *RepositoryUpdateOne) SetOwner(s string) *RepositoryUpdateOne {
	ruo.mutation.SetOwner(s)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RepositoryUpdateOne) SetName(s string) *RepositoryUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetInstallID sets the "install_id" field.
func (ruo *RepositoryUpdateOne) SetInstallID(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetInstallID()
	ruo.mutation.SetInstallID(i)
	return ruo
}

// SetNillableInstallID sets the "install_id" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableInstallID(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetInstallID(*i)
	}
	return ruo
}

// AddInstallID adds i to the "install_id" field.
func (ruo *RepositoryUpdateOne) AddInstallID(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddInstallID(i)
	return ruo
}

// ClearInstallID clears the value of the "install_id" field.
func (ruo *RepositoryUpdateOne) ClearInstallID() *RepositoryUpdateOne {
	ruo.mutation.ClearInstallID()
	return ruo
}

// SetURL sets the "url" field.
func (ruo *RepositoryUpdateOne) SetURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetURL(s)
	return ruo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetURL(*s)
	}
	return ruo
}

// ClearURL clears the value of the "url" field.
func (ruo *RepositoryUpdateOne) ClearURL() *RepositoryUpdateOne {
	ruo.mutation.ClearURL()
	return ruo
}

// SetAvatarURL sets the "avatar_url" field.
func (ruo *RepositoryUpdateOne) SetAvatarURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetAvatarURL(s)
	return ruo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableAvatarURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetAvatarURL(*s)
	}
	return ruo
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (ruo *RepositoryUpdateOne) ClearAvatarURL() *RepositoryUpdateOne {
	ruo.mutation.ClearAvatarURL()
	return ruo
}

// SetDefaultBranch sets the "default_branch" field.
func (ruo *RepositoryUpdateOne) SetDefaultBranch(s string) *RepositoryUpdateOne {
	ruo.mutation.SetDefaultBranch(s)
	return ruo
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableDefaultBranch(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetDefaultBranch(*s)
	}
	return ruo
}

// ClearDefaultBranch clears the value of the "default_branch" field.
func (ruo *RepositoryUpdateOne) ClearDefaultBranch() *RepositoryUpdateOne {
	ruo.mutation.ClearDefaultBranch()
	return ruo
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (ruo *RepositoryUpdateOne) AddScanIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.AddScanIDs(ids...)
	return ruo
}

// AddScan adds the "scan" edges to the Scan entity.
func (ruo *RepositoryUpdateOne) AddScan(s ...*Scan) *RepositoryUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddScanIDs(ids...)
}

// AddStatuIDs adds the "status" edge to the VulnStatus entity by IDs.
func (ruo *RepositoryUpdateOne) AddStatuIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.AddStatuIDs(ids...)
	return ruo
}

// AddStatus adds the "status" edges to the VulnStatus entity.
func (ruo *RepositoryUpdateOne) AddStatus(v ...*VulnStatus) *RepositoryUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ruo.AddStatuIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ruo *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return ruo.mutation
}

// ClearScan clears all "scan" edges to the Scan entity.
func (ruo *RepositoryUpdateOne) ClearScan() *RepositoryUpdateOne {
	ruo.mutation.ClearScan()
	return ruo
}

// RemoveScanIDs removes the "scan" edge to Scan entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveScanIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.RemoveScanIDs(ids...)
	return ruo
}

// RemoveScan removes "scan" edges to Scan entities.
func (ruo *RepositoryUpdateOne) RemoveScan(s ...*Scan) *RepositoryUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveScanIDs(ids...)
}

// ClearStatus clears all "status" edges to the VulnStatus entity.
func (ruo *RepositoryUpdateOne) ClearStatus() *RepositoryUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// RemoveStatuIDs removes the "status" edge to VulnStatus entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveStatuIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.RemoveStatuIDs(ids...)
	return ruo
}

// RemoveStatus removes "status" edges to VulnStatus entities.
func (ruo *RepositoryUpdateOne) RemoveStatus(v ...*VulnStatus) *RepositoryUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ruo.RemoveStatuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repository entity.
func (ruo *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	var (
		err  error
		node *Repository
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepositoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repository.Table,
			Columns: repository.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repository.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Repository.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldOwner,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldName,
		})
	}
	if value, ok := ruo.mutation.InstallID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: repository.FieldInstallID,
		})
	}
	if value, ok := ruo.mutation.AddedInstallID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: repository.FieldInstallID,
		})
	}
	if ruo.mutation.InstallIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: repository.FieldInstallID,
		})
	}
	if value, ok := ruo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldURL,
		})
	}
	if ruo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: repository.FieldURL,
		})
	}
	if value, ok := ruo.mutation.AvatarURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldAvatarURL,
		})
	}
	if ruo.mutation.AvatarURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: repository.FieldAvatarURL,
		})
	}
	if value, ok := ruo.mutation.DefaultBranch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldDefaultBranch,
		})
	}
	if ruo.mutation.DefaultBranchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: repository.FieldDefaultBranch,
		})
	}
	if ruo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.ScanTable,
			Columns: repository.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedScanIDs(); len(nodes) > 0 && !ruo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.ScanTable,
			Columns: repository.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.ScanTable,
			Columns: repository.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.StatusTable,
			Columns: []string{repository.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vulnstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedStatusIDs(); len(nodes) > 0 && !ruo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.StatusTable,
			Columns: []string{repository.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.StatusTable,
			Columns: []string{repository.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vulnstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
