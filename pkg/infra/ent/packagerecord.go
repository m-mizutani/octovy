// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/domain/types"
	"github.com/m-mizutani/octovy/pkg/infra/ent/packagerecord"
)

// PackageRecord is the model entity for the PackageRecord schema.
type PackageRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type types.PkgType `json:"type,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// VulnIds holds the value of the "vuln_ids" field.
	VulnIds []string `json:"vuln_ids,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackageRecordQuery when eager-loading is set.
	Edges PackageRecordEdges `json:"edges"`
}

// PackageRecordEdges holds the relations/edges for other nodes in the graph.
type PackageRecordEdges struct {
	// Scan holds the value of the scan edge.
	Scan []*Scan `json:"scan,omitempty"`
	// Vulnerabilities holds the value of the vulnerabilities edge.
	Vulnerabilities []*Vulnerability `json:"vulnerabilities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ScanOrErr returns the Scan value or an error if the edge
// was not loaded in eager-loading.
func (e PackageRecordEdges) ScanOrErr() ([]*Scan, error) {
	if e.loadedTypes[0] {
		return e.Scan, nil
	}
	return nil, &NotLoadedError{edge: "scan"}
}

// VulnerabilitiesOrErr returns the Vulnerabilities value or an error if the edge
// was not loaded in eager-loading.
func (e PackageRecordEdges) VulnerabilitiesOrErr() ([]*Vulnerability, error) {
	if e.loadedTypes[1] {
		return e.Vulnerabilities, nil
	}
	return nil, &NotLoadedError{edge: "vulnerabilities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackageRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case packagerecord.FieldVulnIds:
			values[i] = new([]byte)
		case packagerecord.FieldID:
			values[i] = new(sql.NullInt64)
		case packagerecord.FieldType, packagerecord.FieldSource, packagerecord.FieldName, packagerecord.FieldVersion:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PackageRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackageRecord fields.
func (pr *PackageRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packagerecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case packagerecord.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = types.PkgType(value.String)
			}
		case packagerecord.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				pr.Source = value.String
			}
		case packagerecord.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case packagerecord.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pr.Version = value.String
			}
		case packagerecord.FieldVulnIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vuln_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.VulnIds); err != nil {
					return fmt.Errorf("unmarshal field vuln_ids: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryScan queries the "scan" edge of the PackageRecord entity.
func (pr *PackageRecord) QueryScan() *ScanQuery {
	return (&PackageRecordClient{config: pr.config}).QueryScan(pr)
}

// QueryVulnerabilities queries the "vulnerabilities" edge of the PackageRecord entity.
func (pr *PackageRecord) QueryVulnerabilities() *VulnerabilityQuery {
	return (&PackageRecordClient{config: pr.config}).QueryVulnerabilities(pr)
}

// Update returns a builder for updating this PackageRecord.
// Note that you need to call PackageRecord.Unwrap() before calling this method if this PackageRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PackageRecord) Update() *PackageRecordUpdateOne {
	return (&PackageRecordClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the PackageRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PackageRecord) Unwrap() *PackageRecord {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackageRecord is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PackageRecord) String() string {
	var builder strings.Builder
	builder.WriteString("PackageRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteString(", source=")
	builder.WriteString(pr.Source)
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", version=")
	builder.WriteString(pr.Version)
	builder.WriteString(", vuln_ids=")
	builder.WriteString(fmt.Sprintf("%v", pr.VulnIds))
	builder.WriteByte(')')
	return builder.String()
}

// PackageRecords is a parsable slice of PackageRecord.
type PackageRecords []*PackageRecord

func (pr PackageRecords) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
