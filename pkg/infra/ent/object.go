// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/infra/ent/object"
)

// Object is the model entity for the Object schema.
type Object struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	// Identifiable key of the object in same resource
	Key string `json:"key,omitempty"`
	// Name holds the value of the "name" field.
	// Human readable name of the object
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ObjectQuery when eager-loading is set.
	Edges ObjectEdges `json:"edges"`
}

// ObjectEdges holds the relations/edges for other nodes in the graph.
type ObjectEdges struct {
	// Vulnerabilities holds the value of the vulnerabilities edge.
	Vulnerabilities []*Vulnerability `json:"vulnerabilities,omitempty"`
	// Report holds the value of the report edge.
	Report []*Report `json:"report,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VulnerabilitiesOrErr returns the Vulnerabilities value or an error if the edge
// was not loaded in eager-loading.
func (e ObjectEdges) VulnerabilitiesOrErr() ([]*Vulnerability, error) {
	if e.loadedTypes[0] {
		return e.Vulnerabilities, nil
	}
	return nil, &NotLoadedError{edge: "vulnerabilities"}
}

// ReportOrErr returns the Report value or an error if the edge
// was not loaded in eager-loading.
func (e ObjectEdges) ReportOrErr() ([]*Report, error) {
	if e.loadedTypes[1] {
		return e.Report, nil
	}
	return nil, &NotLoadedError{edge: "report"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Object) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case object.FieldID:
			values[i] = new(sql.NullInt64)
		case object.FieldKey, object.FieldName, object.FieldDescription, object.FieldVersion:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Object", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Object fields.
func (o *Object) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case object.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case object.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				o.Key = value.String
			}
		case object.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case object.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				o.Description = value.String
			}
		case object.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				o.Version = value.String
			}
		}
	}
	return nil
}

// QueryVulnerabilities queries the "vulnerabilities" edge of the Object entity.
func (o *Object) QueryVulnerabilities() *VulnerabilityQuery {
	return (&ObjectClient{config: o.config}).QueryVulnerabilities(o)
}

// QueryReport queries the "report" edge of the Object entity.
func (o *Object) QueryReport() *ReportQuery {
	return (&ObjectClient{config: o.config}).QueryReport(o)
}

// Update returns a builder for updating this Object.
// Note that you need to call Object.Unwrap() before calling this method if this Object
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Object) Update() *ObjectUpdateOne {
	return (&ObjectClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Object entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Object) Unwrap() *Object {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Object is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Object) String() string {
	var builder strings.Builder
	builder.WriteString("Object(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", key=")
	builder.WriteString(o.Key)
	builder.WriteString(", name=")
	builder.WriteString(o.Name)
	builder.WriteString(", description=")
	builder.WriteString(o.Description)
	builder.WriteString(", version=")
	builder.WriteString(o.Version)
	builder.WriteByte(')')
	return builder.String()
}

// Objects is a parsable slice of Object.
type Objects []*Object

func (o Objects) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
