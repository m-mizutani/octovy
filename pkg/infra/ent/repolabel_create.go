// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/repolabel"
	"github.com/m-mizutani/octovy/pkg/infra/ent/repository"
)

// RepoLabelCreate is the builder for creating a RepoLabel entity.
type RepoLabelCreate struct {
	config
	mutation *RepoLabelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (rlc *RepoLabelCreate) SetName(s string) *RepoLabelCreate {
	rlc.mutation.SetName(s)
	return rlc
}

// AddRepoIDs adds the "repos" edge to the Repository entity by IDs.
func (rlc *RepoLabelCreate) AddRepoIDs(ids ...int) *RepoLabelCreate {
	rlc.mutation.AddRepoIDs(ids...)
	return rlc
}

// AddRepos adds the "repos" edges to the Repository entity.
func (rlc *RepoLabelCreate) AddRepos(r ...*Repository) *RepoLabelCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rlc.AddRepoIDs(ids...)
}

// Mutation returns the RepoLabelMutation object of the builder.
func (rlc *RepoLabelCreate) Mutation() *RepoLabelMutation {
	return rlc.mutation
}

// Save creates the RepoLabel in the database.
func (rlc *RepoLabelCreate) Save(ctx context.Context) (*RepoLabel, error) {
	var (
		err  error
		node *RepoLabel
	)
	if len(rlc.hooks) == 0 {
		if err = rlc.check(); err != nil {
			return nil, err
		}
		node, err = rlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepoLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rlc.check(); err != nil {
				return nil, err
			}
			rlc.mutation = mutation
			if node, err = rlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rlc.hooks) - 1; i >= 0; i-- {
			if rlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rlc *RepoLabelCreate) SaveX(ctx context.Context) *RepoLabel {
	v, err := rlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlc *RepoLabelCreate) Exec(ctx context.Context) error {
	_, err := rlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlc *RepoLabelCreate) ExecX(ctx context.Context) {
	if err := rlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rlc *RepoLabelCreate) check() error {
	if _, ok := rlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	return nil
}

func (rlc *RepoLabelCreate) sqlSave(ctx context.Context) (*RepoLabel, error) {
	_node, _spec := rlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rlc *RepoLabelCreate) createSpec() (*RepoLabel, *sqlgraph.CreateSpec) {
	var (
		_node = &RepoLabel{config: rlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: repolabel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repolabel.FieldID,
			},
		}
	)
	_spec.OnConflict = rlc.conflict
	if value, ok := rlc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repolabel.FieldName,
		})
		_node.Name = value
	}
	if nodes := rlc.mutation.ReposIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repolabel.ReposTable,
			Columns: repolabel.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RepoLabel.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RepoLabelUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (rlc *RepoLabelCreate) OnConflict(opts ...sql.ConflictOption) *RepoLabelUpsertOne {
	rlc.conflict = opts
	return &RepoLabelUpsertOne{
		create: rlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RepoLabel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rlc *RepoLabelCreate) OnConflictColumns(columns ...string) *RepoLabelUpsertOne {
	rlc.conflict = append(rlc.conflict, sql.ConflictColumns(columns...))
	return &RepoLabelUpsertOne{
		create: rlc,
	}
}

type (
	// RepoLabelUpsertOne is the builder for "upsert"-ing
	//  one RepoLabel node.
	RepoLabelUpsertOne struct {
		create *RepoLabelCreate
	}

	// RepoLabelUpsert is the "OnConflict" setter.
	RepoLabelUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *RepoLabelUpsert) SetName(v string) *RepoLabelUpsert {
	u.Set(repolabel.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepoLabelUpsert) UpdateName() *RepoLabelUpsert {
	u.SetExcluded(repolabel.FieldName)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RepoLabel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *RepoLabelUpsertOne) UpdateNewValues() *RepoLabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.RepoLabel.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RepoLabelUpsertOne) Ignore() *RepoLabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RepoLabelUpsertOne) DoNothing() *RepoLabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RepoLabelCreate.OnConflict
// documentation for more info.
func (u *RepoLabelUpsertOne) Update(set func(*RepoLabelUpsert)) *RepoLabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RepoLabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RepoLabelUpsertOne) SetName(v string) *RepoLabelUpsertOne {
	return u.Update(func(s *RepoLabelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepoLabelUpsertOne) UpdateName() *RepoLabelUpsertOne {
	return u.Update(func(s *RepoLabelUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *RepoLabelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RepoLabelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RepoLabelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RepoLabelUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RepoLabelUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RepoLabelCreateBulk is the builder for creating many RepoLabel entities in bulk.
type RepoLabelCreateBulk struct {
	config
	builders []*RepoLabelCreate
	conflict []sql.ConflictOption
}

// Save creates the RepoLabel entities in the database.
func (rlcb *RepoLabelCreateBulk) Save(ctx context.Context) ([]*RepoLabel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rlcb.builders))
	nodes := make([]*RepoLabel, len(rlcb.builders))
	mutators := make([]Mutator, len(rlcb.builders))
	for i := range rlcb.builders {
		func(i int, root context.Context) {
			builder := rlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepoLabelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rlcb *RepoLabelCreateBulk) SaveX(ctx context.Context) []*RepoLabel {
	v, err := rlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlcb *RepoLabelCreateBulk) Exec(ctx context.Context) error {
	_, err := rlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlcb *RepoLabelCreateBulk) ExecX(ctx context.Context) {
	if err := rlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RepoLabel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RepoLabelUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (rlcb *RepoLabelCreateBulk) OnConflict(opts ...sql.ConflictOption) *RepoLabelUpsertBulk {
	rlcb.conflict = opts
	return &RepoLabelUpsertBulk{
		create: rlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RepoLabel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rlcb *RepoLabelCreateBulk) OnConflictColumns(columns ...string) *RepoLabelUpsertBulk {
	rlcb.conflict = append(rlcb.conflict, sql.ConflictColumns(columns...))
	return &RepoLabelUpsertBulk{
		create: rlcb,
	}
}

// RepoLabelUpsertBulk is the builder for "upsert"-ing
// a bulk of RepoLabel nodes.
type RepoLabelUpsertBulk struct {
	create *RepoLabelCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RepoLabel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *RepoLabelUpsertBulk) UpdateNewValues() *RepoLabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RepoLabel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RepoLabelUpsertBulk) Ignore() *RepoLabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RepoLabelUpsertBulk) DoNothing() *RepoLabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RepoLabelCreateBulk.OnConflict
// documentation for more info.
func (u *RepoLabelUpsertBulk) Update(set func(*RepoLabelUpsert)) *RepoLabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RepoLabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RepoLabelUpsertBulk) SetName(v string) *RepoLabelUpsertBulk {
	return u.Update(func(s *RepoLabelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepoLabelUpsertBulk) UpdateName() *RepoLabelUpsertBulk {
	return u.Update(func(s *RepoLabelUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *RepoLabelUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RepoLabelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RepoLabelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RepoLabelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
