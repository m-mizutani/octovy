// Code generated by entc, DO NOT EDIT.

package vulnstatus

import (
	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/octovy/pkg/domain/types"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// VulnID applies equality check predicate on the "vuln_id" field. It's identical to VulnIDEQ.
func VulnID(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVulnID), v))
	})
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiresAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v types.VulnStatusType) predicate.VulnStatus {
	vc := v
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), vc))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v types.VulnStatusType) predicate.VulnStatus {
	vc := v
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), vc))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...types.VulnStatusType) predicate.VulnStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...types.VulnStatusType) predicate.VulnStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// VulnIDEQ applies the EQ predicate on the "vuln_id" field.
func VulnIDEQ(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVulnID), v))
	})
}

// VulnIDNEQ applies the NEQ predicate on the "vuln_id" field.
func VulnIDNEQ(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVulnID), v))
	})
}

// VulnIDIn applies the In predicate on the "vuln_id" field.
func VulnIDIn(vs ...string) predicate.VulnStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVulnID), v...))
	})
}

// VulnIDNotIn applies the NotIn predicate on the "vuln_id" field.
func VulnIDNotIn(vs ...string) predicate.VulnStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVulnID), v...))
	})
}

// VulnIDGT applies the GT predicate on the "vuln_id" field.
func VulnIDGT(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVulnID), v))
	})
}

// VulnIDGTE applies the GTE predicate on the "vuln_id" field.
func VulnIDGTE(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVulnID), v))
	})
}

// VulnIDLT applies the LT predicate on the "vuln_id" field.
func VulnIDLT(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVulnID), v))
	})
}

// VulnIDLTE applies the LTE predicate on the "vuln_id" field.
func VulnIDLTE(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVulnID), v))
	})
}

// VulnIDContains applies the Contains predicate on the "vuln_id" field.
func VulnIDContains(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVulnID), v))
	})
}

// VulnIDHasPrefix applies the HasPrefix predicate on the "vuln_id" field.
func VulnIDHasPrefix(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVulnID), v))
	})
}

// VulnIDHasSuffix applies the HasSuffix predicate on the "vuln_id" field.
func VulnIDHasSuffix(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVulnID), v))
	})
}

// VulnIDEqualFold applies the EqualFold predicate on the "vuln_id" field.
func VulnIDEqualFold(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVulnID), v))
	})
}

// VulnIDContainsFold applies the ContainsFold predicate on the "vuln_id" field.
func VulnIDContainsFold(v string) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVulnID), v))
	})
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...int64) predicate.VulnStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiresAt), v...))
	})
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...int64) predicate.VulnStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiresAt), v...))
	})
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiresAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.VulnStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.VulnStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VulnStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VulnStatus) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VulnStatus) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VulnStatus) predicate.VulnStatus {
	return predicate.VulnStatus(func(s *sql.Selector) {
		p(s.Not())
	})
}
