// Code generated by entc, DO NOT EDIT.

package vulnstatus

import (
	"fmt"

	"github.com/m-mizutani/octovy/pkg/domain/types"
)

const (
	// Label holds the string label denoting the vulnstatus type in the database.
	Label = "vuln_status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldPkgName holds the string denoting the pkg_name field in the database.
	FieldPkgName = "pkg_name"
	// FieldPkgType holds the string denoting the pkg_type field in the database.
	FieldPkgType = "pkg_type"
	// FieldVulnID holds the string denoting the vuln_id field in the database.
	FieldVulnID = "vuln_id"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// Table holds the table name of the vulnstatus in the database.
	Table = "vuln_status"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "vuln_status"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "vuln_status_author"
)

// Columns holds all SQL columns for vulnstatus fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldSource,
	FieldPkgName,
	FieldPkgType,
	FieldVulnID,
	FieldExpiresAt,
	FieldCreatedAt,
	FieldComment,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vuln_status"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_edited_status",
	"vuln_status_author",
	"vuln_status_index_status",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s types.VulnStatusType) error {
	switch s {
	case "none", "snoozed", "mitigated", "unaffected", "fixed":
		return nil
	default:
		return fmt.Errorf("vulnstatus: invalid enum value for status field: %q", s)
	}
}
