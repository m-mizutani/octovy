// Code generated by entc, DO NOT EDIT.

package vulnstatus

import (
	"fmt"

	"github.com/m-mizutani/octovy/pkg/domain/types"
)

const (
	// Label holds the string label denoting the vulnstatus type in the database.
	Label = "vuln_status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldVulnID holds the string denoting the vuln_id field in the database.
	FieldVulnID = "vuln_id"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the vulnstatus in the database.
	Table = "vuln_status"
)

// Columns holds all SQL columns for vulnstatus fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldVulnID,
	FieldExpiresAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vuln_status"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"package_record_status",
	"vulnerability_status",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s types.VulnStatusType) error {
	switch s {
	case "none", "snoozed", "mitigated", "unaffected", "fixed":
		return nil
	default:
		return fmt.Errorf("vulnstatus: invalid enum value for status field: %q", s)
	}
}
