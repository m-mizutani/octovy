// Code generated by entc, DO NOT EDIT.

package report

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/m-mizutani/octovy/pkg/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Scanner applies equality check predicate on the "scanner" field. It's identical to ScannerEQ.
func Scanner(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScanner), v))
	})
}

// ResourceType applies equality check predicate on the "resource_type" field. It's identical to ResourceTypeEQ.
func ResourceType(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceType), v))
	})
}

// ResourceName applies equality check predicate on the "resource_name" field. It's identical to ResourceNameEQ.
func ResourceName(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceName), v))
	})
}

// ScannedAt applies equality check predicate on the "scanned_at" field. It's identical to ScannedAtEQ.
func ScannedAt(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScannedAt), v))
	})
}

// RequestedAt applies equality check predicate on the "requested_at" field. It's identical to RequestedAtEQ.
func RequestedAt(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestedAt), v))
	})
}

// ScannerEQ applies the EQ predicate on the "scanner" field.
func ScannerEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScanner), v))
	})
}

// ScannerNEQ applies the NEQ predicate on the "scanner" field.
func ScannerNEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScanner), v))
	})
}

// ScannerIn applies the In predicate on the "scanner" field.
func ScannerIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScanner), v...))
	})
}

// ScannerNotIn applies the NotIn predicate on the "scanner" field.
func ScannerNotIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScanner), v...))
	})
}

// ScannerGT applies the GT predicate on the "scanner" field.
func ScannerGT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScanner), v))
	})
}

// ScannerGTE applies the GTE predicate on the "scanner" field.
func ScannerGTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScanner), v))
	})
}

// ScannerLT applies the LT predicate on the "scanner" field.
func ScannerLT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScanner), v))
	})
}

// ScannerLTE applies the LTE predicate on the "scanner" field.
func ScannerLTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScanner), v))
	})
}

// ScannerContains applies the Contains predicate on the "scanner" field.
func ScannerContains(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldScanner), v))
	})
}

// ScannerHasPrefix applies the HasPrefix predicate on the "scanner" field.
func ScannerHasPrefix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldScanner), v))
	})
}

// ScannerHasSuffix applies the HasSuffix predicate on the "scanner" field.
func ScannerHasSuffix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldScanner), v))
	})
}

// ScannerEqualFold applies the EqualFold predicate on the "scanner" field.
func ScannerEqualFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldScanner), v))
	})
}

// ScannerContainsFold applies the ContainsFold predicate on the "scanner" field.
func ScannerContainsFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldScanner), v))
	})
}

// ResourceTypeEQ applies the EQ predicate on the "resource_type" field.
func ResourceTypeEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceType), v))
	})
}

// ResourceTypeNEQ applies the NEQ predicate on the "resource_type" field.
func ResourceTypeNEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourceType), v))
	})
}

// ResourceTypeIn applies the In predicate on the "resource_type" field.
func ResourceTypeIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResourceType), v...))
	})
}

// ResourceTypeNotIn applies the NotIn predicate on the "resource_type" field.
func ResourceTypeNotIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResourceType), v...))
	})
}

// ResourceTypeGT applies the GT predicate on the "resource_type" field.
func ResourceTypeGT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResourceType), v))
	})
}

// ResourceTypeGTE applies the GTE predicate on the "resource_type" field.
func ResourceTypeGTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResourceType), v))
	})
}

// ResourceTypeLT applies the LT predicate on the "resource_type" field.
func ResourceTypeLT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResourceType), v))
	})
}

// ResourceTypeLTE applies the LTE predicate on the "resource_type" field.
func ResourceTypeLTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResourceType), v))
	})
}

// ResourceTypeContains applies the Contains predicate on the "resource_type" field.
func ResourceTypeContains(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResourceType), v))
	})
}

// ResourceTypeHasPrefix applies the HasPrefix predicate on the "resource_type" field.
func ResourceTypeHasPrefix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResourceType), v))
	})
}

// ResourceTypeHasSuffix applies the HasSuffix predicate on the "resource_type" field.
func ResourceTypeHasSuffix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResourceType), v))
	})
}

// ResourceTypeEqualFold applies the EqualFold predicate on the "resource_type" field.
func ResourceTypeEqualFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResourceType), v))
	})
}

// ResourceTypeContainsFold applies the ContainsFold predicate on the "resource_type" field.
func ResourceTypeContainsFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResourceType), v))
	})
}

// ResourceNameEQ applies the EQ predicate on the "resource_name" field.
func ResourceNameEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceName), v))
	})
}

// ResourceNameNEQ applies the NEQ predicate on the "resource_name" field.
func ResourceNameNEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourceName), v))
	})
}

// ResourceNameIn applies the In predicate on the "resource_name" field.
func ResourceNameIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResourceName), v...))
	})
}

// ResourceNameNotIn applies the NotIn predicate on the "resource_name" field.
func ResourceNameNotIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResourceName), v...))
	})
}

// ResourceNameGT applies the GT predicate on the "resource_name" field.
func ResourceNameGT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResourceName), v))
	})
}

// ResourceNameGTE applies the GTE predicate on the "resource_name" field.
func ResourceNameGTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResourceName), v))
	})
}

// ResourceNameLT applies the LT predicate on the "resource_name" field.
func ResourceNameLT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResourceName), v))
	})
}

// ResourceNameLTE applies the LTE predicate on the "resource_name" field.
func ResourceNameLTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResourceName), v))
	})
}

// ResourceNameContains applies the Contains predicate on the "resource_name" field.
func ResourceNameContains(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResourceName), v))
	})
}

// ResourceNameHasPrefix applies the HasPrefix predicate on the "resource_name" field.
func ResourceNameHasPrefix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResourceName), v))
	})
}

// ResourceNameHasSuffix applies the HasSuffix predicate on the "resource_name" field.
func ResourceNameHasSuffix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResourceName), v))
	})
}

// ResourceNameEqualFold applies the EqualFold predicate on the "resource_name" field.
func ResourceNameEqualFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResourceName), v))
	})
}

// ResourceNameContainsFold applies the ContainsFold predicate on the "resource_name" field.
func ResourceNameContainsFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResourceName), v))
	})
}

// ScannedAtEQ applies the EQ predicate on the "scanned_at" field.
func ScannedAtEQ(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScannedAt), v))
	})
}

// ScannedAtNEQ applies the NEQ predicate on the "scanned_at" field.
func ScannedAtNEQ(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScannedAt), v))
	})
}

// ScannedAtIn applies the In predicate on the "scanned_at" field.
func ScannedAtIn(vs ...int64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScannedAt), v...))
	})
}

// ScannedAtNotIn applies the NotIn predicate on the "scanned_at" field.
func ScannedAtNotIn(vs ...int64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScannedAt), v...))
	})
}

// ScannedAtGT applies the GT predicate on the "scanned_at" field.
func ScannedAtGT(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScannedAt), v))
	})
}

// ScannedAtGTE applies the GTE predicate on the "scanned_at" field.
func ScannedAtGTE(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScannedAt), v))
	})
}

// ScannedAtLT applies the LT predicate on the "scanned_at" field.
func ScannedAtLT(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScannedAt), v))
	})
}

// ScannedAtLTE applies the LTE predicate on the "scanned_at" field.
func ScannedAtLTE(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScannedAt), v))
	})
}

// RequestedAtEQ applies the EQ predicate on the "requested_at" field.
func RequestedAtEQ(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestedAt), v))
	})
}

// RequestedAtNEQ applies the NEQ predicate on the "requested_at" field.
func RequestedAtNEQ(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequestedAt), v))
	})
}

// RequestedAtIn applies the In predicate on the "requested_at" field.
func RequestedAtIn(vs ...int64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRequestedAt), v...))
	})
}

// RequestedAtNotIn applies the NotIn predicate on the "requested_at" field.
func RequestedAtNotIn(vs ...int64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRequestedAt), v...))
	})
}

// RequestedAtGT applies the GT predicate on the "requested_at" field.
func RequestedAtGT(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequestedAt), v))
	})
}

// RequestedAtGTE applies the GTE predicate on the "requested_at" field.
func RequestedAtGTE(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequestedAt), v))
	})
}

// RequestedAtLT applies the LT predicate on the "requested_at" field.
func RequestedAtLT(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequestedAt), v))
	})
}

// RequestedAtLTE applies the LTE predicate on the "requested_at" field.
func RequestedAtLTE(v int64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequestedAt), v))
	})
}

// RequestedAtIsNil applies the IsNil predicate on the "requested_at" field.
func RequestedAtIsNil() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequestedAt)))
	})
}

// RequestedAtNotNil applies the NotNil predicate on the "requested_at" field.
func RequestedAtNotNil() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequestedAt)))
	})
}

// HasObjects applies the HasEdge predicate on the "objects" edge.
func HasObjects() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ObjectsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ObjectsTable, ObjectsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasObjectsWith applies the HasEdge predicate on the "objects" edge with a given conditions (other predicates).
func HasObjectsWith(preds ...predicate.Object) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ObjectsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ObjectsTable, ObjectsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		p(s.Not())
	})
}
