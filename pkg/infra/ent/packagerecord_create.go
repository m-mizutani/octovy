// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/octovy/pkg/infra/ent/packagerecord"
	"github.com/m-mizutani/octovy/pkg/infra/ent/scan"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnerability"
)

// PackageRecordCreate is the builder for creating a PackageRecord entity.
type PackageRecordCreate struct {
	config
	mutation *PackageRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (prc *PackageRecordCreate) SetType(s string) *PackageRecordCreate {
	prc.mutation.SetType(s)
	return prc
}

// SetSource sets the "source" field.
func (prc *PackageRecordCreate) SetSource(s string) *PackageRecordCreate {
	prc.mutation.SetSource(s)
	return prc
}

// SetName sets the "name" field.
func (prc *PackageRecordCreate) SetName(s string) *PackageRecordCreate {
	prc.mutation.SetName(s)
	return prc
}

// SetVersion sets the "version" field.
func (prc *PackageRecordCreate) SetVersion(s string) *PackageRecordCreate {
	prc.mutation.SetVersion(s)
	return prc
}

// SetVulnIds sets the "vuln_ids" field.
func (prc *PackageRecordCreate) SetVulnIds(s []string) *PackageRecordCreate {
	prc.mutation.SetVulnIds(s)
	return prc
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (prc *PackageRecordCreate) AddScanIDs(ids ...string) *PackageRecordCreate {
	prc.mutation.AddScanIDs(ids...)
	return prc
}

// AddScan adds the "scan" edges to the Scan entity.
func (prc *PackageRecordCreate) AddScan(s ...*Scan) *PackageRecordCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return prc.AddScanIDs(ids...)
}

// AddVulnerabilityIDs adds the "vulnerabilities" edge to the Vulnerability entity by IDs.
func (prc *PackageRecordCreate) AddVulnerabilityIDs(ids ...string) *PackageRecordCreate {
	prc.mutation.AddVulnerabilityIDs(ids...)
	return prc
}

// AddVulnerabilities adds the "vulnerabilities" edges to the Vulnerability entity.
func (prc *PackageRecordCreate) AddVulnerabilities(v ...*Vulnerability) *PackageRecordCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return prc.AddVulnerabilityIDs(ids...)
}

// Mutation returns the PackageRecordMutation object of the builder.
func (prc *PackageRecordCreate) Mutation() *PackageRecordMutation {
	return prc.mutation
}

// Save creates the PackageRecord in the database.
func (prc *PackageRecordCreate) Save(ctx context.Context) (*PackageRecord, error) {
	var (
		err  error
		node *PackageRecord
	)
	if len(prc.hooks) == 0 {
		if err = prc.check(); err != nil {
			return nil, err
		}
		node, err = prc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PackageRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prc.check(); err != nil {
				return nil, err
			}
			prc.mutation = mutation
			if node, err = prc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(prc.hooks) - 1; i >= 0; i-- {
			if prc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PackageRecordCreate) SaveX(ctx context.Context) *PackageRecord {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PackageRecordCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PackageRecordCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PackageRecordCreate) check() error {
	if _, ok := prc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if _, ok := prc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "source"`)}
	}
	if _, ok := prc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := prc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "version"`)}
	}
	if _, ok := prc.mutation.VulnIds(); !ok {
		return &ValidationError{Name: "vuln_ids", err: errors.New(`ent: missing required field "vuln_ids"`)}
	}
	return nil
}

func (prc *PackageRecordCreate) sqlSave(ctx context.Context) (*PackageRecord, error) {
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (prc *PackageRecordCreate) createSpec() (*PackageRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &PackageRecord{config: prc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: packagerecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: packagerecord.FieldID,
			},
		}
	)
	_spec.OnConflict = prc.conflict
	if value, ok := prc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: packagerecord.FieldType,
		})
		_node.Type = value
	}
	if value, ok := prc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: packagerecord.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := prc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: packagerecord.FieldName,
		})
		_node.Name = value
	}
	if value, ok := prc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: packagerecord.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := prc.mutation.VulnIds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: packagerecord.FieldVulnIds,
		})
		_node.VulnIds = value
	}
	if nodes := prc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   packagerecord.ScanTable,
			Columns: packagerecord.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.VulnerabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   packagerecord.VulnerabilitiesTable,
			Columns: packagerecord.VulnerabilitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackageRecord.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackageRecordUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
//
func (prc *PackageRecordCreate) OnConflict(opts ...sql.ConflictOption) *PackageRecordUpsertOne {
	prc.conflict = opts
	return &PackageRecordUpsertOne{
		create: prc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackageRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (prc *PackageRecordCreate) OnConflictColumns(columns ...string) *PackageRecordUpsertOne {
	prc.conflict = append(prc.conflict, sql.ConflictColumns(columns...))
	return &PackageRecordUpsertOne{
		create: prc,
	}
}

type (
	// PackageRecordUpsertOne is the builder for "upsert"-ing
	//  one PackageRecord node.
	PackageRecordUpsertOne struct {
		create *PackageRecordCreate
	}

	// PackageRecordUpsert is the "OnConflict" setter.
	PackageRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *PackageRecordUpsert) SetType(v string) *PackageRecordUpsert {
	u.Set(packagerecord.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageRecordUpsert) UpdateType() *PackageRecordUpsert {
	u.SetExcluded(packagerecord.FieldType)
	return u
}

// SetSource sets the "source" field.
func (u *PackageRecordUpsert) SetSource(v string) *PackageRecordUpsert {
	u.Set(packagerecord.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *PackageRecordUpsert) UpdateSource() *PackageRecordUpsert {
	u.SetExcluded(packagerecord.FieldSource)
	return u
}

// SetName sets the "name" field.
func (u *PackageRecordUpsert) SetName(v string) *PackageRecordUpsert {
	u.Set(packagerecord.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackageRecordUpsert) UpdateName() *PackageRecordUpsert {
	u.SetExcluded(packagerecord.FieldName)
	return u
}

// SetVersion sets the "version" field.
func (u *PackageRecordUpsert) SetVersion(v string) *PackageRecordUpsert {
	u.Set(packagerecord.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *PackageRecordUpsert) UpdateVersion() *PackageRecordUpsert {
	u.SetExcluded(packagerecord.FieldVersion)
	return u
}

// SetVulnIds sets the "vuln_ids" field.
func (u *PackageRecordUpsert) SetVulnIds(v []string) *PackageRecordUpsert {
	u.Set(packagerecord.FieldVulnIds, v)
	return u
}

// UpdateVulnIds sets the "vuln_ids" field to the value that was provided on create.
func (u *PackageRecordUpsert) UpdateVulnIds() *PackageRecordUpsert {
	u.SetExcluded(packagerecord.FieldVulnIds)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PackageRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PackageRecordUpsertOne) UpdateNewValues() *PackageRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PackageRecord.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PackageRecordUpsertOne) Ignore() *PackageRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackageRecordUpsertOne) DoNothing() *PackageRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackageRecordCreate.OnConflict
// documentation for more info.
func (u *PackageRecordUpsertOne) Update(set func(*PackageRecordUpsert)) *PackageRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackageRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *PackageRecordUpsertOne) SetType(v string) *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageRecordUpsertOne) UpdateType() *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateType()
	})
}

// SetSource sets the "source" field.
func (u *PackageRecordUpsertOne) SetSource(v string) *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *PackageRecordUpsertOne) UpdateSource() *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateSource()
	})
}

// SetName sets the "name" field.
func (u *PackageRecordUpsertOne) SetName(v string) *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackageRecordUpsertOne) UpdateName() *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *PackageRecordUpsertOne) SetVersion(v string) *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *PackageRecordUpsertOne) UpdateVersion() *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateVersion()
	})
}

// SetVulnIds sets the "vuln_ids" field.
func (u *PackageRecordUpsertOne) SetVulnIds(v []string) *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetVulnIds(v)
	})
}

// UpdateVulnIds sets the "vuln_ids" field to the value that was provided on create.
func (u *PackageRecordUpsertOne) UpdateVulnIds() *PackageRecordUpsertOne {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateVulnIds()
	})
}

// Exec executes the query.
func (u *PackageRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackageRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackageRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackageRecordUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackageRecordUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackageRecordCreateBulk is the builder for creating many PackageRecord entities in bulk.
type PackageRecordCreateBulk struct {
	config
	builders []*PackageRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the PackageRecord entities in the database.
func (prcb *PackageRecordCreateBulk) Save(ctx context.Context) ([]*PackageRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PackageRecord, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackageRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PackageRecordCreateBulk) SaveX(ctx context.Context) []*PackageRecord {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PackageRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PackageRecordCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackageRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackageRecordUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
//
func (prcb *PackageRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackageRecordUpsertBulk {
	prcb.conflict = opts
	return &PackageRecordUpsertBulk{
		create: prcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackageRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (prcb *PackageRecordCreateBulk) OnConflictColumns(columns ...string) *PackageRecordUpsertBulk {
	prcb.conflict = append(prcb.conflict, sql.ConflictColumns(columns...))
	return &PackageRecordUpsertBulk{
		create: prcb,
	}
}

// PackageRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of PackageRecord nodes.
type PackageRecordUpsertBulk struct {
	create *PackageRecordCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PackageRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PackageRecordUpsertBulk) UpdateNewValues() *PackageRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackageRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PackageRecordUpsertBulk) Ignore() *PackageRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackageRecordUpsertBulk) DoNothing() *PackageRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackageRecordCreateBulk.OnConflict
// documentation for more info.
func (u *PackageRecordUpsertBulk) Update(set func(*PackageRecordUpsert)) *PackageRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackageRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *PackageRecordUpsertBulk) SetType(v string) *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageRecordUpsertBulk) UpdateType() *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateType()
	})
}

// SetSource sets the "source" field.
func (u *PackageRecordUpsertBulk) SetSource(v string) *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *PackageRecordUpsertBulk) UpdateSource() *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateSource()
	})
}

// SetName sets the "name" field.
func (u *PackageRecordUpsertBulk) SetName(v string) *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackageRecordUpsertBulk) UpdateName() *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *PackageRecordUpsertBulk) SetVersion(v string) *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *PackageRecordUpsertBulk) UpdateVersion() *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateVersion()
	})
}

// SetVulnIds sets the "vuln_ids" field.
func (u *PackageRecordUpsertBulk) SetVulnIds(v []string) *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.SetVulnIds(v)
	})
}

// UpdateVulnIds sets the "vuln_ids" field to the value that was provided on create.
func (u *PackageRecordUpsertBulk) UpdateVulnIds() *PackageRecordUpsertBulk {
	return u.Update(func(s *PackageRecordUpsert) {
		s.UpdateVulnIds()
	})
}

// Exec executes the query.
func (u *PackageRecordUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackageRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackageRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackageRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
