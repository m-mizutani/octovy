package db

import (
	"context"

	"github.com/m-mizutani/goerr"
	"github.com/m-mizutani/octovy/pkg/infra/ent"
)

func (x *Client) PutVulnerabilities(ctx context.Context, vulnerabilities []*ent.Vulnerability) error {
	if x.lock {
		x.mutex.Lock()
		defer x.mutex.Unlock()
	}

	vulnBuilder := make([]*ent.VulnerabilityCreate, len(vulnerabilities))
	for i, vuln := range vulnerabilities {
		vulnBuilder[i] = x.client.Vulnerability.Create().
			SetID(vuln.ID).
			SetFirstSeenAt(vuln.FirstSeenAt).
			SetLastModifiedAt(vuln.LastModifiedAt).
			SetTitle(vuln.Title).
			SetDescription(vuln.Description).
			SetCweID(vuln.CweID).
			SetSeverity(vuln.Severity).
			SetCvss(vuln.Cvss).
			SetReferences(vuln.References)
	}

	q := x.client.Vulnerability.
		CreateBulk(vulnBuilder...).
		OnConflictColumns("id").
		UpdateNewValues()

	if err := q.Exec(ctx); err != nil {
		return goerr.Wrap(err)
	}

	return nil
}

func (x *Client) PutVulnStatus(ctx context.Context, repo *ent.Repository, status *ent.VulnStatus) error {
	if x.lock {
		x.mutex.Lock()
		defer x.mutex.Unlock()
	}

	q := x.client.VulnStatus.Create().
		SetStatus(status.Status).
		SetSource(status.Source).
		SetPkgName(status.PkgName).
		SetPkgType(status.PkgType).
		SetVulnID(status.VulnID).
		SetExpiresAt(status.ExpiresAt).
		SetCreatedAt(status.CreatedAt)

	added, err := q.Save(ctx)
	if err != nil {
		return goerr.Wrap(err)
	}

	if _, err := repo.Update().AddStatus(added).Save(ctx); err != nil {
		return goerr.Wrap(err)
	}

	return nil
}
