package db

import (
	"context"
	"fmt"

	"github.com/m-mizutani/goerr"
	"github.com/m-mizutani/octovy/pkg/infra/ent"
	"github.com/m-mizutani/octovy/pkg/infra/ent/vulnstatus"
)

func (x *Client) PutVulnerabilities(ctx context.Context, vulnerabilities []*ent.Vulnerability) error {
	if x.lock {
		x.mutex.Lock()
		defer x.mutex.Unlock()
	}

	vulnBuilder := make([]*ent.VulnerabilityCreate, len(vulnerabilities))
	for i, vuln := range vulnerabilities {
		vulnBuilder[i] = x.client.Vulnerability.Create().
			SetID(vuln.ID).
			SetFirstSeenAt(vuln.FirstSeenAt).
			SetLastModifiedAt(vuln.LastModifiedAt).
			SetTitle(vuln.Title).
			SetDescription(vuln.Description).
			SetCweID(vuln.CweID).
			SetSeverity(vuln.Severity).
			SetCvss(vuln.Cvss).
			SetReferences(vuln.References)
	}

	q := x.client.Vulnerability.
		CreateBulk(vulnBuilder...).
		OnConflictColumns("id").
		UpdateNewValues()

	if err := q.Exec(ctx); err != nil {
		return goerr.Wrap(err)
	}

	return nil
}

type vulnStatusIDKey struct {
	owner   string
	repo    string
	src     string
	pkgName string
	vulnID  string
}

func vulnStatusID(key *vulnStatusIDKey) string {
	return fmt.Sprintf("%s/%s|%s|%s|%s", key.owner, key.repo, key.src, key.pkgName, key.vulnID)
}

func (x *Client) PutVulnStatus(ctx context.Context, repo *ent.Repository, status *ent.VulnStatus) error {
	if x.lock {
		x.mutex.Lock()
		defer x.mutex.Unlock()
	}

	id := vulnStatusID(&vulnStatusIDKey{
		owner:   repo.Owner,
		repo:    repo.Name,
		src:     status.Source,
		pkgName: status.PkgName,
		vulnID:  status.VulnID,
	})

	q := x.client.VulnStatus.Create().
		SetID(id).
		SetStatus(status.Status).
		SetSource(status.Source).
		SetPkgName(status.PkgName).
		SetPkgType(status.PkgType).
		SetVulnID(status.VulnID).
		SetExpiresAt(status.ExpiresAt).
		SetCreatedAt(status.CreatedAt).
		SetComment(status.Comment).
		OnConflictColumns("id").
		UpdateNewValues()

	added, err := q.ID(ctx)
	if err != nil {
		return goerr.Wrap(err)
	}

	n, err := repo.QueryStatus().Where(vulnstatus.ID(added)).Count(ctx)
	if err != nil {
		return goerr.Wrap(err)
	}

	if n == 0 {
		if _, err := repo.Update().AddStatuIDs(added).Save(ctx); err != nil {
			return goerr.Wrap(err)
		}
	}

	return nil
}
