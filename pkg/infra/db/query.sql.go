// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const getLatestResultsByCommit = `-- name: GetLatestResultsByCommit :many
SELECT results.id, results.scan_id, results.target, results.target_type, results.class FROM results
INNER JOIN (
    SELECT scans.id AS id FROM meta_github_repository
    INNER JOIN scans ON scans.id = results.scan_id
    WHERE meta_github_repository.commit_id = $1
    AND meta_github_repository.owner = $2
    AND meta_github_repository.repo_name = $3
    ORDER BY scans.created_at DESC
    LIMIT 1
) AS latest_scan ON latest_scan.id = results.scan_id
`

type GetLatestResultsByCommitParams struct {
	CommitID string
	Owner    string
	RepoName string
}

func (q *Queries) GetLatestResultsByCommit(ctx context.Context, arg GetLatestResultsByCommitParams) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, getLatestResultsByCommit, arg.CommitID, arg.Owner, arg.RepoName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.ScanID,
			&i.Target,
			&i.TargetType,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPackages = `-- name: GetPackages :many
SELECT id, target_type, name, version FROM packages WHERE id = ANY($1::text[])
`

func (q *Queries) GetPackages(ctx context.Context, dollar_1 []string) ([]Package, error) {
	rows, err := q.db.QueryContext(ctx, getPackages, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.TargetType,
			&i.Name,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVulnerabilities = `-- name: GetVulnerabilities :many
SELECT id, title, severity, published_at, last_modified_at, data, page_seq FROM vulnerabilities WHERE id = ANY($1::text[])
`

func (q *Queries) GetVulnerabilities(ctx context.Context, dollar_1 []string) ([]Vulnerability, error) {
	rows, err := q.db.QueryContext(ctx, getVulnerabilities, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vulnerability
	for rows.Next() {
		var i Vulnerability
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Severity,
			&i.PublishedAt,
			&i.LastModifiedAt,
			&i.Data,
			&i.PageSeq,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVulnerability = `-- name: GetVulnerability :one
SELECT id, title, severity, published_at, last_modified_at, data, page_seq FROM vulnerabilities WHERE id = $1
`

func (q *Queries) GetVulnerability(ctx context.Context, id string) (Vulnerability, error) {
	row := q.db.QueryRowContext(ctx, getVulnerability, id)
	var i Vulnerability
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Severity,
		&i.PublishedAt,
		&i.LastModifiedAt,
		&i.Data,
		&i.PageSeq,
	)
	return i, err
}

const saveMetaGithubRepository = `-- name: SaveMetaGithubRepository :exec
INSERT INTO meta_github_repository (
    id,
    scan_id,
    owner,
    repo_name,
    branch,
    is_default_branch,
    commit_id,
    base_commit_id,
    pull_request_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type SaveMetaGithubRepositoryParams struct {
	ID              uuid.UUID
	ScanID          uuid.UUID
	Owner           string
	RepoName        string
	Branch          sql.NullString
	IsDefaultBranch sql.NullBool
	CommitID        string
	BaseCommitID    sql.NullString
	PullRequestID   sql.NullInt32
}

func (q *Queries) SaveMetaGithubRepository(ctx context.Context, arg SaveMetaGithubRepositoryParams) error {
	_, err := q.db.ExecContext(ctx, saveMetaGithubRepository,
		arg.ID,
		arg.ScanID,
		arg.Owner,
		arg.RepoName,
		arg.Branch,
		arg.IsDefaultBranch,
		arg.CommitID,
		arg.BaseCommitID,
		arg.PullRequestID,
	)
	return err
}

const savePackage = `-- name: SavePackage :exec
INSERT INTO packages (
    id,
    target_type,
    name,
    version
) VALUES (
    $1, $2, $3, $4
)
`

type SavePackageParams struct {
	ID         string
	TargetType string
	Name       string
	Version    string
}

func (q *Queries) SavePackage(ctx context.Context, arg SavePackageParams) error {
	_, err := q.db.ExecContext(ctx, savePackage,
		arg.ID,
		arg.TargetType,
		arg.Name,
		arg.Version,
	)
	return err
}

const saveResult = `-- name: SaveResult :exec
INSERT INTO results (
    id,
    scan_id,
    target,
    target_type,
    class
) VALUES (
    $1, $2, $3, $4, $5
)
`

type SaveResultParams struct {
	ID         uuid.UUID
	ScanID     uuid.UUID
	Target     string
	TargetType string
	Class      TargetClass
}

func (q *Queries) SaveResult(ctx context.Context, arg SaveResultParams) error {
	_, err := q.db.ExecContext(ctx, saveResult,
		arg.ID,
		arg.ScanID,
		arg.Target,
		arg.TargetType,
		arg.Class,
	)
	return err
}

const saveResultPackage = `-- name: SaveResultPackage :exec
INSERT INTO result_packages (
    id,
    result_id,
    pkg_id
) VALUES (
    $1, $2, $3
)
`

type SaveResultPackageParams struct {
	ID       uuid.UUID
	ResultID uuid.UUID
	PkgID    string
}

func (q *Queries) SaveResultPackage(ctx context.Context, arg SaveResultPackageParams) error {
	_, err := q.db.ExecContext(ctx, saveResultPackage, arg.ID, arg.ResultID, arg.PkgID)
	return err
}

const saveResultVulnerability = `-- name: SaveResultVulnerability :exec
INSERT INTO result_vulnerabilities (
    id,
    result_id,
    vuln_id,
    pkg_id,
    installed_version,
    fixed_version
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type SaveResultVulnerabilityParams struct {
	ID               uuid.UUID
	ResultID         uuid.UUID
	VulnID           string
	PkgID            string
	InstalledVersion sql.NullString
	FixedVersion     sql.NullString
}

func (q *Queries) SaveResultVulnerability(ctx context.Context, arg SaveResultVulnerabilityParams) error {
	_, err := q.db.ExecContext(ctx, saveResultVulnerability,
		arg.ID,
		arg.ResultID,
		arg.VulnID,
		arg.PkgID,
		arg.InstalledVersion,
		arg.FixedVersion,
	)
	return err
}

const saveScan = `-- name: SaveScan :exec
INSERT INTO scans (
    id,
    artifact_name,
    artifact_type
) VALUES (
    $1, $2, $3
)
`

type SaveScanParams struct {
	ID           uuid.UUID
	ArtifactName string
	ArtifactType string
}

func (q *Queries) SaveScan(ctx context.Context, arg SaveScanParams) error {
	_, err := q.db.ExecContext(ctx, saveScan, arg.ID, arg.ArtifactName, arg.ArtifactType)
	return err
}

const saveVulnerability = `-- name: SaveVulnerability :exec
INSERT INTO vulnerabilities (
    id,
    title,
    severity,
    published_at,
    last_modified_at,
    data
) VALUES (
    $1, $2, $3, $4, $5, $6
) ON CONFLICT (id)
DO UPDATE SET
    title = $2,
    severity = $3,
    published_at = $4,
    last_modified_at = $5,
    data = $6
WHERE vulnerabilities.last_modified_at < $5
`

type SaveVulnerabilityParams struct {
	ID             string
	Title          string
	Severity       string
	PublishedAt    sql.NullTime
	LastModifiedAt sql.NullTime
	Data           pqtype.NullRawMessage
}

func (q *Queries) SaveVulnerability(ctx context.Context, arg SaveVulnerabilityParams) error {
	_, err := q.db.ExecContext(ctx, saveVulnerability,
		arg.ID,
		arg.Title,
		arg.Severity,
		arg.PublishedAt,
		arg.LastModifiedAt,
		arg.Data,
	)
	return err
}
