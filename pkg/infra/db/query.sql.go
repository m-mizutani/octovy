// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const getPackages = `-- name: GetPackages :many
SELECT id, target_type, name, version FROM packages WHERE id = ANY($1::text[])
`

func (q *Queries) GetPackages(ctx context.Context, dollar_1 []string) ([]Package, error) {
	rows, err := q.db.QueryContext(ctx, getPackages, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.TargetType,
			&i.Name,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVulnerabilities = `-- name: GetVulnerabilities :many
SELECT id, title, description, severity, cwe_ids, cvss, reference, published_at, last_modified_at FROM vulnerabilities WHERE id = ANY($1::text[])
`

func (q *Queries) GetVulnerabilities(ctx context.Context, dollar_1 []string) ([]Vulnerability, error) {
	rows, err := q.db.QueryContext(ctx, getVulnerabilities, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vulnerability
	for rows.Next() {
		var i Vulnerability
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Severity,
			pq.Array(&i.CweIds),
			&i.Cvss,
			pq.Array(&i.Reference),
			&i.PublishedAt,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMetaGithubRepository = `-- name: SaveMetaGithubRepository :exec
INSERT INTO meta_github_repository (
    id,
    scan_id,
    owner,
    repo_name,
    branch,
    commit_id,
    base_commit_id,
    pull_request_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
`

type SaveMetaGithubRepositoryParams struct {
	ID            uuid.UUID
	ScanID        uuid.UUID
	Owner         string
	RepoName      string
	Branch        sql.NullString
	CommitID      string
	BaseCommitID  sql.NullString
	PullRequestID sql.NullInt32
}

func (q *Queries) SaveMetaGithubRepository(ctx context.Context, arg SaveMetaGithubRepositoryParams) error {
	_, err := q.db.ExecContext(ctx, saveMetaGithubRepository,
		arg.ID,
		arg.ScanID,
		arg.Owner,
		arg.RepoName,
		arg.Branch,
		arg.CommitID,
		arg.BaseCommitID,
		arg.PullRequestID,
	)
	return err
}

const savePackage = `-- name: SavePackage :exec
INSERT INTO packages (
    id,
    target_type,
    name,
    version
) VALUES (
    $1, $2, $3, $4
)
`

type SavePackageParams struct {
	ID         string
	TargetType string
	Name       string
	Version    string
}

func (q *Queries) SavePackage(ctx context.Context, arg SavePackageParams) error {
	_, err := q.db.ExecContext(ctx, savePackage,
		arg.ID,
		arg.TargetType,
		arg.Name,
		arg.Version,
	)
	return err
}

const saveResult = `-- name: SaveResult :exec
INSERT INTO results (
    id,
    scan_id,
    target,
    target_type,
    class
) VALUES (
    $1, $2, $3, $4, $5
)
`

type SaveResultParams struct {
	ID         uuid.UUID
	ScanID     uuid.UUID
	Target     string
	TargetType string
	Class      TargetClass
}

func (q *Queries) SaveResult(ctx context.Context, arg SaveResultParams) error {
	_, err := q.db.ExecContext(ctx, saveResult,
		arg.ID,
		arg.ScanID,
		arg.Target,
		arg.TargetType,
		arg.Class,
	)
	return err
}

const saveResultPackage = `-- name: SaveResultPackage :exec
INSERT INTO result_packages (
    id,
    result_id,
    pkg_id
) VALUES (
    $1, $2, $3
)
`

type SaveResultPackageParams struct {
	ID       uuid.UUID
	ResultID uuid.UUID
	PkgID    string
}

func (q *Queries) SaveResultPackage(ctx context.Context, arg SaveResultPackageParams) error {
	_, err := q.db.ExecContext(ctx, saveResultPackage, arg.ID, arg.ResultID, arg.PkgID)
	return err
}

const saveResultVulnerability = `-- name: SaveResultVulnerability :exec
INSERT INTO result_vulnerabilities (
    id,
    result_id,
    vuln_id,
    pkg_id,
    fixed_version,
    primary_url
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type SaveResultVulnerabilityParams struct {
	ID           uuid.UUID
	ResultID     uuid.UUID
	VulnID       string
	PkgID        string
	FixedVersion sql.NullString
	PrimaryUrl   sql.NullString
}

func (q *Queries) SaveResultVulnerability(ctx context.Context, arg SaveResultVulnerabilityParams) error {
	_, err := q.db.ExecContext(ctx, saveResultVulnerability,
		arg.ID,
		arg.ResultID,
		arg.VulnID,
		arg.PkgID,
		arg.FixedVersion,
		arg.PrimaryUrl,
	)
	return err
}

const saveScan = `-- name: SaveScan :exec
INSERT INTO scans (
    id,
    artifact_name,
    artifact_type
) VALUES (
    $1, $2, $3
)
`

type SaveScanParams struct {
	ID           uuid.UUID
	ArtifactName string
	ArtifactType string
}

func (q *Queries) SaveScan(ctx context.Context, arg SaveScanParams) error {
	_, err := q.db.ExecContext(ctx, saveScan, arg.ID, arg.ArtifactName, arg.ArtifactType)
	return err
}

const saveVulnerability = `-- name: SaveVulnerability :exec
INSERT INTO vulnerabilities (
    id,
    title,
    description,
    severity,
    cwe_ids,
    cvss,
    reference,
    published_at,
    last_modified_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type SaveVulnerabilityParams struct {
	ID             string
	Title          string
	Description    string
	Severity       string
	CweIds         []string
	Cvss           pqtype.NullRawMessage
	Reference      []string
	PublishedAt    sql.NullTime
	LastModifiedAt sql.NullTime
}

func (q *Queries) SaveVulnerability(ctx context.Context, arg SaveVulnerabilityParams) error {
	_, err := q.db.ExecContext(ctx, saveVulnerability,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Severity,
		pq.Array(arg.CweIds),
		arg.Cvss,
		pq.Array(arg.Reference),
		arg.PublishedAt,
		arg.LastModifiedAt,
	)
	return err
}

const updateVulnerability = `-- name: UpdateVulnerability :exec
UPDATE vulnerabilities SET
    title = $2,
    description = $3,
    severity = $4,
    cwe_ids = $5,
    cvss = $6,
    reference = $7,
    published_at = $8,
    last_modified_at = $9
WHERE id = $1 and last_modified_at < $9
`

type UpdateVulnerabilityParams struct {
	ID             string
	Title          string
	Description    string
	Severity       string
	CweIds         []string
	Cvss           pqtype.NullRawMessage
	Reference      []string
	PublishedAt    sql.NullTime
	LastModifiedAt sql.NullTime
}

func (q *Queries) UpdateVulnerability(ctx context.Context, arg UpdateVulnerabilityParams) error {
	_, err := q.db.ExecContext(ctx, updateVulnerability,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Severity,
		pq.Array(arg.CweIds),
		arg.Cvss,
		pq.Array(arg.Reference),
		arg.PublishedAt,
		arg.LastModifiedAt,
	)
	return err
}
