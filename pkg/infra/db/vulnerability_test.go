package db_test

import (
	"testing"

	"github.com/aquasecurity/trivy-db/pkg/types"
	"github.com/m-mizutani/octovy/pkg/domain/model"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestVulnerability(t *testing.T) {
	t.Run("Insert and find vulnerabilities", func(t *testing.T) {
		client := newTestTable(t)
		require.NoError(t, client.InsertVulnerability(&model.Vulnerability{
			VulnID: "CVE-1900-1234",
			Detail: types.Vulnerability{
				Title: "blue",
			},
			FirstSeenAt:    1234000,
			LastModifiedAt: 300,
		}))
		require.NoError(t, client.InsertVulnerability(&model.Vulnerability{
			VulnID: "CVE-1900-1235",
			Detail: types.Vulnerability{
				Title: "orange",
			},
			FirstSeenAt:    2345000,
			LastModifiedAt: 200,
		}))
		require.NoError(t, client.InsertVulnerability(&model.Vulnerability{
			VulnID: "CVE-1900-1236",
			Detail: types.Vulnerability{
				Title: "red",
			},
			FirstSeenAt:    3456000,
			LastModifiedAt: 100,
		}))

		t.Run("Find one vuln by ID", func(t *testing.T) {
			r1, err := client.FindVulnerability("CVE-1900-1235")
			require.NoError(t, err)
			require.NotNil(t, r1)
			assert.Equal(t, "orange", r1.Detail.Title)
			assert.Equal(t, int64(2345000), r1.FirstSeenAt)
			assert.Equal(t, int64(200), r1.LastModifiedAt)
		})

		t.Run("Not find vuln by non existing ID", func(t *testing.T) {
			r1, err := client.FindVulnerability("CVE-1900-0000")
			require.NoError(t, err)
			require.Nil(t, r1)
		})

		t.Run("Find latest 2 vulns", func(t *testing.T) {
			r, err := client.FindLatestVulnerabilities(2)
			require.NoError(t, err)
			require.Equal(t, 2, len(r))
			assert.Equal(t, "red", r[0].Detail.Title)
			assert.Equal(t, "orange", r[1].Detail.Title)
		})

		t.Run("Find latest 3 vulns by 5", func(t *testing.T) {
			r, err := client.FindLatestVulnerabilities(5)
			require.NoError(t, err)
			require.Equal(t, 3, len(r))
			assert.Equal(t, "red", r[0].Detail.Title)
			assert.Equal(t, "orange", r[1].Detail.Title)
			assert.Equal(t, "blue", r[2].Detail.Title)
		})

		t.Run("Batch get vulnerabilities", func(t *testing.T) {
			r, err := client.GetVulnerabilities([]string{"CVE-1900-1234", "CVE-1900-1236"})
			require.NoError(t, err)
			require.Equal(t, 2, len(r))
			assert.Contains(t, []string{r[0].Detail.Title, r[1].Detail.Title}, "blue")
			assert.Contains(t, []string{r[0].Detail.Title, r[1].Detail.Title}, "red")
		})

		t.Run("Batch get vulnerabilities without not found error", func(t *testing.T) {
			r, err := client.GetVulnerabilities([]string{"CVE-1900-1234", "CVE-1900-1236", "CVE-XXXX-1236"})
			require.NoError(t, err)
			require.Equal(t, 2, len(r))
			assert.Contains(t, []string{r[0].Detail.Title, r[1].Detail.Title}, "blue")
			assert.Contains(t, []string{r[0].Detail.Title, r[1].Detail.Title}, "red")
		})

		t.Run("Batch get vulnerabilities without not found error (all)", func(t *testing.T) {
			r, err := client.GetVulnerabilities([]string{"CVE-XXXX-1236"})
			require.NoError(t, err)
			require.Equal(t, 0, len(r))
		})

	})

	t.Run("Overwrite existing vuln", func(t *testing.T) {
		client := newTestTable(t)
		require.NoError(t, client.InsertVulnerability(&model.Vulnerability{
			VulnID: "CVE-1900-1234",
			Detail: types.Vulnerability{
				Title: "blue",
			},
			FirstSeenAt:    1234,
			LastModifiedAt: 300,
		}))

		require.NoError(t, client.InsertVulnerability(&model.Vulnerability{
			VulnID: "CVE-1900-1234",
			Detail: types.Vulnerability{
				Title: "blue (2)",
			},
			FirstSeenAt:    1234,
			LastModifiedAt: 301,
		}))

		r, err := client.FindVulnerability("CVE-1900-1234")
		require.NoError(t, err)
		require.NotNil(t, r)
		assert.Equal(t, "blue (2)", r.Detail.Title)
	})

	t.Run("Can not overwrite existing vuln because of old timestamp", func(t *testing.T) {
		client := newTestTable(t)
		require.NoError(t, client.InsertVulnerability(&model.Vulnerability{
			VulnID: "CVE-1900-1234",
			Detail: types.Vulnerability{
				Title: "blue",
			},
			FirstSeenAt:    1234,
			LastModifiedAt: 300,
		}))

		require.NoError(t, client.InsertVulnerability(&model.Vulnerability{
			VulnID: "CVE-1900-1234",
			Detail: types.Vulnerability{
				Title: "blue (0)",
			},
			FirstSeenAt:    1234,
			LastModifiedAt: 300,
		}))

		r, err := client.FindVulnerability("CVE-1900-1234")
		require.NoError(t, err)
		require.NotNil(t, r)
		assert.Equal(t, "blue", r.Detail.Title)
	})
}
