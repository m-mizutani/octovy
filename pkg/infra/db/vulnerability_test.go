package db_test

import (
	"testing"
	"time"

	"github.com/m-mizutani/octovy/pkg/domain/model"
	"github.com/m-mizutani/octovy/pkg/domain/types"
	"github.com/m-mizutani/octovy/pkg/infra/ent"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestVulnerability(t *testing.T) {
	t.Run("bulk insert and get them", func(t *testing.T) {
		db := setupDBWithoutDefault(t)
		ctx := model.NewContext()
		originals := []*ent.Vulnerability{
			{
				ID:             "CVE-1000",
				Title:          "blue",
				FirstSeenAt:    1000, // [1]
				LastModifiedAt: 2000,
			},
			{
				ID:             "CVE-2000",
				Title:          "orange",
				FirstSeenAt:    1200, // [0]
				LastModifiedAt: 2000,
			},
			{
				ID:             "CVE-3000",
				Title:          "red",
				FirstSeenAt:    800, // [2]
				LastModifiedAt: 2000,
			},
			{
				ID:             "CVE-4000",
				Title:          "yellow",
				FirstSeenAt:    200, // [3]
				LastModifiedAt: 2000,
			},
		}
		err := db.PutVulnerabilities(ctx, originals)
		require.NoError(t, err)

		v1, err := db.GetVulnerability(ctx, "CVE-1000")
		require.NoError(t, err)
		assert.Equal(t, "blue", v1.Title)
		vulns, err := db.GetLatestVulnerabilities(ctx, 1, 2)
		require.NoError(t, err)
		assert.Len(t, vulns, 2)
		assert.Equal(t, originals[0].ID, vulns[0].ID)
		assert.Equal(t, originals[2].ID, vulns[1].ID)
	})

	t.Run("update values excluding firstSeen", func(t *testing.T) {
		db := setupDBWithoutDefault(t)
		ctx := model.NewContext()
		before := []*ent.Vulnerability{
			{
				ID:          "CVE-1000",
				FirstSeenAt: 101,
			},
			{
				ID:             "CVE-2000",
				Title:          "orange",
				FirstSeenAt:    102,
				LastModifiedAt: 10000,
				Description:    "puppeter",
				CweID:          []string{"CWE-1"},
				Severity:       "low",
				Cvss:           []string{"1"},
				References:     []string{"a"},
			},
			{
				ID:          "CVE-3000",
				FirstSeenAt: 103,
				Description: "not update",
			},
		}
		after := []*ent.Vulnerability{
			{
				ID:             "CVE-1000",
				Title:          "blue",
				FirstSeenAt:    201, // [1]
				LastModifiedAt: 2000,
				Description:    "five",
				CweID:          []string{"CWE-5"},
				Severity:       "none",
				Cvss:           []string{"9"},
				References:     []string{"x"},
			},
			{
				ID:             "CVE-2000",
				Title:          "red",
				FirstSeenAt:    202,
				LastModifiedAt: 3000,
				Description:    "dolls",
				CweID:          []string{"CWE-2"},
				Severity:       "middle",
				Cvss:           []string{"2"},
				References:     []string{"b"},
			},
		}

		require.NoError(t, db.PutVulnerabilities(ctx, before))
		require.NoError(t, db.PutVulnerabilities(ctx, after))

		v1, err := db.GetVulnerability(ctx, "CVE-1000")
		require.NoError(t, err)
		assert.Equal(t, before[0].FirstSeenAt, v1.FirstSeenAt)
		assert.Equal(t, after[0].LastModifiedAt, v1.LastModifiedAt)
		assert.Equal(t, after[0].Title, v1.Title)
		assert.Equal(t, after[0].Description, v1.Description)
		assert.Equal(t, after[0].CweID, v1.CweID)
		assert.Equal(t, after[0].Severity, v1.Severity)
		assert.Equal(t, after[0].Cvss, v1.Cvss)
		assert.Equal(t, after[0].References, v1.References)

		v2, err := db.GetVulnerability(ctx, "CVE-2000")
		require.NoError(t, err)
		assert.Equal(t, before[1].FirstSeenAt, v2.FirstSeenAt)
		assert.Equal(t, after[1].LastModifiedAt, v2.LastModifiedAt)
		assert.Equal(t, after[1].Title, v2.Title)
		assert.Equal(t, after[1].Description, v2.Description)
		assert.Equal(t, after[1].CweID, v2.CweID)
		assert.Equal(t, after[1].Severity, v2.Severity)
		assert.Equal(t, after[1].Cvss, v2.Cvss)
		assert.Equal(t, after[1].References, v2.References)
	})
}

func TestVulnStatus(t *testing.T) {
	ctx := model.NewContext()
	db := setupDBWithoutDefault(t)
	repo, err := db.CreateRepo(ctx, &ent.Repository{
		Owner:     "blue",
		Name:      "five",
		InstallID: 1,
	})
	require.NoError(t, err)

	userID, err := db.PutUser(ctx, &ent.User{
		GithubID: 1234,
		Login:    "m-mizutani",
	})
	require.NoError(t, err)

	status, err := db.PutVulnStatus(ctx, repo, &ent.VulnStatus{
		Status:    types.StatusMitigated,
		Source:    "go.mod",
		PkgName:   "zlog",
		PkgType:   "go",
		VulnID:    "CVE-2000-0000",
		ExpiresAt: time.Now().Add(time.Hour * 24).Unix(),
	}, userID)
	require.NoError(t, err)
	require.NotNil(t, status)

	got, err := db.GetVulnStatus(ctx, &model.GitHubRepo{
		Owner: repo.Owner,
		Name:  repo.Name,
	})
	require.NoError(t, err)

	require.Len(t, got, 1)
	assert.Equal(t, "zlog", got[0].PkgName)
	assert.Equal(t, types.StatusMitigated, got[0].Status)
}
