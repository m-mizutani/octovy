package cli

import (
	"encoding/json"
	"io"
	"os"
	"path/filepath"

	"github.com/m-mizutani/goerr"
	"github.com/m-mizutani/gots/slice"
	"github.com/m-mizutani/octovy/pkg/controller/cli/config"
	"github.com/m-mizutani/octovy/pkg/domain/model"
	"github.com/m-mizutani/octovy/pkg/domain/model/trivy"
	"github.com/m-mizutani/octovy/pkg/infra"
	"github.com/m-mizutani/octovy/pkg/usecase"
	"github.com/urfave/cli/v2"
)

func insertCommand() *cli.Command {
	var (
		bigQuery config.BigQuery
		filePath string
		meta     model.GitHubMetadata
	)

	return &cli.Command{
		Name:    "insert",
		Aliases: []string{"i"},
		Usage:   "Insert trivy scan result JSON file to BigQuery",
		Flags: slice.Flatten([]cli.Flag{
			&cli.StringFlag{
				Name:        "file",
				Aliases:     []string{"f"},
				Usage:       "Path to JSON file generated by trivy. '-' is stdin",
				Value:       "-",
				Destination: &filePath,
			},

			&cli.StringFlag{
				Name:        "github-owner",
				Usage:       "GitHub repository owner",
				EnvVars:     []string{"OCTOVY_GITHUB_OWNER"},
				Destination: &meta.Owner,
				Required:    true,
			},
			&cli.StringFlag{
				Name:        "github-repo",
				Usage:       "GitHub repository name",
				EnvVars:     []string{"OCTOVY_GITHUB_REPO"},
				Destination: &meta.RepoName,
				Required:    true,
			},
			&cli.StringFlag{
				Name:        "github-commit-id",
				Usage:       "GitHub commit ID",
				EnvVars:     []string{"OCTOVY_GITHUB_COMMIT_ID"},
				Destination: &meta.CommitID,
				Required:    true,
			},
		}, bigQuery.Flags()),
		Action: func(c *cli.Context) error {
			ctx := c.Context

			bqClient, err := bigQuery.NewClient(ctx)
			if err != nil {
				return err
			}

			clients := infra.New(infra.WithBigQuery(bqClient))
			uc := usecase.New(clients)

			var r io.Reader
			switch filePath {
			case "-":
				r = c.App.Reader
			default:
				f, err := os.Open(filepath.Clean(filePath))
				if err != nil {
					return goerr.Wrap(err).With("file", filePath)
				}
				defer f.Close()
				r = f
			}

			var report trivy.Report
			if err := json.NewDecoder(r).Decode(&report); err != nil {
				return goerr.Wrap(err, "failed to parse trivy result data")
			}

			if err := uc.InsertScanResult(ctx, meta, report); err != nil {
				return goerr.Wrap(err).With("file", filePath)
			}

			return nil
		},
	}
}
