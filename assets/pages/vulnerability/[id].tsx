import React from "react";
import { useRouter } from "next/router";
import Link from "next/link";

import Grid from "@mui/material/Grid";
import Container from "@mui/material/Container";
import Typography from "@mui/material/Typography";
import Alert from "@mui/material/Alert";
import { styled } from "@mui/material/styles";
import Box from "@mui/material/Box";
import Paper from "@mui/material/Paper";

import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";

import strftime from "strftime";
import ReactMarkdown from "react-markdown";
import TimeAgo from "javascript-time-ago";
import en from "javascript-time-ago/locale/en.json";

import * as model from "../../components/model";
import * as cvss from "../../components/cvss";
import * as app from "../../components/app";
import { makeStyles } from "@mui/styles";

TimeAgo.addDefaultLocale(en);

const Item = styled(Paper)(({ theme }) => ({
  ...theme.typography.body2,
  padding: theme.spacing(1),
  textAlign: "center",
  color: theme.palette.text.secondary,
}));

const useStyles = makeStyles((theme) => ({
  vulnTypography: {
    marginTop: 8,
    marginRight: 1,
    marginLeft: 0,
    marginBottom: 4,
    fontSize: 16,
    fontFamily: "Helvetica",
  },
}));

type respVuln = {
  vulnerability: model.vulnerability;
  affected: model.repository[];
};

type pageStatus = {
  isLoaded: boolean;
  resp?: respVuln;
  err?: any;
};

export default function Vulnerability() {
  const style = useStyles();

  const router = useRouter();
  const vulnID = router.query.id;

  const [status, setStatus] = React.useState<pageStatus>({
    isLoaded: false,
  });

  const updateVulnerabilities = () => {
    fetch(`/api/v1/vulnerability/${vulnID}`)
      .then((res) => res.json())
      .then(
        (result) => {
          console.log("result:", { result });
          if (result.error) {
            setStatus({ isLoaded: true, err: result.error });
          } else {
            setStatus({
              isLoaded: true,
              resp: result.data,
            });
          }
        },
        (error) => {
          console.log("error:", { error });
          setStatus({
            isLoaded: true,
            err: error,
          });
        }
      );
  };

  React.useEffect(updateVulnerabilities, [vulnID]);

  if (!status.isLoaded) {
    return (
      <app.Main>
        <Typography variant="h5">Loading...</Typography>
      </app.Main>
    );
  } else if (status.err) {
    return (
      <app.Main>
        <Alert severity="error">{status.err}</Alert>
      </app.Main>
    );
  }

  const vuln = status.resp.vulnerability;

  const items: { title: string; value: string }[] = [
    {
      title: "Severity",
      value: vuln.severity,
    },
    {
      title: "First detection",
      value: strftime("%F %T", new Date(vuln.first_seen_at * 1000)),
    },
    {
      title: "Last modified",
      value: strftime("%F %T", new Date(vuln.last_modified_at * 1000)),
    },
    {
      title: "CWE ID",
      value: vuln.cwe_id,
    },
  ];

  let v3: cvss.V3;

  if (vuln.cvss) {
    vuln.cvss.forEach((s) => {
      const d = s.split(",");
      if (d.length !== 3 || d[1] !== "V3Vector") {
        return;
      }
      v3 = new cvss.V3(d[2]);
    });
  }

  if (v3) {
    items.push({
      title: "Access Vector",
      value: v3.AccessVector(),
    });
    items.push({
      title: "Attack Complexity",
      value: v3.AttackComplexity(),
    });
    items.push({
      title: "Privileges Required",
      value: v3.PrivilegesRequired(),
    });
    items.push({
      title: "User Interaction",
      value: v3.UserInteraction(),
    });
    items.push({
      title: "Scope",
      value: v3.Scope(),
    });
    items.push({
      title: "Confidentiality",
      value: v3.Confidentiality(),
    });
    items.push({
      title: "Integrity",
      value: v3.Integrity(),
    });
    items.push({
      title: "Availability",
      value: v3.Availability(),
    });
    items.push({
      title: "Exploit Code Maturity",
      value: v3.ExploitCodeMaturity(),
    });
    items.push({
      title: "Remediation Level",
      value: v3.RemediationLevel(),
    });
    items.push({
      title: "Report Confidence",
      value: v3.ReportConfidence(),
    });
  }

  return (
    <app.Main>
      <Container>
        <Grid container spacing={2}>
          <Grid item>
            <Typography variant="h5">
              {vuln.id}: {vuln.title}
            </Typography>
          </Grid>
        </Grid>
      </Container>
      <Container>
        <Grid>
          <ReactMarkdown className={style.vulnTypography}>
            {vuln.description}
          </ReactMarkdown>
        </Grid>
        <Grid container spacing={2} style={{ margin: 20 }}>
          {items.map((item, idx) => {
            return (
              <Grid key={`vuln-item-${idx}`} item width={200}>
                <Item>
                  <Typography>{item.title}</Typography>
                  <Typography>{item.value}</Typography>
                </Item>
              </Grid>
            );
          })}
        </Grid>
        <Grid>
          <Typography variant="h6">References</Typography>
          {vuln.references ? (
            <ul>
              {vuln.references.map((url, idx) => {
                return (
                  <li key={`url-${idx}`}>
                    <Link href={url}>{url}</Link>
                  </li>
                );
              })}
            </ul>
          ) : (
            <Typography>N/A</Typography>
          )}
        </Grid>
        <Grid marginBottom={2}>
          <Typography variant="h6">Affected repositories</Typography>
        </Grid>
        <Grid>
          <TableContainer component={Paper}>
            <Table
              sx={{ minWidth: 650 }}
              style={{ width: "100%" }}
              size="small"
              aria-label="a dense table">
              <TableHead>
                <TableRow style={{ background: "#eee" }}>
                  <TableCell>Repository</TableCell>
                  <TableCell>Recent scan of default branch</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>{status.resp.affected.map(Repository)}</TableBody>
            </Table>
          </TableContainer>
        </Grid>
      </Container>
    </app.Main>
  );
}

function Repository(repo: model.repository) {
  return (
    <TableRow key={repo.owner + "/" + repo.name}>
      <TableCell>
        <Link href={repo.url}>{repo.owner + "/" + repo.name}</Link>
      </TableCell>
      <TableCell>
        <Scan repo={repo} scan={repo.edges.latest} />
      </TableCell>
    </TableRow>
  );
}

function Scan(props: { repo: model.repository; scan: model.scan }) {
  if (!props.scan) {
    return <Typography style={{ fontSize: 14 }}>No scan</Typography>;
  }

  const timeAgo = new TimeAgo("en-US");
  const scan = props.scan;
  const ts = new Date(scan.scanned_at * 1000);
  const vulnPkgs: model.packageRecord[] = scan.edges.packages
    ? scan.edges.packages.filter((pkg) => {
        return pkg.vuln_ids;
      })
    : [];
  return (
    <Typography style={{ fontSize: 14 }}>
      <Link href={"/scan/" + scan.id}>
        {vulnPkgs.length > 0
          ? `⚠️ ${vulnPkgs.length} vulnerable packages`
          : "✅ No vulnerabilities"}
      </Link>
      {" / "}
      <Link href={props.repo.url + "/blob/" + scan.commit_id}>
        {scan.commit_id.substr(0, 7)}
      </Link>
      <span> {timeAgo.format(ts)}</span>
    </Typography>
  );
}
