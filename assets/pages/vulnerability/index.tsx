import React from "react";
import { useRouter } from "next/router";
import Link from "next/link";

import Grid from "@mui/material/Grid";
import Container from "@mui/material/Container";
import Typography from "@mui/material/Typography";
import Alert from "@mui/material/Alert";
import Chip from "@mui/material/Chip";
import Stack from "@mui/material/Stack";

import Paper from "@mui/material/Paper";

import strftime from "strftime";
import ReactMarkdown from "react-markdown";

import * as model from "../../components/model";
import * as app from "../../components/app";
import { makeStyles } from "@mui/styles";

const queryLimitSize = 20;

const useStyles = makeStyles((theme) => ({
  vulnTypography: {
    marginTop: 8,
    marginRight: 1,
    marginLeft: 0,
    marginBottom: 4,
    fontSize: 14,
    fontFamily: "Helvetica",
  },
}));

type vulnResp = {
  vulnerabilities: model.vulnerability[];
  total: number;
};

type pageStatus = {
  isLoaded: boolean;
  resp?: vulnResp;
  err?: any;
};

function labelColor(hex: string) {
  var r = parseInt(hex.substr(1, 2), 16);
  var g = parseInt(hex.substr(3, 2), 16);
  var b = parseInt(hex.substr(5, 2), 16);

  return (r * 299 + g * 587 + b * 114) / 1000 < 128 ? "white" : "black";
}

export default function Scan() {
  const style = useStyles();

  const router = useRouter();
  const [status, setStatus] = React.useState<pageStatus>({
    isLoaded: false,
  });

  const updateVulnerabilities = () => {
    const { offset, limit } = router.query;
    console.log({ offset }, { limit });
    const qOffset = offset || "0";
    const qLimit = limit || "20";

    fetch(`/api/v1/vulnerability?offset=${qOffset}&limit=${qLimit}`)
      .then((res) => res.json())
      .then(
        (result) => {
          console.log("result:", { result });
          if (result.error) {
            setStatus({ isLoaded: true, err: result.error });
          } else {
            setStatus({
              isLoaded: true,
              resp: result.data,
            });
          }
        },
        (error) => {
          console.log("error:", { error });
          setStatus({
            isLoaded: true,
            err: error,
          });
        }
      );
  };

  React.useEffect(updateVulnerabilities, [
    router.query.offset,
    router.query.limit,
  ]);

  if (!status.isLoaded) {
    return (
      <app.Main>
        <Typography variant="h5">Loading...</Typography>
      </app.Main>
    );
  } else if (status.err) {
    return (
      <app.Main>
        <Alert severity="error">{status.err}</Alert>
      </app.Main>
    );
  }

  const renderSeverity = (vuln: model.vulnerability) => {
    if (!vuln.edges.custom_severity) {
      return "";
    }

    return (
      <Chip
        size="small"
        style={{
          marginTop: 6,
          backgroundColor: "#3456aa",
          color: labelColor("#3456aa"),
        }}
        label={vuln.edges.custom_severity.label}
      />
    );
  };

  const Vulnerability = (vuln: model.vulnerability) => {
    return (
      <Grid item xs={12} key={vuln.id}>
        <Paper>
          <div style={{ padding: 14 }}>
            <Typography variant="h6" style={{ fontSize: 20 }}>
              <Link href={`/vulnerability/${vuln.id}`}>
                <a style={{ textDecoration: "none" }}>
                  {vuln.id}: {vuln.title}
                </a>
              </Link>
            </Typography>
            <Stack spacing={2} direction="row">
              <Typography className={style.vulnTypography}>
                First detection:{" "}
                {strftime("%F %H:%M", new Date(vuln.first_seen_at * 1000))}
              </Typography>
              {renderSeverity(vuln)}
            </Stack>
            <ReactMarkdown className={style.vulnTypography}>
              {vuln.description}
            </ReactMarkdown>
            <Typography className={style.vulnTypography}>Reference:</Typography>
            <ul>
              {vuln.references
                ? vuln.references.map((r) => {
                    return (
                      <li key={`${vuln.id}-${r}`}>
                        <Link href={r}>{r}</Link>
                      </li>
                    );
                  })
                : ""}
            </ul>
          </div>
        </Paper>
      </Grid>
    );
  };

  return (
    <app.Main>
      <Container>
        <Grid container spacing={2}>
          <Grid item>
            <Typography variant="h5">Recent Vulnerabilities</Typography>
          </Grid>
        </Grid>
      </Container>
      <Container>
        <Grid container spacing={2} style={{ marginTop: 20 }}>
          {status.resp.vulnerabilities.map(Vulnerability)}
        </Grid>
      </Container>
    </app.Main>
  );
}
